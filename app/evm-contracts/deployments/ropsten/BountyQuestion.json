{
  "address": "0xE64AedB13b71033Ed6AeeA6f200BC963d47A31da",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NotTheApi",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "authors",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getAuthor",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "url",
              "type": "string"
            }
          ],
          "internalType": "struct BountyQuestion.QuestionData[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "mintQuestion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "questionApi",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "questions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "url",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newApi",
          "type": "address"
        }
      ],
      "name": "setQuestionApi",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7acada3b2a9e16aa4489c6ff9a6b6b07996b3d1372b93dcced31b0318f27df2f",
  "receipt": {
    "to": null,
    "from": "0x2d11F99f9884e257A1c9ACcc8A4Bea16FC6dA7AA",
    "contractAddress": "0xE64AedB13b71033Ed6AeeA6f200BC963d47A31da",
    "transactionIndex": 2,
    "gasUsed": "1075120",
    "logsBloom": "0x
    "blockHash": "0x9d3df875659b477e8dad3b2dae77ff1e56c99e5bda45f647c8a60e55941be796",
    "transactionHash": "0x7acada3b2a9e16aa4489c6ff9a6b6b07996b3d1372b93dcced31b0318f27df2f",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 12716263,
        "transactionHash": "0x7acada3b2a9e16aa4489c6ff9a6b6b07996b3d1372b93dcced31b0318f27df2f",
        "address": "0xE64AedB13b71033Ed6AeeA6f200BC963d47A31da",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002d11f99f9884e257a1c9accc8a4bea16fc6da7aa"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x9d3df875659b477e8dad3b2dae77ff1e56c99e5bda45f647c8a60e55941be796"
      }
    ],
    "blockNumber": 12716263,
    "cumulativeGasUsed": "1422058",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "6f36acf124c5a645efd286abe6af4794",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotTheApi\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"authors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getAuthor\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"}],\"internalType\":\"struct BountyQuestion.QuestionData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"mintQuestion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"questionApi\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"questions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newApi\",\"type\":\"address\"}],\"name\":\"setQuestionApi\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"custom:security-contact\":\"contracts@metricsdao.xyz\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setQuestionApi(address)\":{\"params\":{\"_newApi\":\"The new address of the question API.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setQuestionApi(address)\":{\"notice\":\"Sets the address of the question API.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/Protocol/BountyQuestion.sol\":\"BountyQuestion\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"src/contracts/Protocol/BountyQuestion.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"./modifiers/OnlyAPI.sol\\\";\\n\\n/// @custom:security-contact contracts@metricsdao.xyz\\ncontract BountyQuestion is Ownable, OnlyApi {\\n    using Counters for Counters.Counter;\\n\\n    Counters.Counter private _questionIdCounter;\\n\\n    // This maps the author to the list of question IDs they have created\\n    mapping(address => uint256[]) public authors;\\n\\n    // This maps the question ID to the question data\\n    mapping(uint256 => QuestionData) public questions;\\n\\n    constructor() {\\n        _questionIdCounter.increment();\\n    }\\n\\n    function mintQuestion(address author, string calldata uri) public onlyApi returns (uint256) {\\n        uint256 questionId = _questionIdCounter.current();\\n        _questionIdCounter.increment();\\n\\n        questions[questionId] = QuestionData({tokenId: questionId, url: uri});\\n        authors[author].push(questionId);\\n        return questionId;\\n    }\\n\\n    function getAuthor(address user) public view returns (QuestionData[] memory) {\\n        uint256[] memory created = authors[user];\\n\\n        QuestionData[] memory ret = new QuestionData[](created.length);\\n        for (uint256 i = 0; i < created.length; i++) {\\n            ret[i] = questions[created[i]];\\n        }\\n        return ret;\\n    }\\n\\n    struct QuestionData {\\n        uint256 tokenId;\\n        string url;\\n    }\\n}\\n\",\"keccak256\":\"0x787edaaa8e84426599743591fa5d39288ae335f419e91b33f882c700d0ddadd1\",\"license\":\"MIT\"},\"src/contracts/Protocol/modifiers/OnlyAPI.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract OnlyApi is Ownable {\\n    address public questionApi;\\n\\n    // ------------------------------- Setter\\n    /**\\n     * @notice Sets the address of the question API.\\n     * @param _newApi The new address of the question API.\\n     */\\n    function setQuestionApi(address _newApi) external onlyOwner {\\n        questionApi = _newApi;\\n    }\\n\\n    // ------------------------ Modifiers\\n    modifier onlyApi() {\\n        if (_msgSender() != questionApi) revert NotTheApi();\\n        _;\\n    }\\n\\n    // ------------------------ Errors\\n    error NotTheApi();\\n}\\n\",\"keccak256\":\"0x0681de2966fa03720603c0e7361f8ee5d887b9526d074ba9c14dbf3b80978934\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061002d61002261004660201b60201c565b61004e60201b60201c565b610041600261011260201b6108fa1760201c565b610128565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6001816000016000828254019250508190555050565b6111a4806101376000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063779746161161006657806377974616146101215780638da5cb5b14610151578063c0875dfd1461016f578063dab6dbce1461018b578063f2fde38b146101bb57610093565b80630ab300931461009857806331b1b978146100c85780636baef497146100f9578063715018a614610117575b600080fd5b6100b260048036038101906100ad9190610b0f565b6101d7565b6040516100bf9190610ced565b60405180910390f35b6100e260048036038101906100dd9190610d3b565b6103e0565b6040516100f0929190610dc1565b60405180910390f35b61010161048c565b60405161010e9190610e00565b60405180910390f35b61011f6104b2565b005b61013b60048036038101906101369190610e1b565b61053a565b6040516101489190610e5b565b60405180910390f35b61015961056b565b6040516101669190610e00565b60405180910390f35b61018960048036038101906101849190610b0f565b610594565b005b6101a560048036038101906101a09190610edb565b610654565b6040516101b29190610e5b565b60405180910390f35b6101d560048036038101906101d09190610b0f565b610803565b005b60606000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561026457602002820191906000526020600020905b815481526020019060010190808311610250575b505050505090506000815167ffffffffffffffff81111561028857610287610f3b565b5b6040519080825280602002602001820160405280156102c157816020015b6102ae6109ea565b8152602001906001900390816102a65790505b50905060005b82518110156103d557600460008483815181106102e7576102e6610f6a565b5b602002602001015181526020019081526020016000206040518060400160405290816000820154815260200160018201805461032290610fc8565b80601f016020809104026020016040519081016040528092919081815260200182805461034e90610fc8565b801561039b5780601f106103705761010080835404028352916020019161039b565b820191906000526020600020905b81548152906001019060200180831161037e57829003601f168201915b5050505050815250508282815181106103b7576103b6610f6a565b5b602002602001018190525080806103cd90611028565b9150506102c7565b508092505050919050565b600460205280600052604060002060009150905080600001549080600101805461040990610fc8565b80601f016020809104026020016040519081016040528092919081815260200182805461043590610fc8565b80156104825780601f1061045757610100808354040283529160200191610482565b820191906000526020600020905b81548152906001019060200180831161046557829003601f168201915b5050505050905082565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6104ba610910565b73ffffffffffffffffffffffffffffffffffffffff166104d861056b565b73ffffffffffffffffffffffffffffffffffffffff161461052e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610525906110bc565b60405180910390fd5b6105386000610918565b565b6003602052816000526040600020818154811061055657600080fd5b90600052602060002001600091509150505481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61059c610910565b73ffffffffffffffffffffffffffffffffffffffff166105ba61056b565b73ffffffffffffffffffffffffffffffffffffffff1614610610576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610607906110bc565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610697610910565b73ffffffffffffffffffffffffffffffffffffffff16146106e4576040517f92471d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006106f060026109dc565b90506106fc60026108fa565b604051806040016040528082815260200185858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508152506004600083815260200190815260200160002060008201518160000155602082015181600101908051906020019061078e929190610a04565b50905050600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819080600181540180825580915050600190039060005260206000200160009091909190915055809150509392505050565b61080b610910565b73ffffffffffffffffffffffffffffffffffffffff1661082961056b565b73ffffffffffffffffffffffffffffffffffffffff161461087f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610876906110bc565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036108ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e59061114e565b60405180910390fd5b6108f781610918565b50565b6001816000016000828254019250508190555050565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081600001549050919050565b604051806040016040528060008152602001606081525090565b828054610a1090610fc8565b90600052602060002090601f016020900481019282610a325760008555610a79565b82601f10610a4b57805160ff1916838001178555610a79565b82800160010185558215610a79579182015b82811115610a78578251825591602001919060010190610a5d565b5b509050610a869190610a8a565b5090565b5b80821115610aa3576000816000905550600101610a8b565b5090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610adc82610ab1565b9050919050565b610aec81610ad1565b8114610af757600080fd5b50565b600081359050610b0981610ae3565b92915050565b600060208284031215610b2557610b24610aa7565b5b6000610b3384828501610afa565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b610b7b81610b68565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610bbb578082015181840152602081019050610ba0565b83811115610bca576000848401525b50505050565b6000601f19601f8301169050919050565b6000610bec82610b81565b610bf68185610b8c565b9350610c06818560208601610b9d565b610c0f81610bd0565b840191505092915050565b6000604083016000830151610c326000860182610b72565b5060208301518482036020860152610c4a8282610be1565b9150508091505092915050565b6000610c638383610c1a565b905092915050565b6000602082019050919050565b6000610c8382610b3c565b610c8d8185610b47565b935083602082028501610c9f85610b58565b8060005b85811015610cdb5784840389528151610cbc8582610c57565b9450610cc783610c6b565b925060208a01995050600181019050610ca3565b50829750879550505050505092915050565b60006020820190508181036000830152610d078184610c78565b905092915050565b610d1881610b68565b8114610d2357600080fd5b50565b600081359050610d3581610d0f565b92915050565b600060208284031215610d5157610d50610aa7565b5b6000610d5f84828501610d26565b91505092915050565b610d7181610b68565b82525050565b600082825260208201905092915050565b6000610d9382610b81565b610d9d8185610d77565b9350610dad818560208601610b9d565b610db681610bd0565b840191505092915050565b6000604082019050610dd66000830185610d68565b8181036020830152610de88184610d88565b90509392505050565b610dfa81610ad1565b82525050565b6000602082019050610e156000830184610df1565b92915050565b60008060408385031215610e3257610e31610aa7565b5b6000610e4085828601610afa565b9250506020610e5185828601610d26565b9150509250929050565b6000602082019050610e706000830184610d68565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610e9b57610e9a610e76565b5b8235905067ffffffffffffffff811115610eb857610eb7610e7b565b5b602083019150836001820283011115610ed457610ed3610e80565b5b9250929050565b600080600060408486031215610ef457610ef3610aa7565b5b6000610f0286828701610afa565b935050602084013567ffffffffffffffff811115610f2357610f22610aac565b5b610f2f86828701610e85565b92509250509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610fe057607f821691505b602082108103610ff357610ff2610f99565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061103382610b68565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361106557611064610ff9565b5b600182019050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006110a6602083610d77565b91506110b182611070565b602082019050919050565b600060208201905081810360008301526110d581611099565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611138602683610d77565b9150611143826110dc565b604082019050919050565b600060208201905081810360008301526111678161112b565b905091905056fea2646970667358221220dcd411d128fc53a01c23fb9e34dbb9587f1cbe78ac32fcc6852a307eadd55a6d64736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c8063779746161161006657806377974616146101215780638da5cb5b14610151578063c0875dfd1461016f578063dab6dbce1461018b578063f2fde38b146101bb57610093565b80630ab300931461009857806331b1b978146100c85780636baef497146100f9578063715018a614610117575b600080fd5b6100b260048036038101906100ad9190610b0f565b6101d7565b6040516100bf9190610ced565b60405180910390f35b6100e260048036038101906100dd9190610d3b565b6103e0565b6040516100f0929190610dc1565b60405180910390f35b61010161048c565b60405161010e9190610e00565b60405180910390f35b61011f6104b2565b005b61013b60048036038101906101369190610e1b565b61053a565b6040516101489190610e5b565b60405180910390f35b61015961056b565b6040516101669190610e00565b60405180910390f35b61018960048036038101906101849190610b0f565b610594565b005b6101a560048036038101906101a09190610edb565b610654565b6040516101b29190610e5b565b60405180910390f35b6101d560048036038101906101d09190610b0f565b610803565b005b60606000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561026457602002820191906000526020600020905b815481526020019060010190808311610250575b505050505090506000815167ffffffffffffffff81111561028857610287610f3b565b5b6040519080825280602002602001820160405280156102c157816020015b6102ae6109ea565b8152602001906001900390816102a65790505b50905060005b82518110156103d557600460008483815181106102e7576102e6610f6a565b5b602002602001015181526020019081526020016000206040518060400160405290816000820154815260200160018201805461032290610fc8565b80601f016020809104026020016040519081016040528092919081815260200182805461034e90610fc8565b801561039b5780601f106103705761010080835404028352916020019161039b565b820191906000526020600020905b81548152906001019060200180831161037e57829003601f168201915b5050505050815250508282815181106103b7576103b6610f6a565b5b602002602001018190525080806103cd90611028565b9150506102c7565b508092505050919050565b600460205280600052604060002060009150905080600001549080600101805461040990610fc8565b80601f016020809104026020016040519081016040528092919081815260200182805461043590610fc8565b80156104825780601f1061045757610100808354040283529160200191610482565b820191906000526020600020905b81548152906001019060200180831161046557829003601f168201915b5050505050905082565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6104ba610910565b73ffffffffffffffffffffffffffffffffffffffff166104d861056b565b73ffffffffffffffffffffffffffffffffffffffff161461052e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610525906110bc565b60405180910390fd5b6105386000610918565b565b6003602052816000526040600020818154811061055657600080fd5b90600052602060002001600091509150505481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61059c610910565b73ffffffffffffffffffffffffffffffffffffffff166105ba61056b565b73ffffffffffffffffffffffffffffffffffffffff1614610610576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610607906110bc565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610697610910565b73ffffffffffffffffffffffffffffffffffffffff16146106e4576040517f92471d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006106f060026109dc565b90506106fc60026108fa565b604051806040016040528082815260200185858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508152506004600083815260200190815260200160002060008201518160000155602082015181600101908051906020019061078e929190610a04565b50905050600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819080600181540180825580915050600190039060005260206000200160009091909190915055809150509392505050565b61080b610910565b73ffffffffffffffffffffffffffffffffffffffff1661082961056b565b73ffffffffffffffffffffffffffffffffffffffff161461087f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610876906110bc565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036108ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e59061114e565b60405180910390fd5b6108f781610918565b50565b6001816000016000828254019250508190555050565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081600001549050919050565b604051806040016040528060008152602001606081525090565b828054610a1090610fc8565b90600052602060002090601f016020900481019282610a325760008555610a79565b82601f10610a4b57805160ff1916838001178555610a79565b82800160010185558215610a79579182015b82811115610a78578251825591602001919060010190610a5d565b5b509050610a869190610a8a565b5090565b5b80821115610aa3576000816000905550600101610a8b565b5090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610adc82610ab1565b9050919050565b610aec81610ad1565b8114610af757600080fd5b50565b600081359050610b0981610ae3565b92915050565b600060208284031215610b2557610b24610aa7565b5b6000610b3384828501610afa565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b610b7b81610b68565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610bbb578082015181840152602081019050610ba0565b83811115610bca576000848401525b50505050565b6000601f19601f8301169050919050565b6000610bec82610b81565b610bf68185610b8c565b9350610c06818560208601610b9d565b610c0f81610bd0565b840191505092915050565b6000604083016000830151610c326000860182610b72565b5060208301518482036020860152610c4a8282610be1565b9150508091505092915050565b6000610c638383610c1a565b905092915050565b6000602082019050919050565b6000610c8382610b3c565b610c8d8185610b47565b935083602082028501610c9f85610b58565b8060005b85811015610cdb5784840389528151610cbc8582610c57565b9450610cc783610c6b565b925060208a01995050600181019050610ca3565b50829750879550505050505092915050565b60006020820190508181036000830152610d078184610c78565b905092915050565b610d1881610b68565b8114610d2357600080fd5b50565b600081359050610d3581610d0f565b92915050565b600060208284031215610d5157610d50610aa7565b5b6000610d5f84828501610d26565b91505092915050565b610d7181610b68565b82525050565b600082825260208201905092915050565b6000610d9382610b81565b610d9d8185610d77565b9350610dad818560208601610b9d565b610db681610bd0565b840191505092915050565b6000604082019050610dd66000830185610d68565b8181036020830152610de88184610d88565b90509392505050565b610dfa81610ad1565b82525050565b6000602082019050610e156000830184610df1565b92915050565b60008060408385031215610e3257610e31610aa7565b5b6000610e4085828601610afa565b9250506020610e5185828601610d26565b9150509250929050565b6000602082019050610e706000830184610d68565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610e9b57610e9a610e76565b5b8235905067ffffffffffffffff811115610eb857610eb7610e7b565b5b602083019150836001820283011115610ed457610ed3610e80565b5b9250929050565b600080600060408486031215610ef457610ef3610aa7565b5b6000610f0286828701610afa565b935050602084013567ffffffffffffffff811115610f2357610f22610aac565b5b610f2f86828701610e85565b92509250509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610fe057607f821691505b602082108103610ff357610ff2610f99565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061103382610b68565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361106557611064610ff9565b5b600182019050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006110a6602083610d77565b91506110b182611070565b602082019050919050565b600060208201905081810360008301526110d581611099565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611138602683610d77565b9150611143826110dc565b604082019050919050565b600060208201905081810360008301526111678161112b565b905091905056fea2646970667358221220dcd411d128fc53a01c23fb9e34dbb9587f1cbe78ac32fcc6852a307eadd55a6d64736f6c634300080d0033",
  "devdoc": {
    "custom:security-contact": "contracts@metricsdao.xyz",
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setQuestionApi(address)": {
        "params": {
          "_newApi": "The new address of the question API."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "setQuestionApi(address)": {
        "notice": "Sets the address of the question API."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "src/contracts/Protocol/BountyQuestion.sol:BountyQuestion",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3351,
        "contract": "src/contracts/Protocol/BountyQuestion.sol:BountyQuestion",
        "label": "questionApi",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1700,
        "contract": "src/contracts/Protocol/BountyQuestion.sol:BountyQuestion",
        "label": "_questionIdCounter",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(Counter)1461_storage"
      },
      {
        "astId": 1705,
        "contract": "src/contracts/Protocol/BountyQuestion.sol:BountyQuestion",
        "label": "authors",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 1710,
        "contract": "src/contracts/Protocol/BountyQuestion.sol:BountyQuestion",
        "label": "questions",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(QuestionData)1822_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_struct(QuestionData)1822_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BountyQuestion.QuestionData)",
        "numberOfBytes": "32",
        "value": "t_struct(QuestionData)1822_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)1461_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 1460,
            "contract": "src/contracts/Protocol/BountyQuestion.sol:BountyQuestion",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(QuestionData)1822_storage": {
        "encoding": "inplace",
        "label": "struct BountyQuestion.QuestionData",
        "members": [
          {
            "astId": 1819,
            "contract": "src/contracts/Protocol/BountyQuestion.sol:BountyQuestion",
            "label": "tokenId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1821,
            "contract": "src/contracts/Protocol/BountyQuestion.sol:BountyQuestion",
            "label": "url",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}