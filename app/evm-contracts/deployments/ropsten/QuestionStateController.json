{
  "address": "0x034836e10E4AF328d30f223DB31dD689f1bb5d89",
  "abi": [
    {
      "inputs": [],
      "name": "HasAlreadyVotedForQuestion",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "HasNotVotedForQuestion",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidStateTransition",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotTheApi",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "enum IQuestionStateController.STATE",
          "name": "currentState",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "currentQuestionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        }
      ],
      "name": "getQuestionsByState",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "url",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "totalVotes",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "questionId",
              "type": "uint256"
            },
            {
              "internalType": "enum IQuestionStateController.STATE",
              "name": "questionState",
              "type": "uint8"
            }
          ],
          "internalType": "struct QuestionStateController.QuestionData[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "quesitonId",
          "type": "uint256"
        }
      ],
      "name": "getState",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "currentState",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        }
      ],
      "name": "getTotalVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        }
      ],
      "name": "getVotes",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "voter",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct QuestionStateController.Vote[]",
          "name": "_votes",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "hasVoted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "initializeQuestion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        }
      ],
      "name": "publish",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "questionApi",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "questionByState",
      "outputs": [
        {
          "internalType": "string",
          "name": "url",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "totalVotes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        },
        {
          "internalType": "enum IQuestionStateController.STATE",
          "name": "questionState",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "questionIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        }
      ],
      "name": "setDisqualifiedState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newApi",
          "type": "address"
        }
      ],
      "name": "setQuestionApi",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "state",
      "outputs": [
        {
          "internalType": "enum IQuestionStateController.STATE",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        }
      ],
      "name": "unvoteFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "voteFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "votes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalVoteCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x273a7491b137c29671d90d474bd18f22e04f8b7675e8b640593eb4fb6689c871",
  "receipt": {
    "to": null,
    "from": "0x2d11F99f9884e257A1c9ACcc8A4Bea16FC6dA7AA",
    "contractAddress": "0x034836e10E4AF328d30f223DB31dD689f1bb5d89",
    "transactionIndex": 9,
    "gasUsed": "1954058",
    "logsBloom": "0x
    "blockHash": "0x0e76b9558cc7ff9ca1ed3b338cd6cafc5c8bc14fe7fe218ffad9fdce3420ad7b",
    "transactionHash": "0x273a7491b137c29671d90d474bd18f22e04f8b7675e8b640593eb4fb6689c871",
    "logs": [
      {
        "transactionIndex": 9,
        "blockNumber": 12716265,
        "transactionHash": "0x273a7491b137c29671d90d474bd18f22e04f8b7675e8b640593eb4fb6689c871",
        "address": "0x034836e10E4AF328d30f223DB31dD689f1bb5d89",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002d11f99f9884e257a1c9accc8a4bea16fc6da7aa"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x0e76b9558cc7ff9ca1ed3b338cd6cafc5c8bc14fe7fe218ffad9fdce3420ad7b"
      }
    ],
    "blockNumber": 12716265,
    "cumulativeGasUsed": "2577768",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "6f36acf124c5a645efd286abe6af4794",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"HasAlreadyVotedForQuestion\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HasNotVotedForQuestion\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStateTransition\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotTheApi\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"enum IQuestionStateController.STATE\",\"name\":\"currentState\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"currentQuestionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"getQuestionsByState\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"},{\"internalType\":\"enum IQuestionStateController.STATE\",\"name\":\"questionState\",\"type\":\"uint8\"}],\"internalType\":\"struct QuestionStateController.QuestionData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quesitonId\",\"type\":\"uint256\"}],\"name\":\"getState\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentState\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"}],\"name\":\"getTotalVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"}],\"name\":\"getVotes\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct QuestionStateController.Vote[]\",\"name\":\"_votes\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hasVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"initializeQuestion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"}],\"name\":\"publish\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"questionApi\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"questionByState\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"},{\"internalType\":\"enum IQuestionStateController.STATE\",\"name\":\"questionState\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"questionIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"}],\"name\":\"setDisqualifiedState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newApi\",\"type\":\"address\"}],\"name\":\"setQuestionApi\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum IQuestionStateController.STATE\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"}],\"name\":\"unvoteFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"voteFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"votes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalVoteCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"initializeQuestion(uint256,string)\":{\"params\":{\"questionId\":\"The id of the question\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setQuestionApi(address)\":{\"params\":{\"_newApi\":\"The new address of the question API.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"initializeQuestion(uint256,string)\":{\"notice\":\"Initializes a question to draft.\"},\"setQuestionApi(address)\":{\"notice\":\"Sets the address of the question API.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/Protocol/QuestionStateController.sol\":\"QuestionStateController\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"src/contracts/Protocol/QuestionStateController.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IQuestionStateController.sol\\\";\\nimport \\\"./modifiers/OnlyAPI.sol\\\";\\n\\ncontract QuestionStateController is IQuestionStateController, Ownable, OnlyApi {\\n    mapping(uint256 => QuestionVote) public votes;\\n    mapping(uint256 => STATE) public state;\\n\\n    // Mapping for all questions that are upvoted by the user?\\n    mapping(address => mapping(uint256 => bool)) public hasVoted;\\n    mapping(address => mapping(uint256 => uint256)) public questionIndex;\\n\\n    mapping(uint256 => QuestionData) public questionByState;\\n\\n    //TODO mapping     mapping(STATE => uint256[]) public questionState;\\n\\n    // TODO do we want user to lose their metric if a question is closed? they voted on somethjing bad\\n\\n    /**\\n     * @notice Initializes a question to draft.\\n     * @param questionId The id of the question\\n     */\\n    function initializeQuestion(uint256 questionId, string calldata uri) public onlyApi {\\n        state[questionId] = STATE.VOTING;\\n        QuestionData memory _question = QuestionData({url: uri, totalVotes: 0, questionId: questionId, questionState: STATE.VOTING});\\n        questionByState[questionId] = _question;\\n    }\\n\\n    function publish(uint256 questionId) public onlyApi onlyState(STATE.VOTING, questionId) {\\n        // if some voting barrier is passed, we can publish the question\\n        state[questionId] = STATE.PUBLISHED;\\n    }\\n\\n    function voteFor(\\n        address _user,\\n        uint256 questionId,\\n        uint256 amount\\n    ) public onlyApi onlyState(STATE.VOTING, questionId) {\\n        // Checks\\n        // TODO check if creator can upvote their own ?\\n        // TODO limit the max amount of token they can use?\\n        if (hasVoted[_user][questionId]) revert HasAlreadyVotedForQuestion();\\n\\n        // Effects\\n        Vote memory _vote = Vote({voter: _user, amount: amount});\\n        votes[questionId].votes.push(_vote);\\n\\n        hasVoted[_user][questionId] = true;\\n        questionIndex[_user][questionId] = votes[questionId].votes.length - 1;\\n\\n        votes[questionId].totalVoteCount += amount; // TODO Lock tokens for voting include safeTransferFrom\\n\\n        QuestionData storage question = questionByState[questionId];\\n        question.totalVotes += amount;\\n        // Interactions\\n    }\\n\\n    function unvoteFor(address _user, uint256 questionId) public onlyApi onlyState(STATE.VOTING, questionId) {\\n        // Checks\\n        if (!hasVoted[_user][questionId]) revert HasNotVotedForQuestion();\\n\\n        // Effects\\n        uint256 index = questionIndex[_user][questionId];\\n        uint256 amount = votes[questionId].votes[index].amount;\\n\\n        votes[questionId].votes[index].amount = 0;\\n        votes[questionId].totalVoteCount -= amount; // TODO Unlock tokens for voting\\n        // Interactions\\n    }\\n\\n    function setDisqualifiedState(uint256 questionId) public onlyApi {\\n        state[questionId] = STATE.DISQUALIFIED;\\n        QuestionData storage question = questionByState[questionId];\\n        question.questionState = STATE.DISQUALIFIED;\\n    }\\n\\n    // TODO batch voting and batch operations and look into arrays as parameters security risk\\n\\n    //------------------------------------------------------ View Functions\\n\\n    function getState(uint256 quesitonId) public view returns (uint256 currentState) {\\n        return uint256(state[quesitonId]);\\n    }\\n\\n    function getVotes(uint256 questionId) public view returns (Vote[] memory _votes) {\\n        return votes[questionId].votes;\\n    }\\n\\n    function getTotalVotes(uint256 questionId) public view returns (uint256) {\\n        return votes[questionId].totalVoteCount;\\n    }\\n\\n    function getQuestionsByState(\\n        STATE currentState,\\n        uint256 currentQuestionId,\\n        uint256 offset\\n    ) public view returns (QuestionData[] memory) {\\n        uint256 j = 0;\\n        uint256 limit;\\n        uint256 sizeOfArray;\\n        if (currentQuestionId > offset) {\\n            limit = currentQuestionId - offset;\\n            sizeOfArray = (currentQuestionId - offset) + 1;\\n        } else {\\n            limit = 1;\\n            sizeOfArray = currentQuestionId;\\n        }\\n        QuestionData[] memory arr = new QuestionData[](sizeOfArray);\\n        for (uint256 i = currentQuestionId; i >= limit; i--) {\\n            if (questionByState[i].questionState == currentState) {\\n                arr[j] = questionByState[i];\\n                j++;\\n            }\\n        }\\n        return arr;\\n    }\\n\\n    //------------------------------------------------------ Errors\\n    error HasNotVotedForQuestion();\\n    error HasAlreadyVotedForQuestion();\\n    error InvalidStateTransition();\\n\\n    //------------------------------------------------------ Structs\\n    modifier onlyState(STATE required, uint256 questionId) {\\n        if (required != state[questionId]) revert InvalidStateTransition();\\n        _;\\n    }\\n\\n    struct QuestionVote {\\n        Vote[] votes;\\n        uint256 totalVoteCount;\\n    }\\n\\n    struct Vote {\\n        address voter;\\n        uint256 amount;\\n    }\\n\\n    struct QuestionData {\\n        string url;\\n        uint256 totalVotes;\\n        uint256 questionId;\\n        STATE questionState;\\n    }\\n}\\n\",\"keccak256\":\"0xa05c53d397dcadb9218e3264de2ecc64d1d67b76d340085cff654bb5854fd2ec\",\"license\":\"MIT\"},\"src/contracts/Protocol/interfaces/IQuestionStateController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IQuestionStateController {\\n    function initializeQuestion(uint256 questionId, string calldata uri) external;\\n\\n    function voteFor(\\n        address _user,\\n        uint256 questionId,\\n        uint256 amount\\n    ) external;\\n\\n    function unvoteFor(address _user, uint256 questionId) external;\\n\\n    function publish(uint256 questionId) external;\\n\\n    // TODO currentState can probably be like a uint8, it depends on how many states we have\\n    function getState(uint256 quesitonId) external view returns (uint256 currentState);\\n\\n    function setDisqualifiedState(uint256 questionId) external;\\n\\n    enum STATE {\\n        // TODO this where it becomes a challenge, can be claimed and answered\\n        UNINIT,\\n        VOTING,\\n        PUBLISHED, // TODO this where it becomes a challenge, can be claimed and answered\\n        DISQUALIFIED,\\n        COMPLETED\\n    }\\n}\\n\",\"keccak256\":\"0xcd6e4eae47b170aeab62607ad776ff3836ec5df72f7dc62e3986fde202b39adf\",\"license\":\"MIT\"},\"src/contracts/Protocol/modifiers/OnlyAPI.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract OnlyApi is Ownable {\\n    address public questionApi;\\n\\n    // ------------------------------- Setter\\n    /**\\n     * @notice Sets the address of the question API.\\n     * @param _newApi The new address of the question API.\\n     */\\n    function setQuestionApi(address _newApi) external onlyOwner {\\n        questionApi = _newApi;\\n    }\\n\\n    // ------------------------ Modifiers\\n    modifier onlyApi() {\\n        if (_msgSender() != questionApi) revert NotTheApi();\\n        _;\\n    }\\n\\n    // ------------------------ Errors\\n    error NotTheApi();\\n}\\n\",\"keccak256\":\"0x0681de2966fa03720603c0e7361f8ee5d887b9526d074ba9c14dbf3b80978934\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061002d61002261003260201b60201c565b61003a60201b60201c565b6100fe565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b612207806200010e6000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c80638da5cb5b116100ad578063d68993e511610071578063d68993e51461032f578063e78daa751461035f578063ecf24b311461037b578063f2fde38b14610397578063ff981099146103b357610121565b80638da5cb5b1461028d5780639e0ffcd5146102ab578063c0875dfd146102db578063cc4ef119146102f7578063d257d16d1461031357610121565b806344c9af28116100f457806344c9af28146101e95780635df81330146102195780636baef49714610249578063715018a6146102675780637644bd8f1461027157610121565b80631ac28400146101265780632ce35e11146101595780633e4f49e61461018957806342545825146101b9575b600080fd5b610140600480360381019061013b91906117a4565b6103e3565b60405161015094939291906118f0565b60405180910390f35b610173600480360381019061016e91906117a4565b6104a8565b604051610180919061193c565b60405180910390f35b6101a3600480360381019061019e91906117a4565b6104c8565b6040516101b09190611957565b60405180910390f35b6101d360048036038101906101ce91906119d0565b6104e8565b6040516101e09190611a2b565b60405180910390f35b61020360048036038101906101fe91906117a4565b610517565b604051610210919061193c565b60405180910390f35b610233600480360381019061022e91906117a4565b610553565b604051610240919061193c565b60405180910390f35b610251610571565b60405161025e9190611a55565b60405180910390f35b61026f610597565b005b61028b60048036038101906102869190611a70565b61061f565b005b6102956109cf565b6040516102a29190611a55565b60405180910390f35b6102c560048036038101906102c09190611ae8565b6109f8565b6040516102d29190611cc8565b60405180910390f35b6102f560048036038101906102f09190611cea565b610c3c565b005b610311600480360381019061030c91906117a4565b610cfc565b005b61032d60048036038101906103289190611d7c565b610e4b565b005b610349600480360381019061034491906119d0565b611010565b604051610356919061193c565b60405180910390f35b610379600480360381019061037491906119d0565b611035565b005b610395600480360381019061039091906117a4565b6112de565b005b6103b160048036038101906103ac9190611cea565b6113ef565b005b6103cd60048036038101906103c891906117a4565b6114e6565b6040516103da9190611ec9565b60405180910390f35b600660205280600052604060002060009150905080600001805461040690611f1a565b80601f016020809104026020016040519081016040528092919081815260200182805461043290611f1a565b801561047f5780601f106104545761010080835404028352916020019161047f565b820191906000526020600020905b81548152906001019060200180831161046257829003601f168201915b5050505050908060010154908060020154908060030160009054906101000a900460ff16905084565b600060026000838152602001908152602001600020600101549050919050565b60036020528060005260406000206000915054906101000a900460ff1681565b60046020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b60006003600083815260200190815260200160002060009054906101000a900460ff16600481111561054c5761054b611879565b5b9050919050565b60026020528060005260406000206000915090508060010154905081565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61059f6115bb565b73ffffffffffffffffffffffffffffffffffffffff166105bd6109cf565b73ffffffffffffffffffffffffffffffffffffffff1614610613576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a90611f97565b60405180910390fd5b61061d60006115c3565b565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166106606115bb565b73ffffffffffffffffffffffffffffffffffffffff16146106ad576040517f92471d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001826003600082815260200190815260200160002060009054906101000a900460ff1660048111156106e3576106e2611879565b5b8260048111156106f6576106f5611879565b5b1461072d576040517f8f9a780c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002060009054906101000a900460ff16156107c2576040517f285d4e4b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060405180604001604052808773ffffffffffffffffffffffffffffffffffffffff1681526020018581525090506002600086815260200190815260200160002060000181908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015550506001600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600087815260200190815260200160002060006101000a81548160ff021916908315150217905550600160026000878152602001908152602001600020600001805490506109139190611fe6565b600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000878152602001908152602001600020819055508360026000878152602001908152602001600020600101600082825461098d919061201a565b925050819055506000600660008781526020019081526020016000209050848160010160008282546109bf919061201a565b9250508190555050505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606000808084861115610a33578486610a129190611fe6565b915060018587610a229190611fe6565b610a2c919061201a565b9050610a3b565b600191508590505b60008167ffffffffffffffff811115610a5757610a56612070565b5b604051908082528060200260200182016040528015610a9057816020015b610a7d611687565b815260200190600190039081610a755790505b50905060008790505b838110610c2d57886004811115610ab357610ab2611879565b5b6006600083815260200190815260200160002060030160009054906101000a900460ff166004811115610ae957610ae8611879565b5b03610c1a5760066000828152602001908152602001600020604051806080016040529081600082018054610b1c90611f1a565b80601f0160208091040260200160405190810160405280929190818152602001828054610b4890611f1a565b8015610b955780601f10610b6a57610100808354040283529160200191610b95565b820191906000526020600020905b815481529060010190602001808311610b7857829003601f168201915b5050505050815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff166004811115610bd757610bd6611879565b5b6004811115610be957610be8611879565b5b81525050828681518110610c0057610bff61209f565b5b60200260200101819052508480610c16906120ce565b9550505b8080610c2590612116565b915050610a99565b50809450505050509392505050565b610c446115bb565b73ffffffffffffffffffffffffffffffffffffffff16610c626109cf565b73ffffffffffffffffffffffffffffffffffffffff1614610cb8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610caf90611f97565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610d3d6115bb565b73ffffffffffffffffffffffffffffffffffffffff1614610d8a576040517f92471d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001816003600082815260200190815260200160002060009054906101000a900460ff166004811115610dc057610dbf611879565b5b826004811115610dd357610dd2611879565b5b14610e0a576040517f8f9a780c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60026003600085815260200190815260200160002060006101000a81548160ff02191690836004811115610e4157610e40611879565b5b0217905550505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610e8c6115bb565b73ffffffffffffffffffffffffffffffffffffffff1614610ed9576040517f92471d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60016003600085815260200190815260200160002060006101000a81548160ff02191690836004811115610f1057610f0f611879565b5b02179055506000604051806080016040528084848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020016000815260200185815260200160016004811115610f8d57610f8c611879565b5b815250905080600660008681526020019081526020016000206000820151816000019080519060200190610fc29291906116c1565b50602082015181600101556040820151816002015560608201518160030160006101000a81548160ff0219169083600481111561100257611001611879565b5b021790555090505050505050565b6005602052816000526040600020602052806000526040600020600091509150505481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166110766115bb565b73ffffffffffffffffffffffffffffffffffffffff16146110c3576040517f92471d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001816003600082815260200190815260200160002060009054906101000a900460ff1660048111156110f9576110f8611879565b5b82600481111561110c5761110b611879565b5b14611143576040517f8f9a780c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060009054906101000a900460ff166111d7576040517f4c0e0faf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002054905060006002600086815260200190815260200160002060000182815481106112565761125561209f565b5b906000526020600020906002020160010154905060006002600087815260200190815260200160002060000183815481106112945761129361209f565b5b906000526020600020906002020160010181905550806002600087815260200190815260200160002060010160008282546112cf9190611fe6565b92505081905550505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661131f6115bb565b73ffffffffffffffffffffffffffffffffffffffff161461136c576040517f92471d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600380600083815260200190815260200160002060006101000a81548160ff021916908360048111156113a2576113a1611879565b5b0217905550600060066000838152602001908152602001600020905060038160030160006101000a81548160ff021916908360048111156113e6576113e5611879565b5b02179055505050565b6113f76115bb565b73ffffffffffffffffffffffffffffffffffffffff166114156109cf565b73ffffffffffffffffffffffffffffffffffffffff161461146b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161146290611f97565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036114da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114d1906121b1565b60405180910390fd5b6114e3816115c3565b50565b606060026000838152602001908152602001600020600001805480602002602001604051908101604052809291908181526020016000905b828210156115b057838290600052602060002090600202016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815250508152602001906001019061151e565b505050509050919050565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6040518060800160405280606081526020016000815260200160008152602001600060048111156116bb576116ba611879565b5b81525090565b8280546116cd90611f1a565b90600052602060002090601f0160209004810192826116ef5760008555611736565b82601f1061170857805160ff1916838001178555611736565b82800160010185558215611736579182015b8281111561173557825182559160200191906001019061171a565b5b5090506117439190611747565b5090565b5b80821115611760576000816000905550600101611748565b5090565b600080fd5b600080fd5b6000819050919050565b6117818161176e565b811461178c57600080fd5b50565b60008135905061179e81611778565b92915050565b6000602082840312156117ba576117b9611764565b5b60006117c88482850161178f565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561180b5780820151818401526020810190506117f0565b8381111561181a576000848401525b50505050565b6000601f19601f8301169050919050565b600061183c826117d1565b61184681856117dc565b93506118568185602086016117ed565b61185f81611820565b840191505092915050565b6118738161176e565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600581106118b9576118b8611879565b5b50565b60008190506118ca826118a8565b919050565b60006118da826118bc565b9050919050565b6118ea816118cf565b82525050565b6000608082019050818103600083015261190a8187611831565b9050611919602083018661186a565b611926604083018561186a565b61193360608301846118e1565b95945050505050565b6000602082019050611951600083018461186a565b92915050565b600060208201905061196c60008301846118e1565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061199d82611972565b9050919050565b6119ad81611992565b81146119b857600080fd5b50565b6000813590506119ca816119a4565b92915050565b600080604083850312156119e7576119e6611764565b5b60006119f5858286016119bb565b9250506020611a068582860161178f565b9150509250929050565b60008115159050919050565b611a2581611a10565b82525050565b6000602082019050611a406000830184611a1c565b92915050565b611a4f81611992565b82525050565b6000602082019050611a6a6000830184611a46565b92915050565b600080600060608486031215611a8957611a88611764565b5b6000611a97868287016119bb565b9350506020611aa88682870161178f565b9250506040611ab98682870161178f565b9150509250925092565b60058110611ad057600080fd5b50565b600081359050611ae281611ac3565b92915050565b600080600060608486031215611b0157611b00611764565b5b6000611b0f86828701611ad3565b9350506020611b208682870161178f565b9250506040611b318682870161178f565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b6000611b83826117d1565b611b8d8185611b67565b9350611b9d8185602086016117ed565b611ba681611820565b840191505092915050565b611bba8161176e565b82525050565b611bc9816118cf565b82525050565b60006080830160008301518482036000860152611bec8282611b78565b9150506020830151611c016020860182611bb1565b506040830151611c146040860182611bb1565b506060830151611c276060860182611bc0565b508091505092915050565b6000611c3e8383611bcf565b905092915050565b6000602082019050919050565b6000611c5e82611b3b565b611c688185611b46565b935083602082028501611c7a85611b57565b8060005b85811015611cb65784840389528151611c978582611c32565b9450611ca283611c46565b925060208a01995050600181019050611c7e565b50829750879550505050505092915050565b60006020820190508181036000830152611ce28184611c53565b905092915050565b600060208284031215611d0057611cff611764565b5b6000611d0e848285016119bb565b91505092915050565b600080fd5b600080fd5b600080fd5b60008083601f840112611d3c57611d3b611d17565b5b8235905067ffffffffffffffff811115611d5957611d58611d1c565b5b602083019150836001820283011115611d7557611d74611d21565b5b9250929050565b600080600060408486031215611d9557611d94611764565b5b6000611da38682870161178f565b935050602084013567ffffffffffffffff811115611dc457611dc3611769565b5b611dd086828701611d26565b92509250509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611e1181611992565b82525050565b604082016000820151611e2d6000850182611e08565b506020820151611e406020850182611bb1565b50505050565b6000611e528383611e17565b60408301905092915050565b6000602082019050919050565b6000611e7682611ddc565b611e808185611de7565b9350611e8b83611df8565b8060005b83811015611ebc578151611ea38882611e46565b9750611eae83611e5e565b925050600181019050611e8f565b5085935050505092915050565b60006020820190508181036000830152611ee38184611e6b565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611f3257607f821691505b602082108103611f4557611f44611eeb565b5b50919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611f816020836117dc565b9150611f8c82611f4b565b602082019050919050565b60006020820190508181036000830152611fb081611f74565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611ff18261176e565b9150611ffc8361176e565b92508282101561200f5761200e611fb7565b5b828203905092915050565b60006120258261176e565b91506120308361176e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561206557612064611fb7565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006120d98261176e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361210b5761210a611fb7565b5b600182019050919050565b60006121218261176e565b91506000820361213457612133611fb7565b5b600182039050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061219b6026836117dc565b91506121a68261213f565b604082019050919050565b600060208201905081810360008301526121ca8161218e565b905091905056fea2646970667358221220c94ae01f98abd457a4fb583fdebd31f5baa43f4e806786da4257dbe46848c49764736f6c634300080d0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "initializeQuestion(uint256,string)": {
        "params": {
          "questionId": "The id of the question"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setQuestionApi(address)": {
        "params": {
          "_newApi": "The new address of the question API."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "initializeQuestion(uint256,string)": {
        "notice": "Initializes a question to draft."
      },
      "setQuestionApi(address)": {
        "notice": "Sets the address of the question API."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "src/contracts/Protocol/QuestionStateController.sol:QuestionStateController",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3351,
        "contract": "src/contracts/Protocol/QuestionStateController.sol:QuestionStateController",
        "label": "questionApi",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2341,
        "contract": "src/contracts/Protocol/QuestionStateController.sol:QuestionStateController",
        "label": "votes",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(QuestionVote)2764_storage)"
      },
      {
        "astId": 2346,
        "contract": "src/contracts/Protocol/QuestionStateController.sol:QuestionStateController",
        "label": "state",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_enum(STATE)3278)"
      },
      {
        "astId": 2352,
        "contract": "src/contracts/Protocol/QuestionStateController.sol:QuestionStateController",
        "label": "hasVoted",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 2358,
        "contract": "src/contracts/Protocol/QuestionStateController.sol:QuestionStateController",
        "label": "questionIndex",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 2363,
        "contract": "src/contracts/Protocol/QuestionStateController.sol:QuestionStateController",
        "label": "questionByState",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(QuestionData)2779_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Vote)2769_storage)dyn_storage": {
        "base": "t_struct(Vote)2769_storage",
        "encoding": "dynamic_array",
        "label": "struct QuestionStateController.Vote[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(STATE)3278": {
        "encoding": "inplace",
        "label": "enum IQuestionStateController.STATE",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_enum(STATE)3278)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => enum IQuestionStateController.STATE)",
        "numberOfBytes": "32",
        "value": "t_enum(STATE)3278"
      },
      "t_mapping(t_uint256,t_struct(QuestionData)2779_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct QuestionStateController.QuestionData)",
        "numberOfBytes": "32",
        "value": "t_struct(QuestionData)2779_storage"
      },
      "t_mapping(t_uint256,t_struct(QuestionVote)2764_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct QuestionStateController.QuestionVote)",
        "numberOfBytes": "32",
        "value": "t_struct(QuestionVote)2764_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(QuestionData)2779_storage": {
        "encoding": "inplace",
        "label": "struct QuestionStateController.QuestionData",
        "members": [
          {
            "astId": 2771,
            "contract": "src/contracts/Protocol/QuestionStateController.sol:QuestionStateController",
            "label": "url",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 2773,
            "contract": "src/contracts/Protocol/QuestionStateController.sol:QuestionStateController",
            "label": "totalVotes",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2775,
            "contract": "src/contracts/Protocol/QuestionStateController.sol:QuestionStateController",
            "label": "questionId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2778,
            "contract": "src/contracts/Protocol/QuestionStateController.sol:QuestionStateController",
            "label": "questionState",
            "offset": 0,
            "slot": "3",
            "type": "t_enum(STATE)3278"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(QuestionVote)2764_storage": {
        "encoding": "inplace",
        "label": "struct QuestionStateController.QuestionVote",
        "members": [
          {
            "astId": 2761,
            "contract": "src/contracts/Protocol/QuestionStateController.sol:QuestionStateController",
            "label": "votes",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_struct(Vote)2769_storage)dyn_storage"
          },
          {
            "astId": 2763,
            "contract": "src/contracts/Protocol/QuestionStateController.sol:QuestionStateController",
            "label": "totalVoteCount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Vote)2769_storage": {
        "encoding": "inplace",
        "label": "struct QuestionStateController.Vote",
        "members": [
          {
            "astId": 2766,
            "contract": "src/contracts/Protocol/QuestionStateController.sol:QuestionStateController",
            "label": "voter",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2768,
            "contract": "src/contracts/Protocol/QuestionStateController.sol:QuestionStateController",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}