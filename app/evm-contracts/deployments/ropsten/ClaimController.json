{
  "address": "0x90EA3EC3deb32DCbCfd87d81E358011185d2998e",
  "abi": [
    {
      "inputs": [],
      "name": "ClaimLimitReached",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NeedClaimToAnswer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotTheApi",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "answerURL",
          "type": "string"
        }
      ],
      "name": "answer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "answers",
      "outputs": [
        {
          "internalType": "enum ClaimController.STATE",
          "name": "state",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "answerURL",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "finalGrade",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "scoringMetaDataURI",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "claimLimits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "claims",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        }
      ],
      "name": "getClaimLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        }
      ],
      "name": "getClaims",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_claims",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimLimit",
          "type": "uint256"
        }
      ],
      "name": "initializeQuestion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "questionApi",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newApi",
          "type": "address"
        }
      ],
      "name": "setQuestionApi",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xfff86995a19c1466d5d6adbd472e71c08739333db932e189168d7edf0ba4397c",
  "receipt": {
    "to": null,
    "from": "0x2d11F99f9884e257A1c9ACcc8A4Bea16FC6dA7AA",
    "contractAddress": "0x90EA3EC3deb32DCbCfd87d81E358011185d2998e",
    "transactionIndex": 11,
    "gasUsed": "1264464",
    "logsBloom": "0x
    "blockHash": "0x314f0ab60e916744018435f798fee023d03d6cbd7b3ef79308614cb684d010b4",
    "transactionHash": "0xfff86995a19c1466d5d6adbd472e71c08739333db932e189168d7edf0ba4397c",
    "logs": [
      {
        "transactionIndex": 11,
        "blockNumber": 12716264,
        "transactionHash": "0xfff86995a19c1466d5d6adbd472e71c08739333db932e189168d7edf0ba4397c",
        "address": "0x90EA3EC3deb32DCbCfd87d81E358011185d2998e",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002d11f99f9884e257a1c9accc8a4bea16fc6da7aa"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x314f0ab60e916744018435f798fee023d03d6cbd7b3ef79308614cb684d010b4"
      }
    ],
    "blockNumber": 12716264,
    "cumulativeGasUsed": "1948904",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "6f36acf124c5a645efd286abe6af4794",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ClaimLimitReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NeedClaimToAnswer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotTheApi\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"answerURL\",\"type\":\"string\"}],\"name\":\"answer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"answers\",\"outputs\":[{\"internalType\":\"enum ClaimController.STATE\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"answerURL\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"finalGrade\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"scoringMetaDataURI\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimLimits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claims\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"}],\"name\":\"getClaimLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"}],\"name\":\"getClaims\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_claims\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimLimit\",\"type\":\"uint256\"}],\"name\":\"initializeQuestion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"questionApi\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newApi\",\"type\":\"address\"}],\"name\":\"setQuestionApi\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"initializeQuestion(uint256,uint256)\":{\"params\":{\"claimLimit\":\"The limit for the amount of people that can claim the question\",\"questionId\":\"The id of the question\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setQuestionApi(address)\":{\"params\":{\"_newApi\":\"The new address of the question API.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"initializeQuestion(uint256,uint256)\":{\"notice\":\"Initializes a question to receive claims\"},\"setQuestionApi(address)\":{\"notice\":\"Sets the address of the question API.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/Protocol/ClaimController.sol\":\"ClaimController\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"src/contracts/Protocol/ClaimController.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IClaimController.sol\\\";\\nimport \\\"./modifiers/OnlyAPI.sol\\\";\\n\\ncontract ClaimController is Ownable, IClaimController, OnlyApi {\\n    mapping(uint256 => uint256) public claimLimits;\\n    mapping(uint256 => mapping(address => Answer)) public answers;\\n    mapping(uint256 => address[]) public claims;\\n\\n    /**\\n     * @notice Initializes a question to receive claims\\n     * @param questionId The id of the question\\n     * @param claimLimit The limit for the amount of people that can claim the question\\n     */\\n    function initializeQuestion(uint256 questionId, uint256 claimLimit) public onlyApi {\\n        claimLimits[questionId] = claimLimit;\\n    }\\n\\n    function claim(uint256 questionId) public onlyOwner {\\n        if (claims[questionId].length >= claimLimits[questionId]) revert ClaimLimitReached();\\n\\n        claims[questionId].push(_msgSender());\\n        Answer memory _answer = Answer({state: STATE.CLAIMED, author: _msgSender(), answerURL: \\\"\\\", scoringMetaDataURI: \\\"\\\", finalGrade: 0});\\n        answers[questionId][_msgSender()] = _answer;\\n    }\\n\\n    function answer(uint256 questionId, string calldata answerURL) public onlyOwner {\\n        if (answers[questionId][_msgSender()].state != STATE.CLAIMED) revert NeedClaimToAnswer();\\n        answers[questionId][_msgSender()].answerURL = answerURL;\\n    }\\n\\n    //------------------------------------------------------ View Functions\\n\\n    function getClaims(uint256 questionId) public view returns (address[] memory _claims) {\\n        return claims[questionId];\\n    }\\n\\n    function getClaimLimit(uint256 questionId) public view returns (uint256) {\\n        return claimLimits[questionId];\\n    }\\n\\n    //------------------------------------------------------ Errors\\n    error ClaimLimitReached();\\n    error NeedClaimToAnswer();\\n\\n    //------------------------------------------------------ Structs\\n\\n    struct Answer {\\n        STATE state;\\n        address author;\\n        string answerURL;\\n        // uint256 grade; //4 heuristics per question, multiple people review, and then aggregate is calculated\\n        // TODO let's prototype a demo of this\\n        uint256 finalGrade;\\n        string scoringMetaDataURI; // store heuristics and such on ipfs\\n    }\\n\\n    enum STATE {\\n        UNINT,\\n        CLAIMED,\\n        ANSWERED\\n    }\\n}\\n\",\"keccak256\":\"0xf181967f48809450ef326d387a25d0787a67c43a558153ec4795468bc9b319df\",\"license\":\"MIT\"},\"src/contracts/Protocol/interfaces/IClaimController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IClaimController {\\n    function initializeQuestion(uint256 questionId, uint256 claimLimit) external;\\n\\n    function claim(uint256 questionId) external;\\n\\n    function answer(uint256 questionId, string calldata answerURL) external;\\n}\\n\",\"keccak256\":\"0x5e437cc9dcbfbb96ff94a305f33ec87adcd1f752ecfcb8d12f4f3cdb84b22ba5\",\"license\":\"MIT\"},\"src/contracts/Protocol/modifiers/OnlyAPI.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract OnlyApi is Ownable {\\n    address public questionApi;\\n\\n    // ------------------------------- Setter\\n    /**\\n     * @notice Sets the address of the question API.\\n     * @param _newApi The new address of the question API.\\n     */\\n    function setQuestionApi(address _newApi) external onlyOwner {\\n        questionApi = _newApi;\\n    }\\n\\n    // ------------------------ Modifiers\\n    modifier onlyApi() {\\n        if (_msgSender() != questionApi) revert NotTheApi();\\n        _;\\n    }\\n\\n    // ------------------------ Errors\\n    error NotTheApi();\\n}\\n\",\"keccak256\":\"0x0681de2966fa03720603c0e7361f8ee5d887b9526d074ba9c14dbf3b80978934\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061002d61002261003260201b60201c565b61003a60201b60201c565b6100fe565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61157e8061010d6000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80637dfca71c1161008c578063a461272b11610066578063a461272b14610202578063c0875dfd14610232578063f2fde38b1461024e578063f894160e1461026a576100cf565b80637dfca71c14610180578063888af91d146101b45780638da5cb5b146101e4576100cf565b806327cacb55146100d4578063379607f5146100f05780636baef4971461010c5780636e3c4dd71461012a578063701776f71461015a578063715018a614610176575b600080fd5b6100ee60048036038101906100e99190610fad565b61029a565b005b61010a6004803603810190610105919061100d565b61044a565b005b610114610737565b604051610121919061107b565b60405180910390f35b610144600480360381019061013f919061100d565b61075d565b60405161015191906110a5565b60405180910390f35b610174600480360381019061016f91906110c0565b610775565b005b61017e61081f565b005b61019a6004803603810190610195919061112c565b6108a7565b6040516101ab95949392919061127c565b60405180910390f35b6101ce60048036038101906101c9919061100d565b610a27565b6040516101db919061139b565b60405180910390f35b6101ec610ac8565b6040516101f9919061107b565b60405180910390f35b61021c6004803603810190610217919061100d565b610af1565b60405161022991906110a5565b60405180910390f35b61024c600480360381019061024791906113bd565b610b0e565b005b610268600480360381019061026391906113bd565b610bce565b005b610284600480360381019061027f91906110c0565b610cc5565b604051610291919061107b565b60405180910390f35b6102a2610d13565b73ffffffffffffffffffffffffffffffffffffffff166102c0610ac8565b73ffffffffffffffffffffffffffffffffffffffff1614610316576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161030d90611436565b60405180910390fd5b6001600281111561032a5761032961116c565b5b600360008581526020019081526020016000206000610347610d13565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff1660028111156103a4576103a361116c565b5b146103db576040517f54a0346a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81816003600086815260200190815260200160002060006103fa610d13565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001019190610444929190610ddf565b50505050565b610452610d13565b73ffffffffffffffffffffffffffffffffffffffff16610470610ac8565b73ffffffffffffffffffffffffffffffffffffffff16146104c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bd90611436565b60405180910390fd5b6002600082815260200190815260200160002054600460008381526020019081526020016000208054905010610528576040517f9907008b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60046000828152602001908152602001600020610543610d13565b9080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060006040518060a00160405280600160028111156105c4576105c361116c565b5b81526020016105d1610d13565b73ffffffffffffffffffffffffffffffffffffffff168152602001604051806020016040528060008152508152602001600081526020016040518060200160405280600081525081525090508060036000848152602001908152602001600020600061063b610d13565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548160ff021916908360028111156106a05761069f61116c565b5b021790555060208201518160000160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816001019080519060200190610708929190610e65565b5060608201518160020155608082015181600301908051906020019061072f929190610e65565b509050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60026020528060005260406000206000915090505481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166107b6610d13565b73ffffffffffffffffffffffffffffffffffffffff1614610803576040517f92471d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060026000848152602001908152602001600020819055505050565b610827610d13565b73ffffffffffffffffffffffffffffffffffffffff16610845610ac8565b73ffffffffffffffffffffffffffffffffffffffff161461089b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089290611436565b60405180910390fd5b6108a56000610d1b565b565b6003602052816000526040600020602052806000526040600020600091509150508060000160009054906101000a900460ff16908060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600101805461091090611485565b80601f016020809104026020016040519081016040528092919081815260200182805461093c90611485565b80156109895780601f1061095e57610100808354040283529160200191610989565b820191906000526020600020905b81548152906001019060200180831161096c57829003601f168201915b5050505050908060020154908060030180546109a490611485565b80601f01602080910402602001604051908101604052809291908181526020018280546109d090611485565b8015610a1d5780601f106109f257610100808354040283529160200191610a1d565b820191906000526020600020905b815481529060010190602001808311610a0057829003601f168201915b5050505050905085565b606060046000838152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015610abc57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610a72575b50505050509050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600060026000838152602001908152602001600020549050919050565b610b16610d13565b73ffffffffffffffffffffffffffffffffffffffff16610b34610ac8565b73ffffffffffffffffffffffffffffffffffffffff1614610b8a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b8190611436565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610bd6610d13565b73ffffffffffffffffffffffffffffffffffffffff16610bf4610ac8565b73ffffffffffffffffffffffffffffffffffffffff1614610c4a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4190611436565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610cb9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cb090611528565b60405180910390fd5b610cc281610d1b565b50565b60046020528160005260406000208181548110610ce157600080fd5b906000526020600020016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b828054610deb90611485565b90600052602060002090601f016020900481019282610e0d5760008555610e54565b82601f10610e2657803560ff1916838001178555610e54565b82800160010185558215610e54579182015b82811115610e53578235825591602001919060010190610e38565b5b509050610e619190610eeb565b5090565b828054610e7190611485565b90600052602060002090601f016020900481019282610e935760008555610eda565b82601f10610eac57805160ff1916838001178555610eda565b82800160010185558215610eda579182015b82811115610ed9578251825591602001919060010190610ebe565b5b509050610ee79190610eeb565b5090565b5b80821115610f04576000816000905550600101610eec565b5090565b600080fd5b600080fd5b6000819050919050565b610f2581610f12565b8114610f3057600080fd5b50565b600081359050610f4281610f1c565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610f6d57610f6c610f48565b5b8235905067ffffffffffffffff811115610f8a57610f89610f4d565b5b602083019150836001820283011115610fa657610fa5610f52565b5b9250929050565b600080600060408486031215610fc657610fc5610f08565b5b6000610fd486828701610f33565b935050602084013567ffffffffffffffff811115610ff557610ff4610f0d565b5b61100186828701610f57565b92509250509250925092565b60006020828403121561102357611022610f08565b5b600061103184828501610f33565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006110658261103a565b9050919050565b6110758161105a565b82525050565b6000602082019050611090600083018461106c565b92915050565b61109f81610f12565b82525050565b60006020820190506110ba6000830184611096565b92915050565b600080604083850312156110d7576110d6610f08565b5b60006110e585828601610f33565b92505060206110f685828601610f33565b9150509250929050565b6111098161105a565b811461111457600080fd5b50565b60008135905061112681611100565b92915050565b6000806040838503121561114357611142610f08565b5b600061115185828601610f33565b925050602061116285828601611117565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600381106111ac576111ab61116c565b5b50565b60008190506111bd8261119b565b919050565b60006111cd826111af565b9050919050565b6111dd816111c2565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561121d578082015181840152602081019050611202565b8381111561122c576000848401525b50505050565b6000601f19601f8301169050919050565b600061124e826111e3565b61125881856111ee565b93506112688185602086016111ff565b61127181611232565b840191505092915050565b600060a08201905061129160008301886111d4565b61129e602083018761106c565b81810360408301526112b08186611243565b90506112bf6060830185611096565b81810360808301526112d18184611243565b90509695505050505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6113128161105a565b82525050565b60006113248383611309565b60208301905092915050565b6000602082019050919050565b6000611348826112dd565b61135281856112e8565b935061135d836112f9565b8060005b8381101561138e5781516113758882611318565b975061138083611330565b925050600181019050611361565b5085935050505092915050565b600060208201905081810360008301526113b5818461133d565b905092915050565b6000602082840312156113d3576113d2610f08565b5b60006113e184828501611117565b91505092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006114206020836111ee565b915061142b826113ea565b602082019050919050565b6000602082019050818103600083015261144f81611413565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061149d57607f821691505b6020821081036114b0576114af611456565b5b50919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006115126026836111ee565b915061151d826114b6565b604082019050919050565b6000602082019050818103600083015261154181611505565b905091905056fea2646970667358221220b19553e6384fd29569184d82e14bd33e48963fe8155f00418159dd9816aa87b964736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c80637dfca71c1161008c578063a461272b11610066578063a461272b14610202578063c0875dfd14610232578063f2fde38b1461024e578063f894160e1461026a576100cf565b80637dfca71c14610180578063888af91d146101b45780638da5cb5b146101e4576100cf565b806327cacb55146100d4578063379607f5146100f05780636baef4971461010c5780636e3c4dd71461012a578063701776f71461015a578063715018a614610176575b600080fd5b6100ee60048036038101906100e99190610fad565b61029a565b005b61010a6004803603810190610105919061100d565b61044a565b005b610114610737565b604051610121919061107b565b60405180910390f35b610144600480360381019061013f919061100d565b61075d565b60405161015191906110a5565b60405180910390f35b610174600480360381019061016f91906110c0565b610775565b005b61017e61081f565b005b61019a6004803603810190610195919061112c565b6108a7565b6040516101ab95949392919061127c565b60405180910390f35b6101ce60048036038101906101c9919061100d565b610a27565b6040516101db919061139b565b60405180910390f35b6101ec610ac8565b6040516101f9919061107b565b60405180910390f35b61021c6004803603810190610217919061100d565b610af1565b60405161022991906110a5565b60405180910390f35b61024c600480360381019061024791906113bd565b610b0e565b005b610268600480360381019061026391906113bd565b610bce565b005b610284600480360381019061027f91906110c0565b610cc5565b604051610291919061107b565b60405180910390f35b6102a2610d13565b73ffffffffffffffffffffffffffffffffffffffff166102c0610ac8565b73ffffffffffffffffffffffffffffffffffffffff1614610316576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161030d90611436565b60405180910390fd5b6001600281111561032a5761032961116c565b5b600360008581526020019081526020016000206000610347610d13565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff1660028111156103a4576103a361116c565b5b146103db576040517f54a0346a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81816003600086815260200190815260200160002060006103fa610d13565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001019190610444929190610ddf565b50505050565b610452610d13565b73ffffffffffffffffffffffffffffffffffffffff16610470610ac8565b73ffffffffffffffffffffffffffffffffffffffff16146104c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bd90611436565b60405180910390fd5b6002600082815260200190815260200160002054600460008381526020019081526020016000208054905010610528576040517f9907008b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60046000828152602001908152602001600020610543610d13565b9080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060006040518060a00160405280600160028111156105c4576105c361116c565b5b81526020016105d1610d13565b73ffffffffffffffffffffffffffffffffffffffff168152602001604051806020016040528060008152508152602001600081526020016040518060200160405280600081525081525090508060036000848152602001908152602001600020600061063b610d13565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548160ff021916908360028111156106a05761069f61116c565b5b021790555060208201518160000160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816001019080519060200190610708929190610e65565b5060608201518160020155608082015181600301908051906020019061072f929190610e65565b509050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60026020528060005260406000206000915090505481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166107b6610d13565b73ffffffffffffffffffffffffffffffffffffffff1614610803576040517f92471d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060026000848152602001908152602001600020819055505050565b610827610d13565b73ffffffffffffffffffffffffffffffffffffffff16610845610ac8565b73ffffffffffffffffffffffffffffffffffffffff161461089b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089290611436565b60405180910390fd5b6108a56000610d1b565b565b6003602052816000526040600020602052806000526040600020600091509150508060000160009054906101000a900460ff16908060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600101805461091090611485565b80601f016020809104026020016040519081016040528092919081815260200182805461093c90611485565b80156109895780601f1061095e57610100808354040283529160200191610989565b820191906000526020600020905b81548152906001019060200180831161096c57829003601f168201915b5050505050908060020154908060030180546109a490611485565b80601f01602080910402602001604051908101604052809291908181526020018280546109d090611485565b8015610a1d5780601f106109f257610100808354040283529160200191610a1d565b820191906000526020600020905b815481529060010190602001808311610a0057829003601f168201915b5050505050905085565b606060046000838152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015610abc57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610a72575b50505050509050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600060026000838152602001908152602001600020549050919050565b610b16610d13565b73ffffffffffffffffffffffffffffffffffffffff16610b34610ac8565b73ffffffffffffffffffffffffffffffffffffffff1614610b8a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b8190611436565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610bd6610d13565b73ffffffffffffffffffffffffffffffffffffffff16610bf4610ac8565b73ffffffffffffffffffffffffffffffffffffffff1614610c4a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4190611436565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610cb9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cb090611528565b60405180910390fd5b610cc281610d1b565b50565b60046020528160005260406000208181548110610ce157600080fd5b906000526020600020016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b828054610deb90611485565b90600052602060002090601f016020900481019282610e0d5760008555610e54565b82601f10610e2657803560ff1916838001178555610e54565b82800160010185558215610e54579182015b82811115610e53578235825591602001919060010190610e38565b5b509050610e619190610eeb565b5090565b828054610e7190611485565b90600052602060002090601f016020900481019282610e935760008555610eda565b82601f10610eac57805160ff1916838001178555610eda565b82800160010185558215610eda579182015b82811115610ed9578251825591602001919060010190610ebe565b5b509050610ee79190610eeb565b5090565b5b80821115610f04576000816000905550600101610eec565b5090565b600080fd5b600080fd5b6000819050919050565b610f2581610f12565b8114610f3057600080fd5b50565b600081359050610f4281610f1c565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610f6d57610f6c610f48565b5b8235905067ffffffffffffffff811115610f8a57610f89610f4d565b5b602083019150836001820283011115610fa657610fa5610f52565b5b9250929050565b600080600060408486031215610fc657610fc5610f08565b5b6000610fd486828701610f33565b935050602084013567ffffffffffffffff811115610ff557610ff4610f0d565b5b61100186828701610f57565b92509250509250925092565b60006020828403121561102357611022610f08565b5b600061103184828501610f33565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006110658261103a565b9050919050565b6110758161105a565b82525050565b6000602082019050611090600083018461106c565b92915050565b61109f81610f12565b82525050565b60006020820190506110ba6000830184611096565b92915050565b600080604083850312156110d7576110d6610f08565b5b60006110e585828601610f33565b92505060206110f685828601610f33565b9150509250929050565b6111098161105a565b811461111457600080fd5b50565b60008135905061112681611100565b92915050565b6000806040838503121561114357611142610f08565b5b600061115185828601610f33565b925050602061116285828601611117565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600381106111ac576111ab61116c565b5b50565b60008190506111bd8261119b565b919050565b60006111cd826111af565b9050919050565b6111dd816111c2565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561121d578082015181840152602081019050611202565b8381111561122c576000848401525b50505050565b6000601f19601f8301169050919050565b600061124e826111e3565b61125881856111ee565b93506112688185602086016111ff565b61127181611232565b840191505092915050565b600060a08201905061129160008301886111d4565b61129e602083018761106c565b81810360408301526112b08186611243565b90506112bf6060830185611096565b81810360808301526112d18184611243565b90509695505050505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6113128161105a565b82525050565b60006113248383611309565b60208301905092915050565b6000602082019050919050565b6000611348826112dd565b61135281856112e8565b935061135d836112f9565b8060005b8381101561138e5781516113758882611318565b975061138083611330565b925050600181019050611361565b5085935050505092915050565b600060208201905081810360008301526113b5818461133d565b905092915050565b6000602082840312156113d3576113d2610f08565b5b60006113e184828501611117565b91505092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006114206020836111ee565b915061142b826113ea565b602082019050919050565b6000602082019050818103600083015261144f81611413565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061149d57607f821691505b6020821081036114b0576114af611456565b5b50919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006115126026836111ee565b915061151d826114b6565b604082019050919050565b6000602082019050818103600083015261154181611505565b905091905056fea2646970667358221220b19553e6384fd29569184d82e14bd33e48963fe8155f00418159dd9816aa87b964736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "initializeQuestion(uint256,uint256)": {
        "params": {
          "claimLimit": "The limit for the amount of people that can claim the question",
          "questionId": "The id of the question"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setQuestionApi(address)": {
        "params": {
          "_newApi": "The new address of the question API."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "initializeQuestion(uint256,uint256)": {
        "notice": "Initializes a question to receive claims"
      },
      "setQuestionApi(address)": {
        "notice": "Sets the address of the question API."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "src/contracts/Protocol/ClaimController.sol:ClaimController",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3351,
        "contract": "src/contracts/Protocol/ClaimController.sol:ClaimController",
        "label": "questionApi",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1838,
        "contract": "src/contracts/Protocol/ClaimController.sol:ClaimController",
        "label": "claimLimits",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1845,
        "contract": "src/contracts/Protocol/ClaimController.sol:ClaimController",
        "label": "answers",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(Answer)1992_storage))"
      },
      {
        "astId": 1850,
        "contract": "src/contracts/Protocol/ClaimController.sol:ClaimController",
        "label": "claims",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_array(t_address)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_enum(STATE)1996": {
        "encoding": "inplace",
        "label": "enum ClaimController.STATE",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(Answer)1992_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ClaimController.Answer)",
        "numberOfBytes": "32",
        "value": "t_struct(Answer)1992_storage"
      },
      "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(Answer)1992_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct ClaimController.Answer))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(Answer)1992_storage)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Answer)1992_storage": {
        "encoding": "inplace",
        "label": "struct ClaimController.Answer",
        "members": [
          {
            "astId": 1983,
            "contract": "src/contracts/Protocol/ClaimController.sol:ClaimController",
            "label": "state",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(STATE)1996"
          },
          {
            "astId": 1985,
            "contract": "src/contracts/Protocol/ClaimController.sol:ClaimController",
            "label": "author",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1987,
            "contract": "src/contracts/Protocol/ClaimController.sol:ClaimController",
            "label": "answerURL",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1989,
            "contract": "src/contracts/Protocol/ClaimController.sol:ClaimController",
            "label": "finalGrade",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1991,
            "contract": "src/contracts/Protocol/ClaimController.sol:ClaimController",
            "label": "scoringMetaDataURI",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}