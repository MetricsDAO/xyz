{
  "address": "0xc5cdA017795314100Bb1118c38078FF8Dca8aFeb",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "metricTokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CannotRenounce",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CannotStakeNoMetric",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DuplicateAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidShareAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoClaimableRewardsToWithdraw",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoMetricToWithdraw",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RewardsAlreadyToggled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RewardsAreNotActive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RewardsNotActive",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "harvester",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "shares",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lifetimeEarnings",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimable",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct StakingChef.Staker",
          "name": "",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "harvester",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "agIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Harvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "withdrawer",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "shares",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lifetimeEarnings",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimable",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct StakingChef.Staker",
          "name": "",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "UnStake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "withdrawer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "agIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ACC_METRIC_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "accumulatedWithPrecision",
          "type": "uint256"
        }
      ],
      "name": "accumulatedMetricDividedByShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressExistence",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "areRewardsActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastRewardBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLifeTimeShareValueEstimate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMetricPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMetricToken",
      "outputs": [
        {
          "internalType": "contract MetricToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStake",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "shares",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lifetimeEarnings",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimable",
              "type": "uint256"
            }
          ],
          "internalType": "struct StakingChef.Staker",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalAllocationShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setLifetimeShareValue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "metricAmount",
          "type": "uint256"
        }
      ],
      "name": "setMetricPerBlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "metricTokenAddress",
          "type": "address"
        }
      ],
      "name": "setMetricToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "metricAmount",
          "type": "uint256"
        }
      ],
      "name": "stakeMetric",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "staker",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lifetimeEarnings",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimable",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "isOn",
          "type": "bool"
        }
      ],
      "name": "toggleRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unStakeMetric",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateAccumulatedStakingRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "viewPendingClaims",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "viewPendingHarvest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2b4c1199bfb3dcc85048d80980f50546d6204ea3a0d71633d2ab73aa1519f34b",
  "receipt": {
    "to": null,
    "from": "0x2d11F99f9884e257A1c9ACcc8A4Bea16FC6dA7AA",
    "contractAddress": "0xc5cdA017795314100Bb1118c38078FF8Dca8aFeb",
    "transactionIndex": 15,
    "gasUsed": "1949791",
    "logsBloom": "0x
    "blockHash": "0xfcc87c6c990ff8050abdafe93ee26929a262b3571bf296f4d1c04b372ab9fa3b",
    "transactionHash": "0x2b4c1199bfb3dcc85048d80980f50546d6204ea3a0d71633d2ab73aa1519f34b",
    "logs": [
      {
        "transactionIndex": 15,
        "blockNumber": 12716272,
        "transactionHash": "0x2b4c1199bfb3dcc85048d80980f50546d6204ea3a0d71633d2ab73aa1519f34b",
        "address": "0xc5cdA017795314100Bb1118c38078FF8Dca8aFeb",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002d11f99f9884e257a1c9accc8a4bea16fc6da7aa"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0xfcc87c6c990ff8050abdafe93ee26929a262b3571bf296f4d1c04b372ab9fa3b"
      }
    ],
    "blockNumber": 12716272,
    "cumulativeGasUsed": "2830762",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xB5Af4ae32913b340729d797F124899d027Ef6b1C"
  ],
  "numDeployments": 1,
  "solcInputHash": "440a2d82624b7e0f0ab0cd98f743b3c1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"metricTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CannotRenounce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotStakeNoMetric\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DuplicateAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShareAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoClaimableRewardsToWithdraw\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoMetricToWithdraw\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardsAlreadyToggled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardsAreNotActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardsNotActive\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"harvester\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lifetimeEarnings\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimable\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct StakingChef.Staker\",\"name\":\"\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"harvester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"agIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lifetimeEarnings\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimable\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct StakingChef.Staker\",\"name\":\"\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"agIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACC_METRIC_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"accumulatedWithPrecision\",\"type\":\"uint256\"}],\"name\":\"accumulatedMetricDividedByShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressExistence\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"areRewardsActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastRewardBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLifeTimeShareValueEstimate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMetricPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMetricToken\",\"outputs\":[{\"internalType\":\"contract MetricToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStake\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lifetimeEarnings\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimable\",\"type\":\"uint256\"}],\"internalType\":\"struct StakingChef.Staker\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalAllocationShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setLifetimeShareValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"metricAmount\",\"type\":\"uint256\"}],\"name\":\"setMetricPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"metricTokenAddress\",\"type\":\"address\"}],\"name\":\"setMetricToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"metricAmount\",\"type\":\"uint256\"}],\"name\":\"stakeMetric\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"staker\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lifetimeEarnings\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimable\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isOn\",\"type\":\"bool\"}],\"name\":\"toggleRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unStakeMetric\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateAccumulatedStakingRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewPendingClaims\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewPendingHarvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/StakingChef.sol\":\"StakingChef\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xdadd41acb749920eccf40aeaa8d291adf9751399a7343561bad13e7a8d99be0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"src/contracts/Chef.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./MetricToken.sol\\\";\\n\\nabstract contract Chef is Ownable {\\n    uint256 private _metricPerBlock;\\n    // This constant is used to remove the last 6 digits of METRIC to account for rounding issues\\n    uint256 public constant ACC_METRIC_PRECISION = 1e12;\\n\\n    bool private _rewardsActive = false;\\n    uint256 private _lastRewardBlock;\\n    uint256 private _lifetimeShareValue;\\n    uint256 private _totalAllocShares;\\n\\n    MetricToken private metric;\\n\\n    //------------------------------------------------------Setters\\n\\n    function toggleRewards(bool isOn) public onlyOwner {\\n        if (isOn == _rewardsActive) revert RewardsAlreadyToggled();\\n        if (isOn) {\\n            _setLastRewardBlock();\\n        } else {\\n            setLifetimeShareValue();\\n        }\\n        _rewardsActive = isOn;\\n    }\\n\\n    function setMetricPerBlock(uint256 metricAmount) public virtual onlyOwner {\\n        _metricPerBlock = metricAmount * 10**18;\\n    }\\n\\n    function _setLastRewardBlock() internal virtual {\\n        _lastRewardBlock = block.number;\\n    }\\n\\n    function setMetricToken(address metricTokenAddress) public virtual onlyOwner {\\n        if (metricTokenAddress == address(0x00)) revert InvalidAddress();\\n        metric = MetricToken(metricTokenAddress);\\n    }\\n\\n    function setLifetimeShareValue() public virtual activeRewards {\\n        uint256 accumulatedWithMetricPrecision = _getAccumulatedWithMetricPrecision();\\n        _lifetimeShareValue = _lifetimeShareValue + accumulatedMetricDividedByShares(accumulatedWithMetricPrecision);\\n        _setLastRewardBlock();\\n    }\\n\\n    function getLifeTimeShareValueEstimate() public view virtual returns (uint256) {\\n        uint256 accumulatedWithMetricPrecision = _getAccumulatedWithMetricPrecision();\\n        uint256 lifetimesharevalue = _getLifetimeShareValue();\\n        return lifetimesharevalue + accumulatedMetricDividedByShares(accumulatedWithMetricPrecision);\\n    }\\n\\n    function _addTotalAllocShares(uint256 shares) internal virtual {\\n        _totalAllocShares = _totalAllocShares + shares;\\n    }\\n\\n    function _addTotalAllocShares(uint256 oldShares, uint256 newShares) internal virtual {\\n        if (oldShares > _totalAllocShares) revert InvalidShareAmount();\\n        _totalAllocShares = _totalAllocShares - oldShares + newShares;\\n    }\\n\\n    function _removeAllocShares(uint256 oldShares) internal virtual {\\n        if (oldShares > _totalAllocShares) revert InvalidShareAmount();\\n        _totalAllocShares = _totalAllocShares - oldShares;\\n    }\\n\\n    //------------------------------------------------------Getters\\n\\n    function getMetricPerBlock() public view virtual returns (uint256) {\\n        return _metricPerBlock;\\n    }\\n\\n    function getLastRewardBlock() public view virtual returns (uint256) {\\n        return _lastRewardBlock;\\n    }\\n\\n    function areRewardsActive() public view virtual returns (bool) {\\n        return _rewardsActive;\\n    }\\n\\n    function _getAccumulatedWithMetricPrecision() internal view virtual returns (uint256) {\\n        uint256 blocksSince = block.number - getLastRewardBlock();\\n        uint256 accumulated = blocksSince * getMetricPerBlock();\\n        return accumulated * ACC_METRIC_PRECISION;\\n    }\\n\\n    function getTotalAllocationShares() public view returns (uint256) {\\n        return _totalAllocShares;\\n    }\\n\\n    function _getLifetimeShareValue() internal view returns (uint256) {\\n        return _lifetimeShareValue;\\n    }\\n\\n    function accumulatedMetricDividedByShares(uint256 accumulatedWithPrecision) public view returns (uint256) {\\n        if (getTotalAllocationShares() == 0) return 0;\\n        if (accumulatedWithPrecision == 0) return 0;\\n        return accumulatedWithPrecision / getTotalAllocationShares();\\n    }\\n\\n    function getMetricToken() public view returns (MetricToken) {\\n        return metric;\\n    }\\n\\n    //------------------------------------------------------Support Functions\\n\\n    mapping(address => bool) public addressExistence;\\n    modifier nonDuplicated(address _address) {\\n        if (addressExistence[_address] == true) revert DuplicateAddress();\\n        addressExistence[_address] = true;\\n        _;\\n    }\\n\\n    function renounceOwnership() public view override onlyOwner {\\n        revert CannotRenounce();\\n    }\\n\\n    //------------------------------------------------------Errors\\n    error DuplicateAddress();\\n    error CannotRenounce();\\n    error InvalidShareAmount();\\n    error RewardsNotActive();\\n    error InvalidAddress();\\n    error RewardsAlreadyToggled();\\n\\n    //------------------------------------------------------Events\\n    event Harvest(address indexed harvester, uint256 agIndex, uint256 amount);\\n    event Withdraw(address indexed withdrawer, uint256 agIndex, uint256 amount);\\n\\n    //------------------------------------------------------ Modifiers\\n    modifier activeRewards() {\\n        if (!areRewardsActive()) revert RewardsNotActive();\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x447ea69c3306cab1deff58f4ff9859c17b1df8e13bc1589599ef19db2a35368a\",\"license\":\"MIT\"},\"src/contracts/MetricToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n/// @custom:security-contact contracts@metricsdao.com\\ncontract MetricToken is ERC20 {\\n    constructor() ERC20(\\\"METRIC\\\", \\\"METRIC\\\") {\\n        _mint(_msgSender(), 1000000000 * 10**decimals());\\n    }\\n}\\n\",\"keccak256\":\"0x015317ec77ea633af5f2af9cde22891298225bbd33fc6309c06d87579920329b\",\"license\":\"MIT\"},\"src/contracts/StakingChef.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./Chef.sol\\\";\\n\\ncontract StakingChef is Chef {\\n    mapping(address => Staker) public staker;\\n\\n    constructor(address metricTokenAddress) {\\n        setMetricToken(metricTokenAddress);\\n        setMetricPerBlock(4);\\n    }\\n\\n    // --------------------------------------------------------------------- staking functions\\n    function stakeMetric(uint256 metricAmount) external {\\n        // Checks\\n        if (metricAmount <= 0) revert CannotStakeNoMetric();\\n\\n        // Effects\\n        Staker storage stake = staker[_msgSender()];\\n\\n        if (areRewardsActive() && getTotalAllocationShares() > 0) {\\n            updateAccumulatedStakingRewards();\\n        }\\n        staker[_msgSender()] = Staker({\\n            shares: stake.shares + metricAmount,\\n            lifetimeEarnings: stake.lifetimeEarnings + (((metricAmount) * _getLifetimeShareValue()) / ACC_METRIC_PRECISION),\\n            claimable: stake.claimable\\n        });\\n\\n        _addTotalAllocShares(metricAmount);\\n        emit Stake(_msgSender(), metricAmount);\\n\\n        // Interactions\\n        SafeERC20.safeTransferFrom(IERC20(getMetricToken()), _msgSender(), address(this), metricAmount);\\n    }\\n\\n    function unStakeMetric() public {\\n        // Checks\\n        Staker storage stake = staker[_msgSender()];\\n        if (stake.shares == 0) revert NoMetricToWithdraw();\\n\\n        if (areRewardsActive()) {\\n            updateAccumulatedStakingRewards();\\n        }\\n\\n        // Effects\\n        _harvest();\\n        uint256 toClaim = staker[_msgSender()].claimable;\\n        uint256 toWithdraw = stake.shares;\\n        _removeAllocShares(staker[_msgSender()].shares);\\n        stake.shares = 0;\\n\\n        // Interactions\\n\\n        if (toWithdraw + toClaim > 0) {\\n            SafeERC20.safeTransfer(IERC20(getMetricToken()), _msgSender(), toWithdraw + toClaim);\\n            emit UnStake(_msgSender(), stake, toWithdraw);\\n        }\\n        if (toClaim > 0) {\\n            emit Claim(_msgSender(), stake, toWithdraw);\\n        }\\n    }\\n\\n    // --------------------------------------------------------------------- Manage rewards and Principal\\n\\n    function claim() public {\\n        // Checks\\n        if (viewPendingHarvest() == 0) revert NoClaimableRewardsToWithdraw();\\n\\n        // Effects\\n        Staker storage stake = staker[_msgSender()];\\n        _harvest();\\n\\n        uint256 toClaim = stake.claimable;\\n        stake.claimable = 0;\\n\\n        // Interactions\\n        SafeERC20.safeTransfer(IERC20(getMetricToken()), _msgSender(), toClaim);\\n\\n        emit Claim(_msgSender(), stake, toClaim);\\n    }\\n\\n    function updateAccumulatedStakingRewards() public {\\n        if (!areRewardsActive()) revert RewardsAreNotActive();\\n        if (block.number <= getLastRewardBlock()) {\\n            return;\\n        }\\n\\n        setLifetimeShareValue();\\n    }\\n\\n    function _harvest() internal {\\n        Staker storage stake = staker[_msgSender()];\\n        updateAccumulatedStakingRewards();\\n\\n        uint256 claimable = (stake.shares * _getLifetimeShareValue()) / ACC_METRIC_PRECISION - stake.lifetimeEarnings;\\n\\n        stake.lifetimeEarnings = stake.lifetimeEarnings + claimable;\\n        stake.claimable = stake.claimable + claimable;\\n    }\\n\\n    //------------------------------------------------------Getters\\n\\n    function getStake() public view returns (Staker memory) {\\n        Staker storage stake = staker[_msgSender()];\\n        return stake;\\n    }\\n\\n    //------------------------------------------------------Distribution\\n\\n    function viewPendingHarvest() public view returns (uint256) {\\n        Staker storage stake = staker[_msgSender()];\\n\\n        return (stake.shares * _getLifetimeShareValue()) / ACC_METRIC_PRECISION - stake.lifetimeEarnings;\\n    }\\n\\n    function viewPendingClaims() public view returns (uint256) {\\n        Staker storage stake = staker[_msgSender()];\\n\\n        return stake.claimable;\\n    }\\n\\n    // --------------------------------------------------------------------- Structs\\n    struct Staker {\\n        uint256 shares;\\n        uint256 lifetimeEarnings;\\n        uint256 claimable;\\n    }\\n\\n    // --------------------------------------------------------------------- Errors\\n    error RewardsAreNotActive();\\n    error NoMetricToWithdraw();\\n    error NoClaimableRewardsToWithdraw();\\n    error CannotStakeNoMetric();\\n\\n    // --------------------------------------------------------------------- Events\\n    event Claim(address indexed harvester, StakingChef.Staker, uint256 amount);\\n    event UnStake(address indexed withdrawer, StakingChef.Staker, uint256 amount);\\n    event Stake(address indexed staker, uint256 amount);\\n}\\n\",\"keccak256\":\"0x7b057c6613375025f8a31f2187a272185d435ce60c8f87661a6f7f4854803c71\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526000600260006101000a81548160ff0219169083151502179055503480156200002c57600080fd5b5060405162002613380380620026138339818101604052810190620000529190620003e3565b62000072620000666200009c60201b60201c565b620000a460201b60201c565b62000083816200016860201b60201c565b620000956004620002a260201b60201c565b5062000532565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b620001786200009c60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff166200019e6200035060201b60201c565b73ffffffffffffffffffffffffffffffffffffffff1614620001f7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001ee9062000476565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036200025e576040517fe6c4247b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b620002b26200009c60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16620002d86200035060201b60201c565b73ffffffffffffffffffffffffffffffffffffffff161462000331576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620003289062000476565b60405180910390fd5b670de0b6b3a764000081620003479190620004d1565b60018190555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620003ab826200037e565b9050919050565b620003bd816200039e565b8114620003c957600080fd5b50565b600081519050620003dd81620003b2565b92915050565b600060208284031215620003fc57620003fb62000379565b5b60006200040c84828501620003cc565b91505092915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006200045e60208362000415565b91506200046b8262000426565b602082019050919050565b6000602082019050818103600083015262000491816200044f565b9050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620004de8262000498565b9150620004eb8362000498565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615620005275762000526620004a2565b5b828202905092915050565b6120d180620005426000396000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c80638c19ec8b116100c3578063c5d836d91161007c578063c5d836d914610359578063d944cb7a14610377578063e2eb5c4714610395578063f2fde38b1461039f578063f33c9baa146103bb578063fc0e3d90146103d957610158565b80638c19ec8b146102ab5780638da5cb5b146102c7578063945c5287146102e5578063a8e2a38b14610301578063bf62bee61461031f578063c284b8bc1461033d57610158565b80634e71d92d116101155780634e71d92d1461021f5780635e175713146102295780635f9b1bb5146102475780636ac49a8914610251578063715018a61461026f57806382e4eda41461027957610158565b80630419ba051461015d5780631cd8f0fa1461017b5780631e718d271461019757806322abbddf146101c757806349ba013b146101f75780634be6811714610215575b600080fd5b6101656103f7565b6040516101729190611746565b60405180910390f35b61019560048036038101906101909190611792565b61042b565b005b6101b160048036038101906101ac9190611792565b6104c4565b6040516101be9190611746565b60405180910390f35b6101e160048036038101906101dc919061181d565b610509565b6040516101ee9190611865565b60405180910390f35b6101ff610529565b60405161020c9190611746565b60405180910390f35b61021d61057f565b005b6102276105d7565b005b6102316106f1565b60405161023e9190611746565b60405180910390f35b61024f6106fb565b005b61025961076c565b6040516102669190611746565b60405180910390f35b610277610775565b005b610293600480360381019061028e919061181d565b610823565b6040516102a293929190611880565b60405180910390f35b6102c560048036038101906102c091906118e3565b61084d565b005b6102cf61094e565b6040516102dc919061191f565b60405180910390f35b6102ff60048036038101906102fa919061181d565b610977565b005b610309610a9d565b6040516103169190611999565b60405180910390f35b610327610ac7565b6040516103349190611746565b60405180910390f35b61035760048036038101906103529190611792565b610ad1565b005b610361610cc0565b60405161036e9190611746565b60405180910390f35b61037f610cca565b60405161038c9190611746565b60405180910390f35b61039d610d51565b005b6103b960048036038101906103b4919061181d565b610fa0565b005b6103c3611097565b6040516103d09190611865565b60405180910390f35b6103e16110ae565b6040516103ee9190611a05565b60405180910390f35b600080610402611130565b9050600061040e611177565b9050610419826104c4565b816104249190611a4f565b9250505090565b610433611181565b73ffffffffffffffffffffffffffffffffffffffff1661045161094e565b73ffffffffffffffffffffffffffffffffffffffff16146104a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049e90611b02565b60405180910390fd5b670de0b6b3a7640000816104bb9190611b22565b60018190555050565b6000806104cf6106f1565b036104dd5760009050610504565b600082036104ee5760009050610504565b6104f66106f1565b826105019190611bab565b90505b919050565b60076020528060005260406000206000915054906101000a900460ff1681565b60008060086000610538611181565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050806002015491505090565b610587611097565b6105bd576040517fa550df7300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6105c5610ac7565b4311156105d5576105d46106fb565b5b565b60006105e1610cca565b03610618576040517fd1d47f3c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060086000610626611181565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905061066a611189565b60008160020154905060008260020181905550610696610688610a9d565b610690611181565b83611249565b61069e611181565b73ffffffffffffffffffffffffffffffffffffffff167ff81a6933f785b7bfc6ba5e83b98ae1eed8fc79e789cd7ce550d884d6fc7f213c83836040516106e5929190611c72565b60405180910390a25050565b6000600554905090565b610703611097565b610739576040517faa3aac7f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610743611130565b905061074e816104c4565b60045461075b9190611a4f565b6004819055506107696112cf565b50565b64e8d4a5100081565b61077d611181565b73ffffffffffffffffffffffffffffffffffffffff1661079b61094e565b73ffffffffffffffffffffffffffffffffffffffff16146107f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e890611b02565b60405180910390fd5b6040517fc5fea89800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60086020528060005260406000206000915090508060000154908060010154908060020154905083565b610855611181565b73ffffffffffffffffffffffffffffffffffffffff1661087361094e565b73ffffffffffffffffffffffffffffffffffffffff16146108c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c090611b02565b60405180910390fd5b600260009054906101000a900460ff16151581151503610915576040517f1b82e04500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8015610928576109236112cf565b610931565b6109306106fb565b5b80600260006101000a81548160ff02191690831515021790555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61097f611181565b73ffffffffffffffffffffffffffffffffffffffff1661099d61094e565b73ffffffffffffffffffffffffffffffffffffffff16146109f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ea90611b02565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610a59576040517fe6c4247b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600354905090565b60008111610b0b576040517fc13151dd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060086000610b19611181565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050610b5d611097565b8015610b7057506000610b6e6106f1565b115b15610b7e57610b7d61057f565b5b6040518060600160405280838360000154610b999190611a4f565b815260200164e8d4a51000610bac611177565b85610bb79190611b22565b610bc19190611bab565b8360010154610bd09190611a4f565b8152602001826002015481525060086000610be9611181565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082015181600001556020820151816001015560408201518160020155905050610c4d826112d8565b610c55611181565b73ffffffffffffffffffffffffffffffffffffffff167febedb8b3c678666e7f36970bc8f57abf6d8fa2e828c0da91ea5b75bf68ed101a83604051610c9a9190611746565b60405180910390a2610cbc610cad610a9d565b610cb5611181565b30856112ef565b5050565b6000600154905090565b60008060086000610cd9611181565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050806001015464e8d4a51000610d28611177565b8360000154610d379190611b22565b610d419190611bab565b610d4b9190611c9b565b91505090565b600060086000610d5f611181565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000816000015403610dd9576040517f4b0aa74e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610de1611097565b15610def57610dee61057f565b5b610df7611189565b600060086000610e05611181565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201549050600082600001549050610ea060086000610e5d611181565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154611378565b6000836000018190555060008282610eb89190611a4f565b1115610f3a57610ee2610ec9610a9d565b610ed1611181565b8484610edd9190611a4f565b611249565b610eea611181565b73ffffffffffffffffffffffffffffffffffffffff167ff35c1aa3d74cd6f4eb244ea6dbb896ff2bcf5e45427ae2bdc1395b85ad2983868483604051610f31929190611c72565b60405180910390a25b6000821115610f9b57610f4b611181565b73ffffffffffffffffffffffffffffffffffffffff167ff81a6933f785b7bfc6ba5e83b98ae1eed8fc79e789cd7ce550d884d6fc7f213c8483604051610f92929190611c72565b60405180910390a25b505050565b610fa8611181565b73ffffffffffffffffffffffffffffffffffffffff16610fc661094e565b73ffffffffffffffffffffffffffffffffffffffff161461101c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161101390611b02565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361108b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161108290611d41565b60405180910390fd5b611094816113cb565b50565b6000600260009054906101000a900460ff16905090565b6110b661170c565b6000600860006110c4611181565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905080604051806060016040529081600082015481526020016001820154815260200160028201548152505091505090565b60008061113b610ac7565b436111469190611c9b565b90506000611152610cc0565b8261115d9190611b22565b905064e8d4a51000816111709190611b22565b9250505090565b6000600454905090565b600033905090565b600060086000611197611181565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506111db61057f565b6000816001015464e8d4a510006111f0611177565b84600001546111ff9190611b22565b6112099190611bab565b6112139190611c9b565b90508082600101546112259190611a4f565b826001018190555080826002015461123d9190611a4f565b82600201819055505050565b6112ca8363a9059cbb60e01b8484604051602401611268929190611d61565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061148f565b505050565b43600381905550565b806005546112e69190611a4f565b60058190555050565b611372846323b872dd60e01b85858560405160240161131093929190611d8a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061148f565b50505050565b6005548111156113b4576040517f8c88122d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806005546113c29190611c9b565b60058190555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60006114f1826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166115569092919063ffffffff16565b905060008151111561155157808060200190518101906115119190611dd6565b611550576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161154790611e75565b60405180910390fd5b5b505050565b6060611565848460008561156e565b90509392505050565b6060824710156115b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115aa90611f07565b60405180910390fd5b6115bc85611682565b6115fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115f290611f73565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611624919061200d565b60006040518083038185875af1925050503d8060008114611661576040519150601f19603f3d011682016040523d82523d6000602084013e611666565b606091505b50915091506116768282866116a5565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b606083156116b557829050611705565b6000835111156116c85782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116fc9190612079565b60405180910390fd5b9392505050565b60405180606001604052806000815260200160008152602001600081525090565b6000819050919050565b6117408161172d565b82525050565b600060208201905061175b6000830184611737565b92915050565b600080fd5b61176f8161172d565b811461177a57600080fd5b50565b60008135905061178c81611766565b92915050565b6000602082840312156117a8576117a7611761565b5b60006117b68482850161177d565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006117ea826117bf565b9050919050565b6117fa816117df565b811461180557600080fd5b50565b600081359050611817816117f1565b92915050565b60006020828403121561183357611832611761565b5b600061184184828501611808565b91505092915050565b60008115159050919050565b61185f8161184a565b82525050565b600060208201905061187a6000830184611856565b92915050565b60006060820190506118956000830186611737565b6118a26020830185611737565b6118af6040830184611737565b949350505050565b6118c08161184a565b81146118cb57600080fd5b50565b6000813590506118dd816118b7565b92915050565b6000602082840312156118f9576118f8611761565b5b6000611907848285016118ce565b91505092915050565b611919816117df565b82525050565b60006020820190506119346000830184611910565b92915050565b6000819050919050565b600061195f61195a611955846117bf565b61193a565b6117bf565b9050919050565b600061197182611944565b9050919050565b600061198382611966565b9050919050565b61199381611978565b82525050565b60006020820190506119ae600083018461198a565b92915050565b6119bd8161172d565b82525050565b6060820160008201516119d960008501826119b4565b5060208201516119ec60208501826119b4565b5060408201516119ff60408501826119b4565b50505050565b6000606082019050611a1a60008301846119c3565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611a5a8261172d565b9150611a658361172d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611a9a57611a99611a20565b5b828201905092915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611aec602083611aa5565b9150611af782611ab6565b602082019050919050565b60006020820190508181036000830152611b1b81611adf565b9050919050565b6000611b2d8261172d565b9150611b388361172d565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611b7157611b70611a20565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611bb68261172d565b9150611bc18361172d565b925082611bd157611bd0611b7c565b5b828204905092915050565b60008160001c9050919050565b6000819050919050565b6000611c06611c0183611bdc565b611be9565b9050919050565b606082016000808301549050611c2281611bf3565b611c2f60008601826119b4565b5060018301549050611c4081611bf3565b611c4d60208601826119b4565b5060028301549050611c5e81611bf3565b611c6b60408601826119b4565b5050505050565b6000608082019050611c876000830185611c0d565b611c946060830184611737565b9392505050565b6000611ca68261172d565b9150611cb18361172d565b925082821015611cc457611cc3611a20565b5b828203905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611d2b602683611aa5565b9150611d3682611ccf565b604082019050919050565b60006020820190508181036000830152611d5a81611d1e565b9050919050565b6000604082019050611d766000830185611910565b611d836020830184611737565b9392505050565b6000606082019050611d9f6000830186611910565b611dac6020830185611910565b611db96040830184611737565b949350505050565b600081519050611dd0816118b7565b92915050565b600060208284031215611dec57611deb611761565b5b6000611dfa84828501611dc1565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000611e5f602a83611aa5565b9150611e6a82611e03565b604082019050919050565b60006020820190508181036000830152611e8e81611e52565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000611ef1602683611aa5565b9150611efc82611e95565b604082019050919050565b60006020820190508181036000830152611f2081611ee4565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000611f5d601d83611aa5565b9150611f6882611f27565b602082019050919050565b60006020820190508181036000830152611f8c81611f50565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015611fc7578082015181840152602081019050611fac565b83811115611fd6576000848401525b50505050565b6000611fe782611f93565b611ff18185611f9e565b9350612001818560208601611fa9565b80840191505092915050565b60006120198284611fdc565b915081905092915050565b600081519050919050565b6000601f19601f8301169050919050565b600061204b82612024565b6120558185611aa5565b9350612065818560208601611fa9565b61206e8161202f565b840191505092915050565b600060208201905081810360008301526120938184612040565b90509291505056fea26469706673582212204206ef6df902cc79b50dc1ecc93a9cfee34acaf89affc472b7ac1b4b42b99e9c64736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101585760003560e01c80638c19ec8b116100c3578063c5d836d91161007c578063c5d836d914610359578063d944cb7a14610377578063e2eb5c4714610395578063f2fde38b1461039f578063f33c9baa146103bb578063fc0e3d90146103d957610158565b80638c19ec8b146102ab5780638da5cb5b146102c7578063945c5287146102e5578063a8e2a38b14610301578063bf62bee61461031f578063c284b8bc1461033d57610158565b80634e71d92d116101155780634e71d92d1461021f5780635e175713146102295780635f9b1bb5146102475780636ac49a8914610251578063715018a61461026f57806382e4eda41461027957610158565b80630419ba051461015d5780631cd8f0fa1461017b5780631e718d271461019757806322abbddf146101c757806349ba013b146101f75780634be6811714610215575b600080fd5b6101656103f7565b6040516101729190611746565b60405180910390f35b61019560048036038101906101909190611792565b61042b565b005b6101b160048036038101906101ac9190611792565b6104c4565b6040516101be9190611746565b60405180910390f35b6101e160048036038101906101dc919061181d565b610509565b6040516101ee9190611865565b60405180910390f35b6101ff610529565b60405161020c9190611746565b60405180910390f35b61021d61057f565b005b6102276105d7565b005b6102316106f1565b60405161023e9190611746565b60405180910390f35b61024f6106fb565b005b61025961076c565b6040516102669190611746565b60405180910390f35b610277610775565b005b610293600480360381019061028e919061181d565b610823565b6040516102a293929190611880565b60405180910390f35b6102c560048036038101906102c091906118e3565b61084d565b005b6102cf61094e565b6040516102dc919061191f565b60405180910390f35b6102ff60048036038101906102fa919061181d565b610977565b005b610309610a9d565b6040516103169190611999565b60405180910390f35b610327610ac7565b6040516103349190611746565b60405180910390f35b61035760048036038101906103529190611792565b610ad1565b005b610361610cc0565b60405161036e9190611746565b60405180910390f35b61037f610cca565b60405161038c9190611746565b60405180910390f35b61039d610d51565b005b6103b960048036038101906103b4919061181d565b610fa0565b005b6103c3611097565b6040516103d09190611865565b60405180910390f35b6103e16110ae565b6040516103ee9190611a05565b60405180910390f35b600080610402611130565b9050600061040e611177565b9050610419826104c4565b816104249190611a4f565b9250505090565b610433611181565b73ffffffffffffffffffffffffffffffffffffffff1661045161094e565b73ffffffffffffffffffffffffffffffffffffffff16146104a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049e90611b02565b60405180910390fd5b670de0b6b3a7640000816104bb9190611b22565b60018190555050565b6000806104cf6106f1565b036104dd5760009050610504565b600082036104ee5760009050610504565b6104f66106f1565b826105019190611bab565b90505b919050565b60076020528060005260406000206000915054906101000a900460ff1681565b60008060086000610538611181565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050806002015491505090565b610587611097565b6105bd576040517fa550df7300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6105c5610ac7565b4311156105d5576105d46106fb565b5b565b60006105e1610cca565b03610618576040517fd1d47f3c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060086000610626611181565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905061066a611189565b60008160020154905060008260020181905550610696610688610a9d565b610690611181565b83611249565b61069e611181565b73ffffffffffffffffffffffffffffffffffffffff167ff81a6933f785b7bfc6ba5e83b98ae1eed8fc79e789cd7ce550d884d6fc7f213c83836040516106e5929190611c72565b60405180910390a25050565b6000600554905090565b610703611097565b610739576040517faa3aac7f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610743611130565b905061074e816104c4565b60045461075b9190611a4f565b6004819055506107696112cf565b50565b64e8d4a5100081565b61077d611181565b73ffffffffffffffffffffffffffffffffffffffff1661079b61094e565b73ffffffffffffffffffffffffffffffffffffffff16146107f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e890611b02565b60405180910390fd5b6040517fc5fea89800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60086020528060005260406000206000915090508060000154908060010154908060020154905083565b610855611181565b73ffffffffffffffffffffffffffffffffffffffff1661087361094e565b73ffffffffffffffffffffffffffffffffffffffff16146108c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c090611b02565b60405180910390fd5b600260009054906101000a900460ff16151581151503610915576040517f1b82e04500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8015610928576109236112cf565b610931565b6109306106fb565b5b80600260006101000a81548160ff02191690831515021790555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61097f611181565b73ffffffffffffffffffffffffffffffffffffffff1661099d61094e565b73ffffffffffffffffffffffffffffffffffffffff16146109f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ea90611b02565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610a59576040517fe6c4247b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600354905090565b60008111610b0b576040517fc13151dd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060086000610b19611181565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050610b5d611097565b8015610b7057506000610b6e6106f1565b115b15610b7e57610b7d61057f565b5b6040518060600160405280838360000154610b999190611a4f565b815260200164e8d4a51000610bac611177565b85610bb79190611b22565b610bc19190611bab565b8360010154610bd09190611a4f565b8152602001826002015481525060086000610be9611181565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082015181600001556020820151816001015560408201518160020155905050610c4d826112d8565b610c55611181565b73ffffffffffffffffffffffffffffffffffffffff167febedb8b3c678666e7f36970bc8f57abf6d8fa2e828c0da91ea5b75bf68ed101a83604051610c9a9190611746565b60405180910390a2610cbc610cad610a9d565b610cb5611181565b30856112ef565b5050565b6000600154905090565b60008060086000610cd9611181565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050806001015464e8d4a51000610d28611177565b8360000154610d379190611b22565b610d419190611bab565b610d4b9190611c9b565b91505090565b600060086000610d5f611181565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000816000015403610dd9576040517f4b0aa74e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610de1611097565b15610def57610dee61057f565b5b610df7611189565b600060086000610e05611181565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201549050600082600001549050610ea060086000610e5d611181565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154611378565b6000836000018190555060008282610eb89190611a4f565b1115610f3a57610ee2610ec9610a9d565b610ed1611181565b8484610edd9190611a4f565b611249565b610eea611181565b73ffffffffffffffffffffffffffffffffffffffff167ff35c1aa3d74cd6f4eb244ea6dbb896ff2bcf5e45427ae2bdc1395b85ad2983868483604051610f31929190611c72565b60405180910390a25b6000821115610f9b57610f4b611181565b73ffffffffffffffffffffffffffffffffffffffff167ff81a6933f785b7bfc6ba5e83b98ae1eed8fc79e789cd7ce550d884d6fc7f213c8483604051610f92929190611c72565b60405180910390a25b505050565b610fa8611181565b73ffffffffffffffffffffffffffffffffffffffff16610fc661094e565b73ffffffffffffffffffffffffffffffffffffffff161461101c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161101390611b02565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361108b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161108290611d41565b60405180910390fd5b611094816113cb565b50565b6000600260009054906101000a900460ff16905090565b6110b661170c565b6000600860006110c4611181565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905080604051806060016040529081600082015481526020016001820154815260200160028201548152505091505090565b60008061113b610ac7565b436111469190611c9b565b90506000611152610cc0565b8261115d9190611b22565b905064e8d4a51000816111709190611b22565b9250505090565b6000600454905090565b600033905090565b600060086000611197611181565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506111db61057f565b6000816001015464e8d4a510006111f0611177565b84600001546111ff9190611b22565b6112099190611bab565b6112139190611c9b565b90508082600101546112259190611a4f565b826001018190555080826002015461123d9190611a4f565b82600201819055505050565b6112ca8363a9059cbb60e01b8484604051602401611268929190611d61565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061148f565b505050565b43600381905550565b806005546112e69190611a4f565b60058190555050565b611372846323b872dd60e01b85858560405160240161131093929190611d8a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061148f565b50505050565b6005548111156113b4576040517f8c88122d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806005546113c29190611c9b565b60058190555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60006114f1826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166115569092919063ffffffff16565b905060008151111561155157808060200190518101906115119190611dd6565b611550576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161154790611e75565b60405180910390fd5b5b505050565b6060611565848460008561156e565b90509392505050565b6060824710156115b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115aa90611f07565b60405180910390fd5b6115bc85611682565b6115fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115f290611f73565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611624919061200d565b60006040518083038185875af1925050503d8060008114611661576040519150601f19603f3d011682016040523d82523d6000602084013e611666565b606091505b50915091506116768282866116a5565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b606083156116b557829050611705565b6000835111156116c85782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116fc9190612079565b60405180910390fd5b9392505050565b60405180606001604052806000815260200160008152602001600081525090565b6000819050919050565b6117408161172d565b82525050565b600060208201905061175b6000830184611737565b92915050565b600080fd5b61176f8161172d565b811461177a57600080fd5b50565b60008135905061178c81611766565b92915050565b6000602082840312156117a8576117a7611761565b5b60006117b68482850161177d565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006117ea826117bf565b9050919050565b6117fa816117df565b811461180557600080fd5b50565b600081359050611817816117f1565b92915050565b60006020828403121561183357611832611761565b5b600061184184828501611808565b91505092915050565b60008115159050919050565b61185f8161184a565b82525050565b600060208201905061187a6000830184611856565b92915050565b60006060820190506118956000830186611737565b6118a26020830185611737565b6118af6040830184611737565b949350505050565b6118c08161184a565b81146118cb57600080fd5b50565b6000813590506118dd816118b7565b92915050565b6000602082840312156118f9576118f8611761565b5b6000611907848285016118ce565b91505092915050565b611919816117df565b82525050565b60006020820190506119346000830184611910565b92915050565b6000819050919050565b600061195f61195a611955846117bf565b61193a565b6117bf565b9050919050565b600061197182611944565b9050919050565b600061198382611966565b9050919050565b61199381611978565b82525050565b60006020820190506119ae600083018461198a565b92915050565b6119bd8161172d565b82525050565b6060820160008201516119d960008501826119b4565b5060208201516119ec60208501826119b4565b5060408201516119ff60408501826119b4565b50505050565b6000606082019050611a1a60008301846119c3565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611a5a8261172d565b9150611a658361172d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611a9a57611a99611a20565b5b828201905092915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611aec602083611aa5565b9150611af782611ab6565b602082019050919050565b60006020820190508181036000830152611b1b81611adf565b9050919050565b6000611b2d8261172d565b9150611b388361172d565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611b7157611b70611a20565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611bb68261172d565b9150611bc18361172d565b925082611bd157611bd0611b7c565b5b828204905092915050565b60008160001c9050919050565b6000819050919050565b6000611c06611c0183611bdc565b611be9565b9050919050565b606082016000808301549050611c2281611bf3565b611c2f60008601826119b4565b5060018301549050611c4081611bf3565b611c4d60208601826119b4565b5060028301549050611c5e81611bf3565b611c6b60408601826119b4565b5050505050565b6000608082019050611c876000830185611c0d565b611c946060830184611737565b9392505050565b6000611ca68261172d565b9150611cb18361172d565b925082821015611cc457611cc3611a20565b5b828203905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611d2b602683611aa5565b9150611d3682611ccf565b604082019050919050565b60006020820190508181036000830152611d5a81611d1e565b9050919050565b6000604082019050611d766000830185611910565b611d836020830184611737565b9392505050565b6000606082019050611d9f6000830186611910565b611dac6020830185611910565b611db96040830184611737565b949350505050565b600081519050611dd0816118b7565b92915050565b600060208284031215611dec57611deb611761565b5b6000611dfa84828501611dc1565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000611e5f602a83611aa5565b9150611e6a82611e03565b604082019050919050565b60006020820190508181036000830152611e8e81611e52565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000611ef1602683611aa5565b9150611efc82611e95565b604082019050919050565b60006020820190508181036000830152611f2081611ee4565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000611f5d601d83611aa5565b9150611f6882611f27565b602082019050919050565b60006020820190508181036000830152611f8c81611f50565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015611fc7578082015181840152602081019050611fac565b83811115611fd6576000848401525b50505050565b6000611fe782611f93565b611ff18185611f9e565b9350612001818560208601611fa9565b80840191505092915050565b60006120198284611fdc565b915081905092915050565b600081519050919050565b6000601f19601f8301169050919050565b600061204b82612024565b6120558185611aa5565b9350612065818560208601611fa9565b61206e8161202f565b840191505092915050565b600060208201905081810360008301526120938184612040565b90509291505056fea26469706673582212204206ef6df902cc79b50dc1ecc93a9cfee34acaf89affc472b7ac1b4b42b99e9c64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "src/contracts/StakingChef.sol:StakingChef",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2816,
        "contract": "src/contracts/StakingChef.sol:StakingChef",
        "label": "_metricPerBlock",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2822,
        "contract": "src/contracts/StakingChef.sol:StakingChef",
        "label": "_rewardsActive",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 2824,
        "contract": "src/contracts/StakingChef.sol:StakingChef",
        "label": "_lastRewardBlock",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2826,
        "contract": "src/contracts/StakingChef.sol:StakingChef",
        "label": "_lifetimeShareValue",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 2828,
        "contract": "src/contracts/StakingChef.sol:StakingChef",
        "label": "_totalAllocShares",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 2831,
        "contract": "src/contracts/StakingChef.sol:StakingChef",
        "label": "metric",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(MetricToken)3223"
      },
      {
        "astId": 3111,
        "contract": "src/contracts/StakingChef.sol:StakingChef",
        "label": "addressExistence",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 5135,
        "contract": "src/contracts/StakingChef.sol:StakingChef",
        "label": "staker",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_struct(Staker)5520_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(MetricToken)3223": {
        "encoding": "inplace",
        "label": "contract MetricToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Staker)5520_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct StakingChef.Staker)",
        "numberOfBytes": "32",
        "value": "t_struct(Staker)5520_storage"
      },
      "t_struct(Staker)5520_storage": {
        "encoding": "inplace",
        "label": "struct StakingChef.Staker",
        "members": [
          {
            "astId": 5515,
            "contract": "src/contracts/StakingChef.sol:StakingChef",
            "label": "shares",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5517,
            "contract": "src/contracts/StakingChef.sol:StakingChef",
            "label": "lifetimeEarnings",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5519,
            "contract": "src/contracts/StakingChef.sol:StakingChef",
            "label": "claimable",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}