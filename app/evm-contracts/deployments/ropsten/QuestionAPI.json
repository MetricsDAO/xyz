{
  "address": "0x849fa310761d97ee02F1D633fE077b310Be5adD2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bountyQuestion",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "questionStateController",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "claimController",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "costController",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ClaimsNotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DoesNotHold",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAtBenchmark",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PROGRAM_MANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "nft",
          "type": "address"
        }
      ],
      "name": "addHolderRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "answerURL",
          "type": "string"
        }
      ],
      "name": "answerQuestion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        }
      ],
      "name": "claimQuestion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "claimLimit",
          "type": "uint256"
        }
      ],
      "name": "createChallenge",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "claimLimit",
          "type": "uint256"
        }
      ],
      "name": "createQuestion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentQuestionId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        }
      ],
      "name": "disqualifyQuestion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        }
      ],
      "name": "publishQuestion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newQuestion",
          "type": "address"
        }
      ],
      "name": "setClaimController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newCost",
          "type": "address"
        }
      ],
      "name": "setCostController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newQuestion",
          "type": "address"
        }
      ],
      "name": "setQuestionProxy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newQuestion",
          "type": "address"
        }
      ],
      "name": "setQuestionStateController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        }
      ],
      "name": "unvoteQuestion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "upvoteQuestion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9c4ea57f630abb75d07ee9e9db85f0a416170563a3c1fd3fffd42e7fc6b79d22",
  "receipt": {
    "to": null,
    "from": "0x2d11F99f9884e257A1c9ACcc8A4Bea16FC6dA7AA",
    "contractAddress": "0x849fa310761d97ee02F1D633fE077b310Be5adD2",
    "transactionIndex": 6,
    "gasUsed": "1665353",
    "logsBloom": "0x
    "blockHash": "0x9775422d30867538ba734b270e1f0abea75cdd8f86a2f28e7e36de44293ed5d1",
    "transactionHash": "0x9c4ea57f630abb75d07ee9e9db85f0a416170563a3c1fd3fffd42e7fc6b79d22",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 12716269,
        "transactionHash": "0x9c4ea57f630abb75d07ee9e9db85f0a416170563a3c1fd3fffd42e7fc6b79d22",
        "address": "0x849fa310761d97ee02F1D633fE077b310Be5adD2",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002d11f99f9884e257a1c9accc8a4bea16fc6da7aa"
        ],
        "data": "0x",
        "logIndex": 13,
        "blockHash": "0x9775422d30867538ba734b270e1f0abea75cdd8f86a2f28e7e36de44293ed5d1"
      }
    ],
    "blockNumber": 12716269,
    "cumulativeGasUsed": "3818841",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xE64AedB13b71033Ed6AeeA6f200BC963d47A31da",
    "0x034836e10E4AF328d30f223DB31dD689f1bb5d89",
    "0x90EA3EC3deb32DCbCfd87d81E358011185d2998e",
    "0xf4681fFd2072657413F1950D7F55FdE96868F415"
  ],
  "numDeployments": 1,
  "solcInputHash": "6f36acf124c5a645efd286abe6af4794",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bountyQuestion\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"questionStateController\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"claimController\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"costController\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ClaimsNotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DoesNotHold\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAtBenchmark\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PROGRAM_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"}],\"name\":\"addHolderRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"answerURL\",\"type\":\"string\"}],\"name\":\"answerQuestion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"}],\"name\":\"claimQuestion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"claimLimit\",\"type\":\"uint256\"}],\"name\":\"createChallenge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"claimLimit\",\"type\":\"uint256\"}],\"name\":\"createQuestion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentQuestionId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"}],\"name\":\"disqualifyQuestion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"}],\"name\":\"publishQuestion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newQuestion\",\"type\":\"address\"}],\"name\":\"setClaimController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newCost\",\"type\":\"address\"}],\"name\":\"setCostController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newQuestion\",\"type\":\"address\"}],\"name\":\"setQuestionProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newQuestion\",\"type\":\"address\"}],\"name\":\"setQuestionStateController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"}],\"name\":\"unvoteQuestion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"upvoteQuestion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createChallenge(string,uint256)\":{\"params\":{\"claimLimit\":\"The limit for the amount of people that can claim the challenge\",\"uri\":\"The IPFS hash of the challenge\"},\"returns\":{\"_0\":\"questionId The question id\"}},\"createQuestion(string,uint256)\":{\"params\":{\"claimLimit\":\"The limit for the amount of people that can claim the question\",\"uri\":\"The IPFS hash of the question\"},\"returns\":{\"_0\":\"The question id\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unvoteQuestion(uint256)\":{\"params\":{\"questionId\":\"The questionId of the question to upvote\"}},\"upvoteQuestion(uint256,uint256)\":{\"params\":{\"amount\":\"Metric amount to put behind the vote We can manipulate this very easily -- think of a way to make it secure\",\"questionId\":\"The questionId of the question to upvote\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createChallenge(string,uint256)\":{\"notice\":\"Directly creates a challenge, this is an optional feature for program managers that would like to create challenges directly (skipping the voting stage).\"},\"createQuestion(string,uint256)\":{\"notice\":\"Creates a question\"},\"unvoteQuestion(uint256)\":{\"notice\":\"Unvotes a question\"},\"upvoteQuestion(uint256,uint256)\":{\"notice\":\"Upvotes a question\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/Protocol/QuestionAPI.sol\":\"QuestionAPI\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xaf297d12d8d4a57fe01a70f0ef38908f208e3faedc577056d0b728fa2f3ccf0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"src/contracts/Protocol/BountyQuestion.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"./modifiers/OnlyAPI.sol\\\";\\n\\n/// @custom:security-contact contracts@metricsdao.xyz\\ncontract BountyQuestion is Ownable, OnlyApi {\\n    using Counters for Counters.Counter;\\n\\n    Counters.Counter private _questionIdCounter;\\n\\n    // This maps the author to the list of question IDs they have created\\n    mapping(address => uint256[]) public authors;\\n\\n    // This maps the question ID to the question data\\n    mapping(uint256 => QuestionData) public questions;\\n\\n    constructor() {\\n        _questionIdCounter.increment();\\n    }\\n\\n    function mintQuestion(address author, string calldata uri) public onlyApi returns (uint256) {\\n        uint256 questionId = _questionIdCounter.current();\\n        _questionIdCounter.increment();\\n\\n        questions[questionId] = QuestionData({tokenId: questionId, url: uri});\\n        authors[author].push(questionId);\\n        return questionId;\\n    }\\n\\n    function getAuthor(address user) public view returns (QuestionData[] memory) {\\n        uint256[] memory created = authors[user];\\n\\n        QuestionData[] memory ret = new QuestionData[](created.length);\\n        for (uint256 i = 0; i < created.length; i++) {\\n            ret[i] = questions[created[i]];\\n        }\\n        return ret;\\n    }\\n\\n    struct QuestionData {\\n        uint256 tokenId;\\n        string url;\\n    }\\n}\\n\",\"keccak256\":\"0x787edaaa8e84426599743591fa5d39288ae335f419e91b33f882c700d0ddadd1\",\"license\":\"MIT\"},\"src/contracts/Protocol/QuestionAPI.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./BountyQuestion.sol\\\";\\nimport \\\"./interfaces/IClaimController.sol\\\";\\nimport \\\"./interfaces/IQuestionStateController.sol\\\";\\nimport \\\"./interfaces/IActionCostController.sol\\\";\\nimport \\\"./modifiers/NFTLocked.sol\\\";\\n\\n// TODO a lot of talk about \\\"admins\\\" -> solve that\\ncontract QuestionAPI is Ownable, NFTLocked {\\n    BountyQuestion private _question;\\n    IQuestionStateController private _questionStateController;\\n    IClaimController private _claimController;\\n    IActionCostController private _costController;\\n\\n    uint256 public currentQuestionId;\\n\\n    constructor(\\n        address bountyQuestion,\\n        address questionStateController,\\n        address claimController,\\n        address costController\\n    ) {\\n        _question = BountyQuestion(bountyQuestion);\\n        _questionStateController = IQuestionStateController(questionStateController);\\n        _claimController = IClaimController(claimController);\\n        _costController = IActionCostController(costController);\\n    }\\n\\n    // TODO admin-only quesiton state \\\"BAD\\\" which basically ends the lifecycle\\n    // TODO add \\\"unvote\\\"\\n\\n    // TODO lock metric\\n    // uint8?\\n\\n    /**\\n     * @notice Creates a question\\n     * @param uri The IPFS hash of the question\\n     * @param claimLimit The limit for the amount of people that can claim the question\\n     * @return The question id\\n     */\\n    function createQuestion(string calldata uri, uint256 claimLimit) public returns (uint256) {\\n        // Mint a new question\\n        uint256 questionId = _question.mintQuestion(_msgSender(), uri);\\n\\n        // Pay to create a question\\n        _costController.payForCreateQuestion(_msgSender(), questionId);\\n\\n        // Initialize the question\\n        _questionStateController.initializeQuestion(questionId, uri);\\n        _claimController.initializeQuestion(questionId, claimLimit);\\n        currentQuestionId = questionId;\\n        return questionId;\\n    }\\n\\n    /**\\n     * @notice Directly creates a challenge, this is an optional feature for program managers that would like to create challenges directly (skipping the voting stage).\\n     * @param uri The IPFS hash of the challenge\\n     * @param claimLimit The limit for the amount of people that can claim the challenge\\n     * @return questionId The question id\\n     */\\n    function createChallenge(string calldata uri, uint256 claimLimit) public onlyHolder(PROGRAM_MANAGER_ROLE) returns (uint256) {\\n        // Pay to create a question\\n        // _costController.payForCreateChallenge(msg.sender); ? Not sure if we want this -- doubt it\\n        // keep as questionId or should be challengeId?\\n\\n        // Mint a new question\\n        uint256 questionId = _question.mintQuestion(_msgSender(), uri);\\n\\n        // Initialize the question\\n        _questionStateController.initializeQuestion(questionId, uri);\\n        _claimController.initializeQuestion(questionId, claimLimit);\\n\\n        // Publish the question (make it a challenge)\\n        _questionStateController.publish(questionId);\\n\\n        return questionId;\\n    }\\n\\n    // TODO lock metric\\n    /**\\n     * @notice Upvotes a question\\n     * @param questionId The questionId of the question to upvote\\n     * @param amount Metric amount to put behind the vote\\n     * We can manipulate this very easily -- think of a way to make it secure\\n     */\\n    function upvoteQuestion(uint256 questionId, uint256 amount) public {\\n        _questionStateController.voteFor(_msgSender(), questionId, amount);\\n    }\\n\\n    /**\\n     * @notice Unvotes a question\\n     * @param questionId The questionId of the question to upvote\\n     */\\n    function unvoteQuestion(uint256 questionId) public {\\n        _questionStateController.unvoteFor(_msgSender(), questionId);\\n    }\\n\\n    function publishQuestion(uint256 questionId) public {\\n        uint256 someBenchmark = 1;\\n        if (someBenchmark != 1) revert NotAtBenchmark();\\n        _questionStateController.publish(questionId);\\n    }\\n\\n    // TODO lock metric\\n    function claimQuestion(uint256 questionId) public {\\n        // TODO it sucks to do an int state check here, and I don't want a getter for every state\\n        if (_questionStateController.getState(questionId) != uint256(IQuestionStateController.STATE.PUBLISHED)) revert ClaimsNotOpen();\\n\\n        _claimController.claim(questionId);\\n    }\\n\\n    // TODO lock metric\\n    function answerQuestion(uint256 questionId, string calldata answerURL) public {\\n        _claimController.answer(questionId, answerURL);\\n    }\\n\\n    function disqualifyQuestion(uint256 questionId) public onlyOwner {\\n        _questionStateController.setDisqualifiedState(questionId);\\n    }\\n\\n    //------------------------------------------------------ Errors\\n    error ClaimsNotOpen();\\n    error NotAtBenchmark();\\n\\n    //------------------------------------------------------ Proxy\\n\\n    function setQuestionProxy(address newQuestion) public onlyOwner {\\n        _question = BountyQuestion(newQuestion);\\n    }\\n\\n    function setQuestionStateController(address newQuestion) public onlyOwner {\\n        _questionStateController = IQuestionStateController(newQuestion);\\n    }\\n\\n    function setClaimController(address newQuestion) public onlyOwner {\\n        _claimController = IClaimController(newQuestion);\\n    }\\n\\n    function setCostController(address newCost) public onlyOwner {\\n        _costController = IActionCostController(newCost);\\n    }\\n}\\n\",\"keccak256\":\"0x77604242192dbac5701c8a0147325f33ca98285879ea4f7c9a50fdc0ddae2dfc\",\"license\":\"MIT\"},\"src/contracts/Protocol/interfaces/IActionCostController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IActionCostController {\\n    function payForCreateQuestion(address _user, uint256 questionId) external;\\n\\n    function setCreateCost(uint256 _cost) external;\\n\\n    function getLockedPerUser(address _user) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xce5ac27aba8ad7e2d11c0a10e3a8543352de40e9c55a13cedd2ae4f089e2b747\",\"license\":\"MIT\"},\"src/contracts/Protocol/interfaces/IClaimController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IClaimController {\\n    function initializeQuestion(uint256 questionId, uint256 claimLimit) external;\\n\\n    function claim(uint256 questionId) external;\\n\\n    function answer(uint256 questionId, string calldata answerURL) external;\\n}\\n\",\"keccak256\":\"0x5e437cc9dcbfbb96ff94a305f33ec87adcd1f752ecfcb8d12f4f3cdb84b22ba5\",\"license\":\"MIT\"},\"src/contracts/Protocol/interfaces/IQuestionStateController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IQuestionStateController {\\n    function initializeQuestion(uint256 questionId, string calldata uri) external;\\n\\n    function voteFor(\\n        address _user,\\n        uint256 questionId,\\n        uint256 amount\\n    ) external;\\n\\n    function unvoteFor(address _user, uint256 questionId) external;\\n\\n    function publish(uint256 questionId) external;\\n\\n    // TODO currentState can probably be like a uint8, it depends on how many states we have\\n    function getState(uint256 quesitonId) external view returns (uint256 currentState);\\n\\n    function setDisqualifiedState(uint256 questionId) external;\\n\\n    enum STATE {\\n        // TODO this where it becomes a challenge, can be claimed and answered\\n        UNINIT,\\n        VOTING,\\n        PUBLISHED, // TODO this where it becomes a challenge, can be claimed and answered\\n        DISQUALIFIED,\\n        COMPLETED\\n    }\\n}\\n\",\"keccak256\":\"0xcd6e4eae47b170aeab62607ad776ff3836ec5df72f7dc62e3986fde202b39adf\",\"license\":\"MIT\"},\"src/contracts/Protocol/modifiers/NFTLocked.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721.sol\\\";\\n\\nabstract contract NFTLocked is Ownable {\\n    bytes32 public constant PROGRAM_MANAGER_ROLE = keccak256(\\\"PROGRAM_MANAGER_ROLE\\\");\\n\\n    mapping(bytes32 => address) private _nfts;\\n\\n    function addHolderRole(bytes32 role, address nft) public onlyOwner {\\n        _nfts[role] = nft;\\n    }\\n\\n    modifier onlyHolder(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    error DoesNotHold();\\n\\n    function _checkRole(bytes32 role) internal view virtual {\\n        if (IERC721(_nfts[role]).balanceOf(_msgSender()) == 0) revert DoesNotHold();\\n    }\\n}\\n\",\"keccak256\":\"0x662d3256db4e31e0ae8be5fc19eda98837c0d2d175473de2dfd8b83391ce783c\",\"license\":\"MIT\"},\"src/contracts/Protocol/modifiers/OnlyAPI.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract OnlyApi is Ownable {\\n    address public questionApi;\\n\\n    // ------------------------------- Setter\\n    /**\\n     * @notice Sets the address of the question API.\\n     * @param _newApi The new address of the question API.\\n     */\\n    function setQuestionApi(address _newApi) external onlyOwner {\\n        questionApi = _newApi;\\n    }\\n\\n    // ------------------------ Modifiers\\n    modifier onlyApi() {\\n        if (_msgSender() != questionApi) revert NotTheApi();\\n        _;\\n    }\\n\\n    // ------------------------ Errors\\n    error NotTheApi();\\n}\\n\",\"keccak256\":\"0x0681de2966fa03720603c0e7361f8ee5d887b9526d074ba9c14dbf3b80978934\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001e1438038062001e1483398181016040528101906200003791906200029b565b620000576200004b6200016560201b60201c565b6200016d60201b60201c565b83600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050506200030d565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002638262000236565b9050919050565b620002758162000256565b81146200028157600080fd5b50565b60008151905062000295816200026a565b92915050565b60008060008060808587031215620002b857620002b762000231565b5b6000620002c88782880162000284565b9450506020620002db8782880162000284565b9350506040620002ee8782880162000284565b9250506060620003018782880162000284565b91505092959194509250565b611af7806200031d6000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c806371959d69116100a2578063bc41029711610071578063bc410297146102a1578063e9d8c381146102bd578063ec8f6777146102db578063f0f64201146102f7578063f2fde38b1461031357610116565b806371959d69146102075780638da5cb5b1461023757806398c9f1df146102555780639a6110b41461028557610116565b8063211e3734116100e9578063211e37341461018d578063314c3e98146101a9578063447e52a0146101c55780636ee5a1b1146101e1578063715018a6146101fd57610116565b8063072d8e7e1461011b5780630ef4b5311461013757806315da65a5146101535780631919bcd614610171575b600080fd5b610135600480360381019061013091906114f6565b61032f565b005b610151600480360381019061014c91906114f6565b610400565b005b61015b610577565b6040516101689190611532565b60405180910390f35b61018b600480360381019061018691906115ab565b61057d565b005b6101a760048036038101906101a291906115d8565b61063d565b005b6101c360048036038101906101be919061164e565b6106d9565b005b6101df60048036038101906101da91906116f3565b6107ab565b005b6101fb60048036038101906101f691906114f6565b610841565b005b6102056108da565b005b610221600480360381019061021c9190611753565b610962565b60405161022e9190611532565b60405180910390f35b61023f610bd8565b60405161024c91906117c2565b60405180910390f35b61026f600480360381019061026a9190611753565b610c01565b60405161027c9190611532565b60405180910390f35b61029f600480360381019061029a91906114f6565b610e93565b005b6102bb60048036038101906102b691906115ab565b610f9f565b005b6102c561105f565b6040516102d291906117ec565b60405180910390f35b6102f560048036038101906102f091906115ab565b611083565b005b610311600480360381019061030c91906115ab565b611143565b005b61032d600480360381019061032891906115ab565b611203565b005b6000600190506001811461036f576040517f1aa2b4b200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cc4ef119836040518263ffffffff1660e01b81526004016103ca9190611532565b600060405180830381600087803b1580156103e457600080fd5b505af11580156103f8573d6000803e3d6000fd5b505050505050565b6002600481111561041457610413611807565b5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166344c9af28836040518263ffffffff1660e01b815260040161046f9190611532565b602060405180830381865afa15801561048c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b0919061184b565b146104e7576040517f3b03644900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663379607f5826040518263ffffffff1660e01b81526004016105429190611532565b600060405180830381600087803b15801561055c57600080fd5b505af1158015610570573d6000803e3d6000fd5b5050505050565b60065481565b6105856112fa565b73ffffffffffffffffffffffffffffffffffffffff166105a3610bd8565b73ffffffffffffffffffffffffffffffffffffffff16146105f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f0906118d5565b60405180910390fd5b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637644bd8f6106836112fa565b84846040518463ffffffff1660e01b81526004016106a3939291906118f5565b600060405180830381600087803b1580156106bd57600080fd5b505af11580156106d1573d6000803e3d6000fd5b505050505050565b6106e16112fa565b73ffffffffffffffffffffffffffffffffffffffff166106ff610bd8565b73ffffffffffffffffffffffffffffffffffffffff1614610755576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074c906118d5565b60405180910390fd5b806001600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166327cacb558484846040518463ffffffff1660e01b815260040161080a93929190611979565b600060405180830381600087803b15801561082457600080fd5b505af1158015610838573d6000803e3d6000fd5b50505050505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e78daa756108876112fa565b836040518363ffffffff1660e01b81526004016108a59291906119ab565b600060405180830381600087803b1580156108bf57600080fd5b505af11580156108d3573d6000803e3d6000fd5b5050505050565b6108e26112fa565b73ffffffffffffffffffffffffffffffffffffffff16610900610bd8565b73ffffffffffffffffffffffffffffffffffffffff1614610956576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094d906118d5565b60405180910390fd5b6109606000611302565b565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dab6dbce6109ab6112fa565b87876040518463ffffffff1660e01b81526004016109cb939291906119d4565b6020604051808303816000875af11580156109ea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0e919061184b565b9050600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663186a8131610a566112fa565b836040518363ffffffff1660e01b8152600401610a749291906119ab565b600060405180830381600087803b158015610a8e57600080fd5b505af1158015610aa2573d6000803e3d6000fd5b50505050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d257d16d8287876040518463ffffffff1660e01b8152600401610b0593929190611979565b600060405180830381600087803b158015610b1f57600080fd5b505af1158015610b33573d6000803e3d6000fd5b50505050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663701776f782856040518363ffffffff1660e01b8152600401610b94929190611a06565b600060405180830381600087803b158015610bae57600080fd5b505af1158015610bc2573d6000803e3d6000fd5b5050505080600681905550809150509392505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60007f104852406e94df2c5112860c28c2d2e43c02e322bc0cf95e2d0159faf296d7fb610c2d816113c6565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dab6dbce610c756112fa565b88886040518463ffffffff1660e01b8152600401610c95939291906119d4565b6020604051808303816000875af1158015610cb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd8919061184b565b9050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d257d16d8288886040518463ffffffff1660e01b8152600401610d3993929190611979565b600060405180830381600087803b158015610d5357600080fd5b505af1158015610d67573d6000803e3d6000fd5b50505050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663701776f782866040518363ffffffff1660e01b8152600401610dc8929190611a06565b600060405180830381600087803b158015610de257600080fd5b505af1158015610df6573d6000803e3d6000fd5b50505050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cc4ef119826040518263ffffffff1660e01b8152600401610e559190611532565b600060405180830381600087803b158015610e6f57600080fd5b505af1158015610e83573d6000803e3d6000fd5b5050505080925050509392505050565b610e9b6112fa565b73ffffffffffffffffffffffffffffffffffffffff16610eb9610bd8565b73ffffffffffffffffffffffffffffffffffffffff1614610f0f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f06906118d5565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ecf24b31826040518263ffffffff1660e01b8152600401610f6a9190611532565b600060405180830381600087803b158015610f8457600080fd5b505af1158015610f98573d6000803e3d6000fd5b5050505050565b610fa76112fa565b73ffffffffffffffffffffffffffffffffffffffff16610fc5610bd8565b73ffffffffffffffffffffffffffffffffffffffff161461101b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611012906118d5565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b7f104852406e94df2c5112860c28c2d2e43c02e322bc0cf95e2d0159faf296d7fb81565b61108b6112fa565b73ffffffffffffffffffffffffffffffffffffffff166110a9610bd8565b73ffffffffffffffffffffffffffffffffffffffff16146110ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110f6906118d5565b60405180910390fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61114b6112fa565b73ffffffffffffffffffffffffffffffffffffffff16611169610bd8565b73ffffffffffffffffffffffffffffffffffffffff16146111bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111b6906118d5565b60405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61120b6112fa565b73ffffffffffffffffffffffffffffffffffffffff16611229610bd8565b73ffffffffffffffffffffffffffffffffffffffff161461127f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611276906118d5565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036112ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112e590611aa1565b60405180910390fd5b6112f781611302565b50565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60006001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a0823161141f6112fa565b6040518263ffffffff1660e01b815260040161143b91906117c2565b602060405180830381865afa158015611458573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061147c919061184b565b036114b3576040517fbddc845600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b600080fd5b600080fd5b6000819050919050565b6114d3816114c0565b81146114de57600080fd5b50565b6000813590506114f0816114ca565b92915050565b60006020828403121561150c5761150b6114b6565b5b600061151a848285016114e1565b91505092915050565b61152c816114c0565b82525050565b60006020820190506115476000830184611523565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006115788261154d565b9050919050565b6115888161156d565b811461159357600080fd5b50565b6000813590506115a58161157f565b92915050565b6000602082840312156115c1576115c06114b6565b5b60006115cf84828501611596565b91505092915050565b600080604083850312156115ef576115ee6114b6565b5b60006115fd858286016114e1565b925050602061160e858286016114e1565b9150509250929050565b6000819050919050565b61162b81611618565b811461163657600080fd5b50565b60008135905061164881611622565b92915050565b60008060408385031215611665576116646114b6565b5b600061167385828601611639565b925050602061168485828601611596565b9150509250929050565b600080fd5b600080fd5b600080fd5b60008083601f8401126116b3576116b261168e565b5b8235905067ffffffffffffffff8111156116d0576116cf611693565b5b6020830191508360018202830111156116ec576116eb611698565b5b9250929050565b60008060006040848603121561170c5761170b6114b6565b5b600061171a868287016114e1565b935050602084013567ffffffffffffffff81111561173b5761173a6114bb565b5b6117478682870161169d565b92509250509250925092565b60008060006040848603121561176c5761176b6114b6565b5b600084013567ffffffffffffffff81111561178a576117896114bb565b5b6117968682870161169d565b935093505060206117a9868287016114e1565b9150509250925092565b6117bc8161156d565b82525050565b60006020820190506117d760008301846117b3565b92915050565b6117e681611618565b82525050565b600060208201905061180160008301846117dd565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600081519050611845816114ca565b92915050565b600060208284031215611861576118606114b6565b5b600061186f84828501611836565b91505092915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006118bf602083611878565b91506118ca82611889565b602082019050919050565b600060208201905081810360008301526118ee816118b2565b9050919050565b600060608201905061190a60008301866117b3565b6119176020830185611523565b6119246040830184611523565b949350505050565b82818337600083830152505050565b6000601f19601f8301169050919050565b60006119588385611878565b935061196583858461192c565b61196e8361193b565b840190509392505050565b600060408201905061198e6000830186611523565b81810360208301526119a181848661194c565b9050949350505050565b60006040820190506119c060008301856117b3565b6119cd6020830184611523565b9392505050565b60006040820190506119e960008301866117b3565b81810360208301526119fc81848661194c565b9050949350505050565b6000604082019050611a1b6000830185611523565b611a286020830184611523565b9392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611a8b602683611878565b9150611a9682611a2f565b604082019050919050565b60006020820190508181036000830152611aba81611a7e565b905091905056fea2646970667358221220d1701725631fb2e123325d77da73cb02e4b8b62e4bec0bbeecc4d3e1e28ed44664736f6c634300080d0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createChallenge(string,uint256)": {
        "params": {
          "claimLimit": "The limit for the amount of people that can claim the challenge",
          "uri": "The IPFS hash of the challenge"
        },
        "returns": {
          "_0": "questionId The question id"
        }
      },
      "createQuestion(string,uint256)": {
        "params": {
          "claimLimit": "The limit for the amount of people that can claim the question",
          "uri": "The IPFS hash of the question"
        },
        "returns": {
          "_0": "The question id"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unvoteQuestion(uint256)": {
        "params": {
          "questionId": "The questionId of the question to upvote"
        }
      },
      "upvoteQuestion(uint256,uint256)": {
        "params": {
          "amount": "Metric amount to put behind the vote We can manipulate this very easily -- think of a way to make it secure",
          "questionId": "The questionId of the question to upvote"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createChallenge(string,uint256)": {
        "notice": "Directly creates a challenge, this is an optional feature for program managers that would like to create challenges directly (skipping the voting stage)."
      },
      "createQuestion(string,uint256)": {
        "notice": "Creates a question"
      },
      "unvoteQuestion(uint256)": {
        "notice": "Unvotes a question"
      },
      "upvoteQuestion(uint256,uint256)": {
        "notice": "Upvotes a question"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "src/contracts/Protocol/QuestionAPI.sol:QuestionAPI",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3294,
        "contract": "src/contracts/Protocol/QuestionAPI.sol:QuestionAPI",
        "label": "_nfts",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 2012,
        "contract": "src/contracts/Protocol/QuestionAPI.sol:QuestionAPI",
        "label": "_question",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(BountyQuestion)1823"
      },
      {
        "astId": 2015,
        "contract": "src/contracts/Protocol/QuestionAPI.sol:QuestionAPI",
        "label": "_questionStateController",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IQuestionStateController)3279"
      },
      {
        "astId": 2018,
        "contract": "src/contracts/Protocol/QuestionAPI.sol:QuestionAPI",
        "label": "_claimController",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IClaimController)3230"
      },
      {
        "astId": 2021,
        "contract": "src/contracts/Protocol/QuestionAPI.sol:QuestionAPI",
        "label": "_costController",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IActionCostController)3208"
      },
      {
        "astId": 2023,
        "contract": "src/contracts/Protocol/QuestionAPI.sol:QuestionAPI",
        "label": "currentQuestionId",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(BountyQuestion)1823": {
        "encoding": "inplace",
        "label": "contract BountyQuestion",
        "numberOfBytes": "20"
      },
      "t_contract(IActionCostController)3208": {
        "encoding": "inplace",
        "label": "contract IActionCostController",
        "numberOfBytes": "20"
      },
      "t_contract(IClaimController)3230": {
        "encoding": "inplace",
        "label": "contract IClaimController",
        "numberOfBytes": "20"
      },
      "t_contract(IQuestionStateController)3279": {
        "encoding": "inplace",
        "label": "contract IQuestionStateController",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}