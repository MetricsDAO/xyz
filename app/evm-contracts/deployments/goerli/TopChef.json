{
  "address": "0xCA73A2424e7dC720eD2cFb373b494D1c372FB689",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "metricTokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "DuplicateAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IndexDoesNotMatchAllocation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoClaimableRewardToWithdraw",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoRewardsToClaim",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RewardsInactive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SenderDoesNotRepresentGroup",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SenderNotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SharesNotGreaterThanZero",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "harvester",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "agIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Harvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "withdrawer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "agIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ACC_METRIC_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "accumulatedWithPrecision",
          "type": "uint256"
        }
      ],
      "name": "accumulatedMetricDividedByShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newShares",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "newAutoDistribute",
          "type": "bool"
        }
      ],
      "name": "addAllocationGroup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressExistence",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "areRewardsActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "agIndex",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllocationGroups",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "groupAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "shares",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "autodistribute",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "rewardDebt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimable",
              "type": "uint256"
            }
          ],
          "internalType": "struct TopChef.AllocationGroup[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastRewardBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLifeTimeShareValueEstimate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMetricPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMetricToken",
      "outputs": [
        {
          "internalType": "contract MetricToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalAllocationShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "agIndex",
          "type": "uint256"
        }
      ],
      "name": "harvest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvestAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "agIndex",
          "type": "uint256"
        }
      ],
      "name": "removeAllocationGroup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setLifetimeShareValue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "metricAmount",
          "type": "uint256"
        }
      ],
      "name": "setMetricPerBlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "metricTokenAddress",
          "type": "address"
        }
      ],
      "name": "setMetricToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "isOn",
          "type": "bool"
        }
      ],
      "name": "toggleRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateAccumulatedAllocations",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "groupAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "agIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "newAutoDistribute",
          "type": "bool"
        }
      ],
      "name": "updateAllocationGroup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "agIndex",
          "type": "uint256"
        }
      ],
      "name": "viewPendingClaims",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "agIndex",
          "type": "uint256"
        }
      ],
      "name": "viewPendingHarvest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "agIndex",
          "type": "uint256"
        }
      ],
      "name": "viewPendingRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x80889075996fdcc602b20660cf6240bd28635f21a52c7f28b5f676d62c8a55eb",
  "receipt": {
    "to": null,
    "from": "0x0F7494eE0831529fD676ADbc234f858e280AeAF0",
    "contractAddress": "0xCA73A2424e7dC720eD2cFb373b494D1c372FB689",
    "transactionIndex": 1,
    "gasUsed": "2382215",
    "logsBloom": "0x
    "blockHash": "0xf3ee6938183cbd4962d179495e50c73b78fd959130deb8f1d7ebfa2349aeb486",
    "transactionHash": "0x80889075996fdcc602b20660cf6240bd28635f21a52c7f28b5f676d62c8a55eb",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 7209510,
        "transactionHash": "0x80889075996fdcc602b20660cf6240bd28635f21a52c7f28b5f676d62c8a55eb",
        "address": "0xCA73A2424e7dC720eD2cFb373b494D1c372FB689",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000f7494ee0831529fd676adbc234f858e280aeaf0"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xf3ee6938183cbd4962d179495e50c73b78fd959130deb8f1d7ebfa2349aeb486"
      }
    ],
    "blockNumber": 7209510,
    "cumulativeGasUsed": "2541312",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x683BA8D87082ea1D09E18C4cA93B14dc17645051"
  ],
  "numDeployments": 1,
  "solcInputHash": "dd1ea32d5c9daca7fd078bba8a685995",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"metricTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DuplicateAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IndexDoesNotMatchAllocation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoClaimableRewardToWithdraw\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoRewardsToClaim\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardsInactive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderDoesNotRepresentGroup\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderNotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SharesNotGreaterThanZero\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"harvester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"agIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"agIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACC_METRIC_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"accumulatedWithPrecision\",\"type\":\"uint256\"}],\"name\":\"accumulatedMetricDividedByShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newShares\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"newAutoDistribute\",\"type\":\"bool\"}],\"name\":\"addAllocationGroup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressExistence\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"areRewardsActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agIndex\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllocationGroups\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"groupAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"autodistribute\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimable\",\"type\":\"uint256\"}],\"internalType\":\"struct TopChef.AllocationGroup[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastRewardBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLifeTimeShareValueEstimate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMetricPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMetricToken\",\"outputs\":[{\"internalType\":\"contract MetricToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalAllocationShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agIndex\",\"type\":\"uint256\"}],\"name\":\"harvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agIndex\",\"type\":\"uint256\"}],\"name\":\"removeAllocationGroup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setLifetimeShareValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"metricAmount\",\"type\":\"uint256\"}],\"name\":\"setMetricPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"metricTokenAddress\",\"type\":\"address\"}],\"name\":\"setMetricToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isOn\",\"type\":\"bool\"}],\"name\":\"toggleRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateAccumulatedAllocations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"groupAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"agIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"newAutoDistribute\",\"type\":\"bool\"}],\"name\":\"updateAllocationGroup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agIndex\",\"type\":\"uint256\"}],\"name\":\"viewPendingClaims\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agIndex\",\"type\":\"uint256\"}],\"name\":\"viewPendingHarvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agIndex\",\"type\":\"uint256\"}],\"name\":\"viewPendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/TopChef.sol\":\"TopChef\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xdadd41acb749920eccf40aeaa8d291adf9751399a7343561bad13e7a8d99be0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"src/contracts/Chef.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./MetricToken.sol\\\";\\n\\n// POSSIBLE FUTURE ITERATIONS\\n// TODO implement claim(address)\\n// TODO implement staking function\\n// TODO implement payable function\\n// TODO implement withdrawl function\\n// TODO implement updatedAccumulatedAllocations\\n\\n// TODO WE ADD THESE TO MAIN CHEF or should each contract have it's own\\n// TODO we make below more loosely coupled\\n// TODO viewPendingHarvest\\n// TODO viewPendingClaims\\n\\nabstract contract Chef is Ownable {\\n    uint256 private _metricPerBlock;\\n    uint256 public constant ACC_METRIC_PRECISION = 1e12;\\n\\n    bool private _rewardsActive;\\n    uint256 private _lastRewardBlock;\\n    uint256 private _lifetimeShareValue;\\n    uint256 private _totalAllocShares;\\n\\n    MetricToken private metric;\\n\\n    //------------------------------------------------------Setters\\n\\n    function toggleRewards(bool isOn) public onlyOwner {\\n        _rewardsActive = isOn;\\n        setLastRewardBlock(block.number);\\n    }\\n\\n    function setMetricPerBlock(uint256 metricAmount) public virtual onlyOwner {\\n        _metricPerBlock = metricAmount * 10**18;\\n    }\\n\\n    function setLastRewardBlock(uint256 blockNumber) internal virtual {\\n        _lastRewardBlock = blockNumber;\\n    }\\n\\n    function setMetricToken(address metricTokenAddress) public virtual onlyOwner {\\n        metric = MetricToken(metricTokenAddress);\\n    }\\n\\n    function setLifetimeShareValue() public virtual {\\n        uint256 accumulated = getAccumulated();\\n        uint256 accumulatedWithMetricPrecision = getAcculatedWithmetricPrecision(accumulated);\\n        _lifetimeShareValue = _lifetimeShareValue + accumulatedMetricDividedByShares(accumulatedWithMetricPrecision);\\n    }\\n\\n    function getLifeTimeShareValueEstimate() public view virtual returns (uint256) {\\n        uint256 accumulated = getAccumulated();\\n        uint256 accumulatedWithMetricPrecision = getAcculatedWithmetricPrecision(accumulated);\\n        uint256 lifetimesharevalue = getLifetimeShareValue();\\n        return lifetimesharevalue + accumulatedMetricDividedByShares(accumulatedWithMetricPrecision);\\n    }\\n\\n    function addTotalAllocShares(uint256 shares) internal virtual {\\n        _totalAllocShares = _totalAllocShares + shares;\\n    }\\n\\n    function addTotalAllocShares(uint256 oldShares, uint256 newShares) internal virtual {\\n        _totalAllocShares = _totalAllocShares - oldShares + newShares;\\n    }\\n\\n    function removeAllocShares(uint256 oldShares) internal virtual {\\n        _totalAllocShares = _totalAllocShares - oldShares;\\n    }\\n\\n    //------------------------------------------------------Getters\\n\\n    function getMetricPerBlock() public view virtual returns (uint256) {\\n        return _metricPerBlock;\\n    }\\n\\n    function getLastRewardBlock() public view virtual returns (uint256) {\\n        return _lastRewardBlock;\\n    }\\n\\n    function areRewardsActive() public view virtual returns (bool) {\\n        return _rewardsActive;\\n    }\\n\\n    function getAccumulated() internal view virtual returns (uint256) {\\n        uint256 blocksSince = block.number - getLastRewardBlock();\\n        return blocksSince * getMetricPerBlock();\\n    }\\n\\n    function getAcculatedWithmetricPrecision(uint256 accumulated) internal view virtual returns (uint256) {\\n        return accumulated * ACC_METRIC_PRECISION;\\n    }\\n\\n    function getTotalAllocationShares() public view returns (uint256) {\\n        return _totalAllocShares;\\n    }\\n\\n    function getLifetimeShareValue() internal view returns (uint256) {\\n        return _lifetimeShareValue;\\n    }\\n\\n    function accumulatedMetricDividedByShares(uint256 accumulatedWithPrecision) public view returns (uint256) {\\n        return accumulatedWithPrecision / getTotalAllocationShares();\\n    }\\n\\n    function getMetricToken() public view returns (MetricToken) {\\n        return metric;\\n    }\\n\\n    //------------------------------------------------------Support Functions\\n\\n    mapping(address => bool) public addressExistence;\\n    modifier nonDuplicated(address _address) {\\n        if (addressExistence[_address] == true) revert DuplicateAddress();\\n        addressExistence[_address] = true;\\n        _;\\n    }\\n\\n    //------------------------------------------------------Errors\\n    error DuplicateAddress();\\n\\n    //------------------------------------------------------Events\\n    event Harvest(address harvester, uint256 agIndex, uint256 amount);\\n    event Withdraw(address withdrawer, uint256 agIndex, uint256 amount);\\n}\\n\",\"keccak256\":\"0x2a9d47d14bce285cb4982c4d536d6980c658d49b3803dec93de14ec557e6d09e\",\"license\":\"Unlicense\"},\"src/contracts/MetricToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n/// @custom:security-contact contracts@metricsdao.com\\ncontract MetricToken is ERC20 {\\n    constructor() ERC20(\\\"METRIC\\\", \\\"METRIC\\\") {\\n        _mint(_msgSender(), 1000000000 * 10**decimals());\\n    }\\n}\\n\",\"keccak256\":\"0x015317ec77ea633af5f2af9cde22891298225bbd33fc6309c06d87579920329b\",\"license\":\"MIT\"},\"src/contracts/TopChef.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./Chef.sol\\\";\\n\\ncontract TopChef is Chef {\\n    AllocationGroup[] private _allocations;\\n\\n    constructor(address metricTokenAddress) {\\n        setMetricToken(metricTokenAddress);\\n        setMetricPerBlock(4);\\n        toggleRewards(false); // locking contract initially\\n    }\\n\\n    //------------------------------------------------------Manage Allocation Groups\\n\\n    function addAllocationGroup(\\n        address newAddress,\\n        uint256 newShares,\\n        bool newAutoDistribute\\n    ) external onlyOwner nonDuplicated(newAddress) {\\n        // Checks\\n        if (!(newShares > 0)) revert SharesNotGreaterThanZero();\\n        if (areRewardsActive() && getTotalAllocationShares() > 0) {\\n            updateAccumulatedAllocations();\\n        }\\n\\n        // Effects\\n        AllocationGroup memory group = AllocationGroup({\\n            groupAddress: newAddress,\\n            shares: newShares,\\n            autodistribute: newAutoDistribute,\\n            rewardDebt: (newShares * getLifetimeShareValue()) / ACC_METRIC_PRECISION,\\n            claimable: 0\\n        });\\n\\n        _allocations.push(group);\\n        addTotalAllocShares(group.shares);\\n    }\\n\\n    // TODO do we actually need to do this?\\n    function updateAllocationGroup(\\n        address groupAddress,\\n        uint256 agIndex,\\n        uint256 shares,\\n        bool newAutoDistribute\\n    ) public activeRewards onlyOwner {\\n        // Checks (modifier)\\n\\n        // Effects\\n        harvest(agIndex);\\n        addTotalAllocShares(_allocations[agIndex].shares, shares);\\n        _allocations[agIndex].groupAddress = groupAddress;\\n        _allocations[agIndex].shares = shares;\\n        _allocations[agIndex].autodistribute = newAutoDistribute;\\n    }\\n\\n    function removeAllocationGroup(uint256 agIndex) external activeRewards onlyOwner {\\n        // Checks\\n        if (agIndex >= _allocations.length) revert IndexDoesNotMatchAllocation();\\n\\n        // Effects\\n        _allocations[agIndex].autodistribute = true;\\n        harvest(agIndex);\\n\\n        removeAllocShares(_allocations[agIndex].shares);\\n\\n        _allocations[agIndex] = _allocations[_allocations.length - 1];\\n        _allocations.pop();\\n    }\\n\\n    //------------------------------------------------------Getters\\n\\n    function getAllocationGroups() public view returns (AllocationGroup[] memory) {\\n        return _allocations;\\n    }\\n\\n    //------------------------------------------------------Distribution\\n\\n    function viewPendingHarvest(uint256 agIndex) public view returns (uint256) {\\n        AllocationGroup memory group = _allocations[agIndex];\\n\\n        if (areRewardsActive()) {\\n            return ((group.shares * (getLifeTimeShareValueEstimate())) / ACC_METRIC_PRECISION) - group.rewardDebt;\\n        } else {\\n            return (group.shares * (getLifetimeShareValue())) / ACC_METRIC_PRECISION - group.rewardDebt;\\n        }\\n    }\\n\\n    function viewPendingClaims(uint256 agIndex) public view returns (uint256) {\\n        AllocationGroup memory group = _allocations[agIndex];\\n\\n        return group.claimable;\\n    }\\n\\n    function viewPendingRewards(uint256 agIndex) public view returns (uint256) {\\n        AllocationGroup memory group = _allocations[agIndex];\\n        uint256 claimable = group.claimable;\\n        uint256 harvestable = viewPendingHarvest(agIndex);\\n        return claimable + harvestable;\\n    }\\n\\n    function updateAccumulatedAllocations() public activeRewards {\\n        if (block.number <= getLastRewardBlock()) {\\n            return;\\n        }\\n\\n        // TODO confirm budget is correct with assertions\\n        // Not sure we can project emission rate over X years?\\n        // Not entirely sure how to handle this, but we can at least try to make it work.\\n        // ^^ will help with fuzz testing\\n\\n        setLifetimeShareValue();\\n        setLastRewardBlock(block.number);\\n    }\\n\\n    // TODO when we implement the emission rate, ensure this function is called before update the rate\\n    // if we don't, then a user's rewards pre-emission change will incorrectly reflect the new rate\\n    function harvestAll() external onlyOwner {\\n        for (uint8 i = 0; i < _allocations.length; ++i) {\\n            harvest(i);\\n        }\\n    }\\n\\n    function harvest(uint256 agIndex) public activeRewards returns (uint256) {\\n        // Checks\\n        AllocationGroup storage group = _allocations[agIndex];\\n        // TODO do we want a backup in case a group looses access to their wallet\\n\\n        // Effects\\n        updateAccumulatedAllocations();\\n        uint256 toClaim = ((group.shares * (getLifetimeShareValue())) / ACC_METRIC_PRECISION) - group.rewardDebt;\\n\\n        group.rewardDebt = group.rewardDebt + toClaim;\\n        uint256 totalClaimable = group.claimable + toClaim;\\n        group.claimable = totalClaimable;\\n\\n        emit Harvest(msg.sender, agIndex, toClaim);\\n        return totalClaimable;\\n    }\\n\\n    function claim(uint256 agIndex) external {\\n        AllocationGroup storage group = _allocations[agIndex];\\n        if (!(msg.sender == group.groupAddress)) revert SenderNotOwner();\\n        uint256 claimable = harvest(agIndex);\\n        if (claimable == 0) revert NoRewardsToClaim();\\n        group.claimable = 0;\\n        SafeERC20.safeTransfer(IERC20(getMetricToken()), msg.sender, claimable);\\n        emit Withdraw(msg.sender, agIndex, claimable);\\n    }\\n\\n    //------------------------------------------------------Structs\\n\\n    struct AllocationGroup {\\n        address groupAddress;\\n        uint256 shares;\\n        bool autodistribute;\\n        uint256 rewardDebt; // keeps track of how much the user is owed or has been credited already\\n        uint256 claimable;\\n    }\\n\\n    //------------------------------------------------------ Errors\\n    error SharesNotGreaterThanZero();\\n    error IndexDoesNotMatchAllocation();\\n    error RewardsInactive();\\n    error SenderNotOwner();\\n    error NoClaimableRewardToWithdraw();\\n    error SenderDoesNotRepresentGroup();\\n    error NoRewardsToClaim();\\n\\n    //------------------------------------------------------ Modifiers\\n    modifier activeRewards() {\\n        if (!(areRewardsActive())) revert RewardsInactive();\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xe1f62576d36c39dd3532ea50206f8894169e3b85bbc8cd0e3d5277def54837e6\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002dda38038062002dda83398181016040528101906200003791906200043a565b620000576200004b6200009360201b60201c565b6200009b60201b60201c565b62000068816200015f60201b60201c565b6200007a60046200023260201b60201c565b6200008c6000620002e060201b60201c565b5062000589565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6200016f6200009360201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16620001956200039d60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff1614620001ee576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001e590620004cd565b60405180910390fd5b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b620002426200009360201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16620002686200039d60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff1614620002c1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002b890620004cd565b60405180910390fd5b670de0b6b3a764000081620002d7919062000528565b60018190555050565b620002f06200009360201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16620003166200039d60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16146200036f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200036690620004cd565b60405180910390fd5b80600260006101000a81548160ff0219169083151502179055506200039a43620003c660201b60201c565b50565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b8060038190555050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200040282620003d5565b9050919050565b6200041481620003f5565b81146200042057600080fd5b50565b600081519050620004348162000409565b92915050565b600060208284031215620004535762000452620003d0565b5b6000620004638482850162000423565b91505092915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000620004b56020836200046c565b9150620004c2826200047d565b602082019050919050565b60006020820190508181036000830152620004e881620004a6565b9050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006200053582620004ef565b91506200054283620004ef565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156200057e576200057d620004f9565b5b828202905092915050565b61284180620005996000396000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c806377d22d1a116100f9578063a8e2a38b11610097578063d8009bb611610071578063d8009bb61461044a578063ddc632621461047a578063f2fde38b146104aa578063f33c9baa146104c6576101a9565b8063a8e2a38b146103f0578063bf62bee61461040e578063c5d836d91461042c576101a9565b80638da5cb5b116100d35780638da5cb5b1461037c5780638ed955b91461039a578063945c5287146103a4578063994cd567146103c0576101a9565b806377d22d1a146103385780638b4a4ed5146103425780638c19ec8b14610360576101a9565b80635aa01b04116101665780635f9b1bb5116101405780635f9b1bb5146102ea5780636336694b146102f45780636ac49a8914610310578063715018a61461032e576101a9565b80635aa01b04146102805780635cae9a481461029c5780635e175713146102cc576101a9565b80630419ba05146101ae5780631cd8f0fa146101cc5780631e718d27146101e857806322abbddf14610218578063259e787314610248578063379607f514610264575b600080fd5b6101b66104e4565b6040516101c39190611d64565b60405180910390f35b6101e660048036038101906101e19190611db0565b610526565b005b61020260048036038101906101fd9190611db0565b6105bf565b60405161020f9190611d64565b60405180910390f35b610232600480360381019061022d9190611e3b565b6105db565b60405161023f9190611e83565b60405180910390f35b610262600480360381019061025d9190611eca565b6105fb565b005b61027e60048036038101906102799190611db0565b6108ea565b005b61029a60048036038101906102959190611f1d565b610a3c565b005b6102b660048036038101906102b19190611db0565b610c00565b6040516102c39190611d64565b60405180910390f35b6102d4610cce565b6040516102e19190611d64565b60405180910390f35b6102f2610cd8565b005b61030e60048036038101906103099190611db0565b610d11565b005b61031861100a565b6040516103259190611d64565b60405180910390f35b610336611013565b005b61034061109b565b005b61034a6110fc565b60405161035791906120c8565b60405180910390f35b61037a600480360381019061037591906120ea565b6111ea565b005b61038461128c565b6040516103919190612126565b60405180910390f35b6103a26112b5565b005b6103be60048036038101906103b99190611e3b565b611365565b005b6103da60048036038101906103d59190611db0565b611425565b6040516103e79190611d64565b60405180910390f35b6103f8611570565b60405161040591906121a0565b60405180910390f35b61041661159a565b6040516104239190611d64565b60405180910390f35b6104346115a4565b6040516104419190611d64565b60405180910390f35b610464600480360381019061045f9190611db0565b6115ae565b6040516104719190611d64565b60405180910390f35b610494600480360381019061048f9190611db0565b61169b565b6040516104a19190611d64565b60405180910390f35b6104c460048036038101906104bf9190611e3b565b6117be565b005b6104ce6118b5565b6040516104db9190611e83565b60405180910390f35b6000806104ef6118cc565b905060006104fc826118fd565b90506000610508611917565b9050610513826105bf565b8161051e91906121ea565b935050505090565b61052e611921565b73ffffffffffffffffffffffffffffffffffffffff1661054c61128c565b73ffffffffffffffffffffffffffffffffffffffff16146105a2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105999061229d565b60405180910390fd5b670de0b6b3a7640000816105b691906122bd565b60018190555050565b60006105c9610cce565b826105d49190612346565b9050919050565b60076020528060005260406000206000915054906101000a900460ff1681565b610603611921565b73ffffffffffffffffffffffffffffffffffffffff1661062161128c565b73ffffffffffffffffffffffffffffffffffffffff1614610677576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066e9061229d565b60405180910390fd5b8260011515600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151503610702576040517f0a47c55800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060008311610794576040517ff915581500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61079c6118b5565b80156107af575060006107ad610cce565b115b156107bd576107bc61109b565b5b60006040518060a001604052808673ffffffffffffffffffffffffffffffffffffffff168152602001858152602001841515815260200164e8d4a51000610802611917565b8761080d91906122bd565b6108179190612346565b815260200160008152509050600881908060018154018082558091505060019003906000526020600020906005020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020160006101000a81548160ff021916908315150217905550606082015181600301556080820151816004015550506108e38160200151611929565b5050505050565b600060088281548110610900576108ff612377565b5b906000526020600020906005020190508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610999576040517f19494c8a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006109a48361169b565b9050600081036109e0576040517f73380d9900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600082600401819055506109fc6109f5611570565b3383611940565b7ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568338483604051610a2f939291906123a6565b60405180910390a1505050565b610a446118b5565b610a7a576040517f236582f100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610a82611921565b73ffffffffffffffffffffffffffffffffffffffff16610aa061128c565b73ffffffffffffffffffffffffffffffffffffffff1614610af6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aed9061229d565b60405180910390fd5b610aff8361169b565b50610b2f60088481548110610b1757610b16612377565b5b906000526020600020906005020160010154836119c6565b8360088481548110610b4457610b43612377565b5b906000526020600020906005020160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160088481548110610ba857610ba7612377565b5b9060005260206000209060050201600101819055508060088481548110610bd257610bd1612377565b5b906000526020600020906005020160020160006101000a81548160ff02191690831515021790555050505050565b60008060088381548110610c1757610c16612377565b5b90600052602060002090600502016040518060a00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820160009054906101000a900460ff161515151581526020016003820154815260200160048201548152505090508060800151915050919050565b6000600554905090565b6000610ce26118cc565b90506000610cef826118fd565b9050610cfa816105bf565b600454610d0791906121ea565b6004819055505050565b610d196118b5565b610d4f576040517f236582f100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610d57611921565b73ffffffffffffffffffffffffffffffffffffffff16610d7561128c565b73ffffffffffffffffffffffffffffffffffffffff1614610dcb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dc29061229d565b60405180910390fd5b6008805490508110610e09576040517fd0333a0600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160088281548110610e1f57610e1e612377565b5b906000526020600020906005020160020160006101000a81548160ff021916908315150217905550610e508161169b565b50610e7f60088281548110610e6857610e67612377565b5b9060005260206000209060050201600101546119e9565b60086001600880549050610e9391906123dd565b81548110610ea457610ea3612377565b5b906000526020600020906005020160088281548110610ec657610ec5612377565b5b90600052602060002090600502016000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600182015481600101556002820160009054906101000a900460ff168160020160006101000a81548160ff02191690831515021790555060038201548160030155600482015481600401559050506008805480610f9b57610f9a612411565b5b6001900381819060005260206000209060050201600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560018201600090556002820160006101000a81549060ff0219169055600382016000905560048201600090555050905550565b64e8d4a5100081565b61101b611921565b73ffffffffffffffffffffffffffffffffffffffff1661103961128c565b73ffffffffffffffffffffffffffffffffffffffff161461108f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110869061229d565b60405180910390fd5b6110996000611a00565b565b6110a36118b5565b6110d9576040517f236582f100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6110e161159a565b4311156110fa576110f0610cd8565b6110f943611ac4565b5b565b60606008805480602002602001604051908101604052809291908181526020016000905b828210156111e157838290600052602060002090600502016040518060a00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820160009054906101000a900460ff161515151581526020016003820154815260200160048201548152505081526020019060010190611120565b50505050905090565b6111f2611921565b73ffffffffffffffffffffffffffffffffffffffff1661121061128c565b73ffffffffffffffffffffffffffffffffffffffff1614611266576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161125d9061229d565b60405180910390fd5b80600260006101000a81548160ff02191690831515021790555061128943611ac4565b50565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6112bd611921565b73ffffffffffffffffffffffffffffffffffffffff166112db61128c565b73ffffffffffffffffffffffffffffffffffffffff1614611331576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113289061229d565b60405180910390fd5b60005b6008805490508160ff161015611362576113508160ff1661169b565b508061135b9061244d565b9050611334565b50565b61136d611921565b73ffffffffffffffffffffffffffffffffffffffff1661138b61128c565b73ffffffffffffffffffffffffffffffffffffffff16146113e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113d89061229d565b60405180910390fd5b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000806008838154811061143c5761143b612377565b5b90600052602060002090600502016040518060a00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820160009054906101000a900460ff161515151581526020016003820154815260200160048201548152505090506114ee6118b5565b1561153157806060015164e8d4a510006115066104e4565b836020015161151591906122bd565b61151f9190612346565b61152991906123dd565b91505061156b565b806060015164e8d4a51000611544611917565b836020015161155391906122bd565b61155d9190612346565b61156791906123dd565b9150505b919050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600354905090565b6000600154905090565b600080600883815481106115c5576115c4612377565b5b90600052602060002090600502016040518060a00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820160009054906101000a900460ff16151515158152602001600382015481526020016004820154815250509050600081608001519050600061168385611425565b9050808261169191906121ea565b9350505050919050565b60006116a56118b5565b6116db576040517f236582f100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600883815481106116f1576116f0612377565b5b9060005260206000209060050201905061170961109b565b6000816003015464e8d4a5100061171e611917565b846001015461172d91906122bd565b6117379190612346565b61174191906123dd565b905080826003015461175391906121ea565b8260030181905550600081836004015461176d91906121ea565b90508083600401819055507f71bab65ced2e5750775a0613be067df48ef06cf92a496ebf7663ae06609249543386846040516117ab939291906123a6565b60405180910390a1809350505050919050565b6117c6611921565b73ffffffffffffffffffffffffffffffffffffffff166117e461128c565b73ffffffffffffffffffffffffffffffffffffffff161461183a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118319061229d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036118a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118a0906124e8565b60405180910390fd5b6118b281611a00565b50565b6000600260009054906101000a900460ff16905090565b6000806118d761159a565b436118e291906123dd565b90506118ec6115a4565b816118f791906122bd565b91505090565b600064e8d4a510008261191091906122bd565b9050919050565b6000600454905090565b600033905090565b8060055461193791906121ea565b60058190555050565b6119c18363a9059cbb60e01b848460405160240161195f929190612508565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611ace565b505050565b80826005546119d591906123dd565b6119df91906121ea565b6005819055505050565b806005546119f791906123dd565b60058190555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8060038190555050565b6000611b30826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611b959092919063ffffffff16565b9050600081511115611b905780806020019051810190611b509190612546565b611b8f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b86906125e5565b60405180910390fd5b5b505050565b6060611ba48484600085611bad565b90509392505050565b606082471015611bf2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611be990612677565b60405180910390fd5b611bfb85611cc1565b611c3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c31906126e3565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611c63919061277d565b60006040518083038185875af1925050503d8060008114611ca0576040519150601f19603f3d011682016040523d82523d6000602084013e611ca5565b606091505b5091509150611cb5828286611ce4565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60608315611cf457829050611d44565b600083511115611d075782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d3b91906127e9565b60405180910390fd5b9392505050565b6000819050919050565b611d5e81611d4b565b82525050565b6000602082019050611d796000830184611d55565b92915050565b600080fd5b611d8d81611d4b565b8114611d9857600080fd5b50565b600081359050611daa81611d84565b92915050565b600060208284031215611dc657611dc5611d7f565b5b6000611dd484828501611d9b565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611e0882611ddd565b9050919050565b611e1881611dfd565b8114611e2357600080fd5b50565b600081359050611e3581611e0f565b92915050565b600060208284031215611e5157611e50611d7f565b5b6000611e5f84828501611e26565b91505092915050565b60008115159050919050565b611e7d81611e68565b82525050565b6000602082019050611e986000830184611e74565b92915050565b611ea781611e68565b8114611eb257600080fd5b50565b600081359050611ec481611e9e565b92915050565b600080600060608486031215611ee357611ee2611d7f565b5b6000611ef186828701611e26565b9350506020611f0286828701611d9b565b9250506040611f1386828701611eb5565b9150509250925092565b60008060008060808587031215611f3757611f36611d7f565b5b6000611f4587828801611e26565b9450506020611f5687828801611d9b565b9350506040611f6787828801611d9b565b9250506060611f7887828801611eb5565b91505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611fb981611dfd565b82525050565b611fc881611d4b565b82525050565b611fd781611e68565b82525050565b60a082016000820151611ff36000850182611fb0565b5060208201516120066020850182611fbf565b5060408201516120196040850182611fce565b50606082015161202c6060850182611fbf565b50608082015161203f6080850182611fbf565b50505050565b60006120518383611fdd565b60a08301905092915050565b6000602082019050919050565b600061207582611f84565b61207f8185611f8f565b935061208a83611fa0565b8060005b838110156120bb5781516120a28882612045565b97506120ad8361205d565b92505060018101905061208e565b5085935050505092915050565b600060208201905081810360008301526120e2818461206a565b905092915050565b600060208284031215612100576120ff611d7f565b5b600061210e84828501611eb5565b91505092915050565b61212081611dfd565b82525050565b600060208201905061213b6000830184612117565b92915050565b6000819050919050565b600061216661216161215c84611ddd565b612141565b611ddd565b9050919050565b60006121788261214b565b9050919050565b600061218a8261216d565b9050919050565b61219a8161217f565b82525050565b60006020820190506121b56000830184612191565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006121f582611d4b565b915061220083611d4b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612235576122346121bb565b5b828201905092915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612287602083612240565b915061229282612251565b602082019050919050565b600060208201905081810360008301526122b68161227a565b9050919050565b60006122c882611d4b565b91506122d383611d4b565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561230c5761230b6121bb565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061235182611d4b565b915061235c83611d4b565b92508261236c5761236b612317565b5b828204905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006060820190506123bb6000830186612117565b6123c86020830185611d55565b6123d56040830184611d55565b949350505050565b60006123e882611d4b565b91506123f383611d4b565b925082821015612406576124056121bb565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600060ff82169050919050565b600061245882612440565b915060ff820361246b5761246a6121bb565b5b600182019050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006124d2602683612240565b91506124dd82612476565b604082019050919050565b60006020820190508181036000830152612501816124c5565b9050919050565b600060408201905061251d6000830185612117565b61252a6020830184611d55565b9392505050565b60008151905061254081611e9e565b92915050565b60006020828403121561255c5761255b611d7f565b5b600061256a84828501612531565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b60006125cf602a83612240565b91506125da82612573565b604082019050919050565b600060208201905081810360008301526125fe816125c2565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000612661602683612240565b915061266c82612605565b604082019050919050565b6000602082019050818103600083015261269081612654565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006126cd601d83612240565b91506126d882612697565b602082019050919050565b600060208201905081810360008301526126fc816126c0565b9050919050565b600081519050919050565b600081905092915050565b60005b8381101561273757808201518184015260208101905061271c565b83811115612746576000848401525b50505050565b600061275782612703565b612761818561270e565b9350612771818560208601612719565b80840191505092915050565b6000612789828461274c565b915081905092915050565b600081519050919050565b6000601f19601f8301169050919050565b60006127bb82612794565b6127c58185612240565b93506127d5818560208601612719565b6127de8161279f565b840191505092915050565b6000602082019050818103600083015261280381846127b0565b90509291505056fea26469706673582212200edffe192ff223827214920b04b9c753c19b6b9594595f978577d3108f7500c864736f6c634300080d0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "src/contracts/TopChef.sol:TopChef",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3340,
        "contract": "src/contracts/TopChef.sol:TopChef",
        "label": "_metricPerBlock",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3345,
        "contract": "src/contracts/TopChef.sol:TopChef",
        "label": "_rewardsActive",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 3347,
        "contract": "src/contracts/TopChef.sol:TopChef",
        "label": "_lastRewardBlock",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 3349,
        "contract": "src/contracts/TopChef.sol:TopChef",
        "label": "_lifetimeShareValue",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 3351,
        "contract": "src/contracts/TopChef.sol:TopChef",
        "label": "_totalAllocShares",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 3354,
        "contract": "src/contracts/TopChef.sol:TopChef",
        "label": "metric",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(MetricToken)3713"
      },
      {
        "astId": 3599,
        "contract": "src/contracts/TopChef.sol:TopChef",
        "label": "addressExistence",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 5396,
        "contract": "src/contracts/TopChef.sol:TopChef",
        "label": "_allocations",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_struct(AllocationGroup)5869_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(AllocationGroup)5869_storage)dyn_storage": {
        "base": "t_struct(AllocationGroup)5869_storage",
        "encoding": "dynamic_array",
        "label": "struct TopChef.AllocationGroup[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(MetricToken)3713": {
        "encoding": "inplace",
        "label": "contract MetricToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_struct(AllocationGroup)5869_storage": {
        "encoding": "inplace",
        "label": "struct TopChef.AllocationGroup",
        "members": [
          {
            "astId": 5860,
            "contract": "src/contracts/TopChef.sol:TopChef",
            "label": "groupAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5862,
            "contract": "src/contracts/TopChef.sol:TopChef",
            "label": "shares",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5864,
            "contract": "src/contracts/TopChef.sol:TopChef",
            "label": "autodistribute",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 5866,
            "contract": "src/contracts/TopChef.sol:TopChef",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5868,
            "contract": "src/contracts/TopChef.sol:TopChef",
            "label": "claimable",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}