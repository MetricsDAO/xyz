{
  "address": "0x2279B7A0a67DB372996a5FaB50D91eAA73d2eBe6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "metricTokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CannotRenounce",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DuplicateAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IndexDoesNotMatchAllocation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidShareAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RewardsAlreadyToggled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RewardsNotActive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SharesNotGreaterThanZero",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "groupAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "shares",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lifetimeEarnings",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimable",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct TopChef.AllocationGroup",
          "name": "",
          "type": "tuple"
        }
      ],
      "name": "AddGroup",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "harvester",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "agIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Harvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "groupAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "shares",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lifetimeEarnings",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimable",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct TopChef.AllocationGroup",
          "name": "",
          "type": "tuple"
        }
      ],
      "name": "RemoveGroup",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "groupAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "shares",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lifetimeEarnings",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimable",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct TopChef.AllocationGroup",
          "name": "",
          "type": "tuple"
        }
      ],
      "name": "UpdateGroup",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "withdrawer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "agIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ACC_METRIC_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "accumulatedWithPrecision",
          "type": "uint256"
        }
      ],
      "name": "accumulatedMetricDividedByShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newShares",
          "type": "uint256"
        }
      ],
      "name": "addAllocationGroup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressExistence",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "areRewardsActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "agIndex",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllocationGroups",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "groupAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "shares",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lifetimeEarnings",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimable",
              "type": "uint256"
            }
          ],
          "internalType": "struct TopChef.AllocationGroup[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastRewardBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLifeTimeShareValueEstimate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMetricPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMetricToken",
      "outputs": [
        {
          "internalType": "contract MetricToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalAllocationShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "agIndex",
          "type": "uint256"
        }
      ],
      "name": "harvest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvestAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "agIndex",
          "type": "uint256"
        }
      ],
      "name": "removeAllocationGroup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setLifetimeShareValue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "metricAmount",
          "type": "uint256"
        }
      ],
      "name": "setMetricPerBlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "metricTokenAddress",
          "type": "address"
        }
      ],
      "name": "setMetricToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "isOn",
          "type": "bool"
        }
      ],
      "name": "toggleRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateAccumulatedAllocations",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "groupAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "agIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "updateAllocationGroup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "agIndex",
          "type": "uint256"
        }
      ],
      "name": "viewPendingClaims",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "agIndex",
          "type": "uint256"
        }
      ],
      "name": "viewPendingHarvest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "agIndex",
          "type": "uint256"
        }
      ],
      "name": "viewPendingRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb3a876562ae9563f72e45094f81a4ec46c9e2812fa675ce515582c0154f2185b",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x2279B7A0a67DB372996a5FaB50D91eAA73d2eBe6",
    "transactionIndex": 0,
    "gasUsed": "2650104",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000020000000000000100000800000000000000000000000000000000400000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000040000000000000000000000000000000008000000000000000200000000000000000000000002000000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x1652a5b9dbf1f2267bd6ae6e4f36ed4e174c1d10f47becb6cddceb8514d11af0",
    "transactionHash": "0xb3a876562ae9563f72e45094f81a4ec46c9e2812fa675ce515582c0154f2185b",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 17,
        "transactionHash": "0xb3a876562ae9563f72e45094f81a4ec46c9e2812fa675ce515582c0154f2185b",
        "address": "0x2279B7A0a67DB372996a5FaB50D91eAA73d2eBe6",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x1652a5b9dbf1f2267bd6ae6e4f36ed4e174c1d10f47becb6cddceb8514d11af0"
      }
    ],
    "blockNumber": 17,
    "cumulativeGasUsed": "2650104",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xa513E6E4b8f2a923D98304ec87F64353C4D5C853"
  ],
  "numDeployments": 1,
  "solcInputHash": "afad67bdaa945256039adbd18757d119",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"metricTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CannotRenounce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DuplicateAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IndexDoesNotMatchAllocation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShareAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardsAlreadyToggled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardsNotActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SharesNotGreaterThanZero\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"groupAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lifetimeEarnings\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimable\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct TopChef.AllocationGroup\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"AddGroup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"harvester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"agIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"groupAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lifetimeEarnings\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimable\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct TopChef.AllocationGroup\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"RemoveGroup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"groupAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lifetimeEarnings\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimable\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct TopChef.AllocationGroup\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"UpdateGroup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"agIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACC_METRIC_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"accumulatedWithPrecision\",\"type\":\"uint256\"}],\"name\":\"accumulatedMetricDividedByShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newShares\",\"type\":\"uint256\"}],\"name\":\"addAllocationGroup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressExistence\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"areRewardsActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agIndex\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllocationGroups\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"groupAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lifetimeEarnings\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimable\",\"type\":\"uint256\"}],\"internalType\":\"struct TopChef.AllocationGroup[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastRewardBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLifeTimeShareValueEstimate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMetricPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMetricToken\",\"outputs\":[{\"internalType\":\"contract MetricToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalAllocationShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agIndex\",\"type\":\"uint256\"}],\"name\":\"harvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agIndex\",\"type\":\"uint256\"}],\"name\":\"removeAllocationGroup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setLifetimeShareValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"metricAmount\",\"type\":\"uint256\"}],\"name\":\"setMetricPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"metricTokenAddress\",\"type\":\"address\"}],\"name\":\"setMetricToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isOn\",\"type\":\"bool\"}],\"name\":\"toggleRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateAccumulatedAllocations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"groupAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"agIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"updateAllocationGroup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agIndex\",\"type\":\"uint256\"}],\"name\":\"viewPendingClaims\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agIndex\",\"type\":\"uint256\"}],\"name\":\"viewPendingHarvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agIndex\",\"type\":\"uint256\"}],\"name\":\"viewPendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/TopChef.sol\":\"TopChef\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xdadd41acb749920eccf40aeaa8d291adf9751399a7343561bad13e7a8d99be0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"src/contracts/Chef.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./MetricToken.sol\\\";\\n\\nabstract contract Chef is Ownable {\\n    uint256 private _metricPerBlock;\\n    // This constant is used to remove the last 6 digits of METRIC to account for rounding issues\\n    uint256 public constant ACC_METRIC_PRECISION = 1e12;\\n\\n    bool private _rewardsActive = false;\\n    uint256 private _lastRewardBlock;\\n    uint256 private _lifetimeShareValue;\\n    uint256 private _totalAllocShares;\\n\\n    MetricToken private metric;\\n\\n    //------------------------------------------------------Setters\\n\\n    function toggleRewards(bool isOn) public onlyOwner {\\n        if (isOn == _rewardsActive) revert RewardsAlreadyToggled();\\n        if (isOn) {\\n            _setLastRewardBlock();\\n        } else {\\n            setLifetimeShareValue();\\n        }\\n        _rewardsActive = isOn;\\n    }\\n\\n    function setMetricPerBlock(uint256 metricAmount) public virtual onlyOwner {\\n        _metricPerBlock = metricAmount * 10**18;\\n    }\\n\\n    function _setLastRewardBlock() internal virtual {\\n        _lastRewardBlock = block.number;\\n    }\\n\\n    function setMetricToken(address metricTokenAddress) public virtual onlyOwner {\\n        if (metricTokenAddress == address(0x00)) revert InvalidAddress();\\n        metric = MetricToken(metricTokenAddress);\\n    }\\n\\n    function setLifetimeShareValue() public virtual activeRewards {\\n        uint256 accumulatedWithMetricPrecision = _getAccumulatedWithMetricPrecision();\\n        _lifetimeShareValue = _lifetimeShareValue + accumulatedMetricDividedByShares(accumulatedWithMetricPrecision);\\n        _setLastRewardBlock();\\n    }\\n\\n    function getLifeTimeShareValueEstimate() public view virtual returns (uint256) {\\n        uint256 accumulatedWithMetricPrecision = _getAccumulatedWithMetricPrecision();\\n        uint256 lifetimesharevalue = _getLifetimeShareValue();\\n        return lifetimesharevalue + accumulatedMetricDividedByShares(accumulatedWithMetricPrecision);\\n    }\\n\\n    function _addTotalAllocShares(uint256 shares) internal virtual {\\n        _totalAllocShares = _totalAllocShares + shares;\\n    }\\n\\n    function _addTotalAllocShares(uint256 oldShares, uint256 newShares) internal virtual {\\n        if (oldShares > _totalAllocShares) revert InvalidShareAmount();\\n        _totalAllocShares = _totalAllocShares - oldShares + newShares;\\n    }\\n\\n    function _removeAllocShares(uint256 oldShares) internal virtual {\\n        if (oldShares > _totalAllocShares) revert InvalidShareAmount();\\n        _totalAllocShares = _totalAllocShares - oldShares;\\n    }\\n\\n    //------------------------------------------------------Getters\\n\\n    function getMetricPerBlock() public view virtual returns (uint256) {\\n        return _metricPerBlock;\\n    }\\n\\n    function getLastRewardBlock() public view virtual returns (uint256) {\\n        return _lastRewardBlock;\\n    }\\n\\n    function areRewardsActive() public view virtual returns (bool) {\\n        return _rewardsActive;\\n    }\\n\\n    function _getAccumulatedWithMetricPrecision() internal view virtual returns (uint256) {\\n        uint256 blocksSince = block.number - getLastRewardBlock();\\n        uint256 accumulated = blocksSince * getMetricPerBlock();\\n        return accumulated * ACC_METRIC_PRECISION;\\n    }\\n\\n    function getTotalAllocationShares() public view returns (uint256) {\\n        return _totalAllocShares;\\n    }\\n\\n    function _getLifetimeShareValue() internal view returns (uint256) {\\n        return _lifetimeShareValue;\\n    }\\n\\n    function accumulatedMetricDividedByShares(uint256 accumulatedWithPrecision) public view returns (uint256) {\\n        if (getTotalAllocationShares() == 0) return 0;\\n        if (accumulatedWithPrecision == 0) return 0;\\n        return accumulatedWithPrecision / getTotalAllocationShares();\\n    }\\n\\n    function getMetricToken() public view returns (MetricToken) {\\n        return metric;\\n    }\\n\\n    //------------------------------------------------------Support Functions\\n\\n    mapping(address => bool) public addressExistence;\\n    modifier nonDuplicated(address _address) {\\n        if (addressExistence[_address] == true) revert DuplicateAddress();\\n        addressExistence[_address] = true;\\n        _;\\n    }\\n\\n    function renounceOwnership() public view override onlyOwner {\\n        revert CannotRenounce();\\n    }\\n\\n    //------------------------------------------------------Errors\\n    error DuplicateAddress();\\n    error CannotRenounce();\\n    error InvalidShareAmount();\\n    error RewardsNotActive();\\n    error InvalidAddress();\\n    error RewardsAlreadyToggled();\\n\\n    //------------------------------------------------------Events\\n    event Harvest(address indexed harvester, uint256 agIndex, uint256 amount);\\n    event Withdraw(address indexed withdrawer, uint256 agIndex, uint256 amount);\\n\\n    //------------------------------------------------------ Modifiers\\n    modifier activeRewards() {\\n        if (!areRewardsActive()) revert RewardsNotActive();\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x447ea69c3306cab1deff58f4ff9859c17b1df8e13bc1589599ef19db2a35368a\",\"license\":\"MIT\"},\"src/contracts/MetricToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n/// @custom:security-contact contracts@metricsdao.com\\ncontract MetricToken is ERC20 {\\n    constructor() ERC20(\\\"METRIC\\\", \\\"METRIC\\\") {\\n        _mint(_msgSender(), 1000000000 * 10**decimals());\\n    }\\n}\\n\",\"keccak256\":\"0x015317ec77ea633af5f2af9cde22891298225bbd33fc6309c06d87579920329b\",\"license\":\"MIT\"},\"src/contracts/TopChef.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./Chef.sol\\\";\\n\\ncontract TopChef is Chef {\\n    AllocationGroup[] private _allocations;\\n\\n    constructor(address metricTokenAddress) {\\n        setMetricToken(metricTokenAddress);\\n        setMetricPerBlock(4);\\n    }\\n\\n    //------------------------------------------------------Manage Allocation Groups\\n\\n    function addAllocationGroup(address newAddress, uint256 newShares) external onlyOwner nonDuplicated(newAddress) {\\n        // Checks\\n        if (newAddress == address(0x00)) revert InvalidAddress();\\n        if (newShares <= 0) revert SharesNotGreaterThanZero();\\n        if (areRewardsActive() && getTotalAllocationShares() > 0) {\\n            updateAccumulatedAllocations();\\n        }\\n\\n        // Effects\\n        AllocationGroup memory group = AllocationGroup({\\n            groupAddress: newAddress,\\n            shares: newShares,\\n            lifetimeEarnings: (newShares * _getLifetimeShareValue()) / ACC_METRIC_PRECISION,\\n            claimable: 0\\n        });\\n\\n        _allocations.push(group);\\n        _addTotalAllocShares(group.shares);\\n\\n        emit AddGroup(group);\\n    }\\n\\n    // TODO do we actually need to do this?\\n    function updateAllocationGroup(\\n        address groupAddress,\\n        uint256 agIndex,\\n        uint256 shares\\n    ) public activeRewards validIndex(agIndex) onlyOwner {\\n        // Checks (modifier)\\n        if (shares <= 0) revert SharesNotGreaterThanZero();\\n        if (groupAddress == address(0x00)) revert InvalidAddress();\\n\\n        // Effects\\n        harvest(agIndex);\\n\\n        AllocationGroup storage group = _allocations[agIndex];\\n        _addTotalAllocShares(group.shares, shares);\\n        group.groupAddress = groupAddress;\\n        group.shares = shares;\\n\\n        emit UpdateGroup(group);\\n    }\\n\\n    function removeAllocationGroup(uint256 agIndex) external validIndex(agIndex) activeRewards onlyOwner {\\n        // Effects\\n        harvest(agIndex);\\n        AllocationGroup memory group = _allocations[agIndex];\\n\\n        uint256 claimable = group.claimable;\\n\\n        _removeAllocShares(_allocations[agIndex].shares);\\n        _allocations[agIndex] = _allocations[_allocations.length - 1];\\n        _allocations.pop();\\n\\n        // Interactions\\n        if (claimable > 0) {\\n            SafeERC20.safeTransfer(IERC20(getMetricToken()), group.groupAddress, claimable);\\n            emit Withdraw(group.groupAddress, agIndex, claimable);\\n        }\\n        emit RemoveGroup(group);\\n    }\\n\\n    //------------------------------------------------------Getters\\n\\n    function getAllocationGroups() public view returns (AllocationGroup[] memory) {\\n        return _allocations;\\n    }\\n\\n    //------------------------------------------------------Distribution\\n\\n    function viewPendingHarvest(uint256 agIndex) public view validIndex(agIndex) returns (uint256) {\\n        AllocationGroup memory group = _allocations[agIndex];\\n\\n        if (areRewardsActive()) {\\n            return ((group.shares * (getLifeTimeShareValueEstimate())) / ACC_METRIC_PRECISION) - group.lifetimeEarnings;\\n        } else {\\n            return (group.shares * (_getLifetimeShareValue())) / ACC_METRIC_PRECISION - group.lifetimeEarnings;\\n        }\\n    }\\n\\n    function viewPendingClaims(uint256 agIndex) public view validIndex(agIndex) returns (uint256) {\\n        AllocationGroup memory group = _allocations[agIndex];\\n\\n        return group.claimable;\\n    }\\n\\n    function viewPendingRewards(uint256 agIndex) public view validIndex(agIndex) returns (uint256) {\\n        AllocationGroup memory group = _allocations[agIndex];\\n        uint256 claimable = group.claimable;\\n        uint256 harvestable = viewPendingHarvest(agIndex);\\n        return claimable + harvestable;\\n    }\\n\\n    function updateAccumulatedAllocations() public activeRewards {\\n        if (block.number <= getLastRewardBlock()) {\\n            return;\\n        }\\n\\n        setLifetimeShareValue();\\n    }\\n\\n    // TODO when we implement the emission rate, ensure this function is called before update the rate\\n    // if we don't, then a user's rewards pre-emission change will incorrectly reflect the new rate\\n    function harvestAll() external onlyOwner {\\n        for (uint8 i = 0; i < _allocations.length; ++i) {\\n            harvest(i);\\n        }\\n    }\\n\\n    function harvest(uint256 agIndex) public activeRewards validIndex(agIndex) returns (uint256) {\\n        AllocationGroup storage group = _allocations[agIndex];\\n\\n        // Effects\\n        updateAccumulatedAllocations();\\n        uint256 toClaim = ((group.shares * (_getLifetimeShareValue())) / ACC_METRIC_PRECISION) - group.lifetimeEarnings;\\n\\n        group.lifetimeEarnings = group.lifetimeEarnings + toClaim;\\n        uint256 totalClaimable = group.claimable + toClaim;\\n        group.claimable = totalClaimable;\\n\\n        if (toClaim > 0) {\\n            emit Harvest(_msgSender(), agIndex, toClaim);\\n        }\\n        return totalClaimable;\\n    }\\n\\n    function claim(uint256 agIndex) public validIndex(agIndex) {\\n        AllocationGroup storage group = _allocations[agIndex];\\n        uint256 claimable = harvest(agIndex);\\n        if (claimable != 0) {\\n            group.claimable = 0;\\n            SafeERC20.safeTransfer(IERC20(getMetricToken()), group.groupAddress, claimable);\\n            emit Withdraw(group.groupAddress, agIndex, claimable);\\n        }\\n    }\\n\\n    //------------------------------------------------------Structs\\n\\n    struct AllocationGroup {\\n        address groupAddress;\\n        uint256 shares;\\n        uint256 lifetimeEarnings; // keeps track of how much the user is owed or has been credited already\\n        uint256 claimable;\\n    }\\n\\n    //------------------------------------------------------ Errors\\n    error SharesNotGreaterThanZero();\\n    error IndexDoesNotMatchAllocation();\\n\\n    // --------------------------------------------------------------------- Events\\n    event RemoveGroup(TopChef.AllocationGroup);\\n    event AddGroup(TopChef.AllocationGroup);\\n    event UpdateGroup(TopChef.AllocationGroup);\\n\\n    //------------------------------------------------------ Modifiers\\n    // modifier activeRewards() {\\n    //     if (!areRewardsActive()) revert RewardsInactive();\\n    //     _;\\n    // }\\n\\n    modifier validIndex(uint256 agIndex) {\\n        if (agIndex >= _allocations.length) revert IndexDoesNotMatchAllocation();\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xbc1eeac1ac60654c77a609fadafde54dbfb766ae3e07b3e4daa031b16434541b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526000600260006101000a81548160ff0219169083151502179055503480156200002c57600080fd5b50604051620032dc380380620032dc8339818101604052810190620000529190620003e3565b62000072620000666200009c60201b60201c565b620000a460201b60201c565b62000083816200016860201b60201c565b620000956004620002a260201b60201c565b5062000532565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b620001786200009c60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff166200019e6200035060201b60201c565b73ffffffffffffffffffffffffffffffffffffffff1614620001f7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001ee9062000476565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036200025e576040517fe6c4247b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b620002b26200009c60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16620002d86200035060201b60201c565b73ffffffffffffffffffffffffffffffffffffffff161462000331576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620003289062000476565b60405180910390fd5b670de0b6b3a764000081620003479190620004d1565b60018190555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620003ab826200037e565b9050919050565b620003bd816200039e565b8114620003c957600080fd5b50565b600081519050620003dd81620003b2565b92915050565b600060208284031215620003fc57620003fb62000379565b5b60006200040c84828501620003cc565b91505092915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006200045e60208362000415565b91506200046b8262000426565b602082019050919050565b6000602082019050818103600083015262000491816200044f565b9050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620004de8262000498565b9150620004eb8362000498565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615620005275762000526620004a2565b5b828202905092915050565b612d9a80620005426000396000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c80638c19ec8b116100f9578063bf4f6b5711610097578063d8009bb611610071578063d8009bb61461044a578063ddc632621461047a578063f2fde38b146104aa578063f33c9baa146104c6576101a9565b8063bf4f6b57146103f2578063bf62bee61461040e578063c5d836d91461042c576101a9565b8063945c5287116100d3578063945c52871461036c578063994cd56714610388578063a8e2a38b146103b8578063af2b0349146103d6576101a9565b80638c19ec8b146103285780638da5cb5b146103445780638ed955b914610362576101a9565b80635e175713116101665780636ac49a89116101405780636ac49a89146102d8578063715018a6146102f657806377d22d1a146103005780638b4a4ed51461030a576101a9565b80635e175713146102945780635f9b1bb5146102b25780636336694b146102bc576101a9565b80630419ba05146101ae5780631cd8f0fa146101cc5780631e718d27146101e857806322abbddf14610218578063379607f5146102485780635cae9a4814610264575b600080fd5b6101b66104e4565b6040516101c3919061219b565b60405180910390f35b6101e660048036038101906101e191906121e7565b610518565b005b61020260048036038101906101fd91906121e7565b6105b1565b60405161020f919061219b565b60405180910390f35b610232600480360381019061022d9190612272565b6105f6565b60405161023f91906122ba565b60405180910390f35b610262600480360381019061025d91906121e7565b610616565b005b61027e600480360381019061027991906121e7565b61074b565b60405161028b919061219b565b60405180910390f35b61029c61083f565b6040516102a9919061219b565b60405180910390f35b6102ba610849565b005b6102d660048036038101906102d191906121e7565b6108ba565b005b6102e0610c91565b6040516102ed919061219b565b60405180910390f35b6102fe610c9a565b005b610308610d48565b005b610312610da0565b60405161031f91906123f7565b60405180910390f35b610342600480360381019061033d9190612445565b610e73565b005b61034c610f74565b6040516103599190612481565b60405180910390f35b61036a610f9d565b005b61038660048036038101906103819190612272565b61104d565b005b6103a2600480360381019061039d91906121e7565b611173565b6040516103af919061219b565b60405180910390f35b6103c06112e4565b6040516103cd91906124fb565b60405180910390f35b6103f060048036038101906103eb9190612516565b61130e565b005b61040c60048036038101906104079190612556565b611671565b005b6104166118d2565b604051610423919061219b565b60405180910390f35b6104346118dc565b604051610441919061219b565b60405180910390f35b610464600480360381019061045f91906121e7565b6118e6565b604051610471919061219b565b60405180910390f35b610494600480360381019061048f91906121e7565b6119f9565b6040516104a1919061219b565b60405180910390f35b6104c460048036038101906104bf9190612272565b611b82565b005b6104ce611c79565b6040516104db91906122ba565b60405180910390f35b6000806104ef611c90565b905060006104fb611cd7565b9050610506826105b1565b8161051191906125d8565b9250505090565b610520611ce1565b73ffffffffffffffffffffffffffffffffffffffff1661053e610f74565b73ffffffffffffffffffffffffffffffffffffffff1614610594576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058b9061268b565b60405180910390fd5b670de0b6b3a7640000816105a891906126ab565b60018190555050565b6000806105bc61083f565b036105ca57600090506105f1565b600082036105db57600090506105f1565b6105e361083f565b826105ee9190612734565b90505b919050565b60076020528060005260406000206000915054906101000a900460ff1681565b806008805490508110610655576040517fd0333a0600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006008838154811061066b5761066a612765565b5b906000526020600020906004020190506000610686846119f9565b90506000811461074557600082600301819055506106d06106a56112e4565b8360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683611ce9565b8160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568858360405161073c929190612794565b60405180910390a25b50505050565b600081600880549050811061078c576040517fd0333a0600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600884815481106107a2576107a1612765565b5b90600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820154815250509050806060015192505050919050565b6000600554905090565b610851611c79565b610887576040517faa3aac7f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610891611c90565b905061089c816105b1565b6004546108a991906125d8565b6004819055506108b7611d6f565b50565b8060088054905081106108f9576040517fd0333a0600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610901611c79565b610937576040517faa3aac7f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61093f611ce1565b73ffffffffffffffffffffffffffffffffffffffff1661095d610f74565b73ffffffffffffffffffffffffffffffffffffffff16146109b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109aa9061268b565b60405180910390fd5b6109bc826119f9565b506000600883815481106109d3576109d2612765565b5b90600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820154815250509050600081606001519050610a9960088581548110610a8257610a81612765565b5b906000526020600020906004020160010154611d78565b60086001600880549050610aad91906127bd565b81548110610abe57610abd612765565b5b906000526020600020906004020160088581548110610ae057610adf612765565b5b90600052602060002090600402016000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001820154816001015560028201548160020155600382015481600301559050506008805480610b8857610b876127f1565b5b6001900381819060005260206000209060040201600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600182016000905560028201600090556003820160009055505090556000811115610c5457610bff610bf46112e4565b836000015183611ce9565b816000015173ffffffffffffffffffffffffffffffffffffffff167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5688583604051610c4b929190612794565b60405180910390a25b7fb1a6bb6cf9f57de6dc8c1840765c71e86b135a69d0405bc28dc7a011cc572e4482604051610c839190612875565b60405180910390a150505050565b64e8d4a5100081565b610ca2611ce1565b73ffffffffffffffffffffffffffffffffffffffff16610cc0610f74565b73ffffffffffffffffffffffffffffffffffffffff1614610d16576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0d9061268b565b60405180910390fd5b6040517fc5fea89800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610d50611c79565b610d86576040517faa3aac7f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610d8e6118d2565b431115610d9e57610d9d610849565b5b565b60606008805480602002602001604051908101604052809291908181526020016000905b82821015610e6a57838290600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152505081526020019060010190610dc4565b50505050905090565b610e7b611ce1565b73ffffffffffffffffffffffffffffffffffffffff16610e99610f74565b73ffffffffffffffffffffffffffffffffffffffff1614610eef576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ee69061268b565b60405180910390fd5b600260009054906101000a900460ff16151581151503610f3b576040517f1b82e04500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8015610f4e57610f49611d6f565b610f57565b610f56610849565b5b80600260006101000a81548160ff02191690831515021790555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610fa5611ce1565b73ffffffffffffffffffffffffffffffffffffffff16610fc3610f74565b73ffffffffffffffffffffffffffffffffffffffff1614611019576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110109061268b565b60405180910390fd5b60005b6008805490508160ff16101561104a576110388160ff166119f9565b50806110439061289d565b905061101c565b50565b611055611ce1565b73ffffffffffffffffffffffffffffffffffffffff16611073610f74565b73ffffffffffffffffffffffffffffffffffffffff16146110c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110c09061268b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361112f576040517fe6c4247b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008160088054905081106111b4576040517fd0333a0600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600884815481106111ca576111c9612765565b5b90600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820154815250509050611261611c79565b156112a457806040015164e8d4a510006112796104e4565b836020015161128891906126ab565b6112929190612734565b61129c91906127bd565b9250506112de565b806040015164e8d4a510006112b7611cd7565b83602001516112c691906126ab565b6112d09190612734565b6112da91906127bd565b9250505b50919050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b611316611ce1565b73ffffffffffffffffffffffffffffffffffffffff16611334610f74565b73ffffffffffffffffffffffffffffffffffffffff161461138a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113819061268b565b60405180910390fd5b8160011515600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151503611415576040517f0a47c55800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036114d3576040517fe6c4247b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000821161150d576040517ff915581500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611515611c79565b80156115285750600061152661083f565b115b1561153657611535610d48565b5b600060405180608001604052808573ffffffffffffffffffffffffffffffffffffffff16815260200184815260200164e8d4a51000611573611cd7565b8661157e91906126ab565b6115889190612734565b815260200160008152509050600881908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201556060820151816003015550506116348160200151611dcb565b7f3108114300301baeef9bdf0a02b438810d99420fce1d00b913d3830d8f823054816040516116639190612875565b60405180910390a150505050565b611679611c79565b6116af576040517faa3aac7f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8160088054905081106116ee576040517fd0333a0600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6116f6611ce1565b73ffffffffffffffffffffffffffffffffffffffff16611714610f74565b73ffffffffffffffffffffffffffffffffffffffff161461176a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117619061268b565b60405180910390fd5b600082116117a4576040517ff915581500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff160361180a576040517fe6c4247b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611813836119f9565b5060006008848154811061182a57611829612765565b5b90600052602060002090600402019050611848816001015484611de2565b848160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508281600101819055507f3a996fe4a1f2923fe87fc2e86696fc0102f0b8afe464f1539d5f70041ee46e9d816040516118c391906129b4565b60405180910390a15050505050565b6000600354905090565b6000600154905090565b6000816008805490508110611927576040517fd0333a0600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006008848154811061193d5761193c612765565b5b90600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815260200160028201548152602001600382015481525050905060008160600151905060006119e086611173565b905080826119ee91906125d8565b945050505050919050565b6000611a03611c79565b611a39576040517faa3aac7f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b816008805490508110611a78576040517fd0333a0600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060088481548110611a8e57611a8d612765565b5b90600052602060002090600402019050611aa6610d48565b6000816002015464e8d4a51000611abb611cd7565b8460010154611aca91906126ab565b611ad49190612734565b611ade91906127bd565b9050808260020154611af091906125d8565b82600201819055506000818360030154611b0a91906125d8565b90508083600301819055506000821115611b7657611b26611ce1565b73ffffffffffffffffffffffffffffffffffffffff167f71bab65ced2e5750775a0613be067df48ef06cf92a496ebf7663ae06609249548784604051611b6d929190612794565b60405180910390a25b80945050505050919050565b611b8a611ce1565b73ffffffffffffffffffffffffffffffffffffffff16611ba8610f74565b73ffffffffffffffffffffffffffffffffffffffff1614611bfe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bf59061268b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611c6d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c6490612a41565b60405180910390fd5b611c7681611e41565b50565b6000600260009054906101000a900460ff16905090565b600080611c9b6118d2565b43611ca691906127bd565b90506000611cb26118dc565b82611cbd91906126ab565b905064e8d4a5100081611cd091906126ab565b9250505090565b6000600454905090565b600033905090565b611d6a8363a9059cbb60e01b8484604051602401611d08929190612a61565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611f05565b505050565b43600381905550565b600554811115611db4576040517f8c88122d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600554611dc291906127bd565b60058190555050565b80600554611dd991906125d8565b60058190555050565b600554821115611e1e576040517f8c88122d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8082600554611e2d91906127bd565b611e3791906125d8565b6005819055505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000611f67826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611fcc9092919063ffffffff16565b9050600081511115611fc75780806020019051810190611f879190612a9f565b611fc6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fbd90612b3e565b60405180910390fd5b5b505050565b6060611fdb8484600085611fe4565b90509392505050565b606082471015612029576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161202090612bd0565b60405180910390fd5b612032856120f8565b612071576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161206890612c3c565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161209a9190612cd6565b60006040518083038185875af1925050503d80600081146120d7576040519150601f19603f3d011682016040523d82523d6000602084013e6120dc565b606091505b50915091506120ec82828661211b565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6060831561212b5782905061217b565b60008351111561213e5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121729190612d42565b60405180910390fd5b9392505050565b6000819050919050565b61219581612182565b82525050565b60006020820190506121b0600083018461218c565b92915050565b600080fd5b6121c481612182565b81146121cf57600080fd5b50565b6000813590506121e1816121bb565b92915050565b6000602082840312156121fd576121fc6121b6565b5b600061220b848285016121d2565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061223f82612214565b9050919050565b61224f81612234565b811461225a57600080fd5b50565b60008135905061226c81612246565b92915050565b600060208284031215612288576122876121b6565b5b60006122968482850161225d565b91505092915050565b60008115159050919050565b6122b48161229f565b82525050565b60006020820190506122cf60008301846122ab565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61230a81612234565b82525050565b61231981612182565b82525050565b6080820160008201516123356000850182612301565b5060208201516123486020850182612310565b50604082015161235b6040850182612310565b50606082015161236e6060850182612310565b50505050565b6000612380838361231f565b60808301905092915050565b6000602082019050919050565b60006123a4826122d5565b6123ae81856122e0565b93506123b9836122f1565b8060005b838110156123ea5781516123d18882612374565b97506123dc8361238c565b9250506001810190506123bd565b5085935050505092915050565b600060208201905081810360008301526124118184612399565b905092915050565b6124228161229f565b811461242d57600080fd5b50565b60008135905061243f81612419565b92915050565b60006020828403121561245b5761245a6121b6565b5b600061246984828501612430565b91505092915050565b61247b81612234565b82525050565b60006020820190506124966000830184612472565b92915050565b6000819050919050565b60006124c16124bc6124b784612214565b61249c565b612214565b9050919050565b60006124d3826124a6565b9050919050565b60006124e5826124c8565b9050919050565b6124f5816124da565b82525050565b600060208201905061251060008301846124ec565b92915050565b6000806040838503121561252d5761252c6121b6565b5b600061253b8582860161225d565b925050602061254c858286016121d2565b9150509250929050565b60008060006060848603121561256f5761256e6121b6565b5b600061257d8682870161225d565b935050602061258e868287016121d2565b925050604061259f868287016121d2565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006125e382612182565b91506125ee83612182565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612623576126226125a9565b5b828201905092915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061267560208361262e565b91506126808261263f565b602082019050919050565b600060208201905081810360008301526126a481612668565b9050919050565b60006126b682612182565b91506126c183612182565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156126fa576126f96125a9565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061273f82612182565b915061274a83612182565b92508261275a57612759612705565b5b828204905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006040820190506127a9600083018561218c565b6127b6602083018461218c565b9392505050565b60006127c882612182565b91506127d383612182565b9250828210156127e6576127e56125a9565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6080820160008201516128366000850182612301565b5060208201516128496020850182612310565b50604082015161285c6040850182612310565b50606082015161286f6060850182612310565b50505050565b600060808201905061288a6000830184612820565b92915050565b600060ff82169050919050565b60006128a882612890565b915060ff82036128bb576128ba6125a9565b5b600182019050919050565b60008160001c9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612906612901836128c6565b6128d3565b9050919050565b6000819050919050565b600061292a612925836128c6565b61290d565b9050919050565b608082016000808301549050612946816128f3565b6129536000860182612301565b506001830154905061296481612917565b6129716020860182612310565b506002830154905061298281612917565b61298f6040860182612310565b50600383015490506129a081612917565b6129ad6060860182612310565b5050505050565b60006080820190506129c96000830184612931565b92915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612a2b60268361262e565b9150612a36826129cf565b604082019050919050565b60006020820190508181036000830152612a5a81612a1e565b9050919050565b6000604082019050612a766000830185612472565b612a83602083018461218c565b9392505050565b600081519050612a9981612419565b92915050565b600060208284031215612ab557612ab46121b6565b5b6000612ac384828501612a8a565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000612b28602a8361262e565b9150612b3382612acc565b604082019050919050565b60006020820190508181036000830152612b5781612b1b565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000612bba60268361262e565b9150612bc582612b5e565b604082019050919050565b60006020820190508181036000830152612be981612bad565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000612c26601d8361262e565b9150612c3182612bf0565b602082019050919050565b60006020820190508181036000830152612c5581612c19565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015612c90578082015181840152602081019050612c75565b83811115612c9f576000848401525b50505050565b6000612cb082612c5c565b612cba8185612c67565b9350612cca818560208601612c72565b80840191505092915050565b6000612ce28284612ca5565b915081905092915050565b600081519050919050565b6000601f19601f8301169050919050565b6000612d1482612ced565b612d1e818561262e565b9350612d2e818560208601612c72565b612d3781612cf8565b840191505092915050565b60006020820190508181036000830152612d5c8184612d09565b90509291505056fea2646970667358221220fed330bbefdc3e50bf3125ee0f8100293d921d8f8dd66d36838d03dc16c22f2964736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101a95760003560e01c80638c19ec8b116100f9578063bf4f6b5711610097578063d8009bb611610071578063d8009bb61461044a578063ddc632621461047a578063f2fde38b146104aa578063f33c9baa146104c6576101a9565b8063bf4f6b57146103f2578063bf62bee61461040e578063c5d836d91461042c576101a9565b8063945c5287116100d3578063945c52871461036c578063994cd56714610388578063a8e2a38b146103b8578063af2b0349146103d6576101a9565b80638c19ec8b146103285780638da5cb5b146103445780638ed955b914610362576101a9565b80635e175713116101665780636ac49a89116101405780636ac49a89146102d8578063715018a6146102f657806377d22d1a146103005780638b4a4ed51461030a576101a9565b80635e175713146102945780635f9b1bb5146102b25780636336694b146102bc576101a9565b80630419ba05146101ae5780631cd8f0fa146101cc5780631e718d27146101e857806322abbddf14610218578063379607f5146102485780635cae9a4814610264575b600080fd5b6101b66104e4565b6040516101c3919061219b565b60405180910390f35b6101e660048036038101906101e191906121e7565b610518565b005b61020260048036038101906101fd91906121e7565b6105b1565b60405161020f919061219b565b60405180910390f35b610232600480360381019061022d9190612272565b6105f6565b60405161023f91906122ba565b60405180910390f35b610262600480360381019061025d91906121e7565b610616565b005b61027e600480360381019061027991906121e7565b61074b565b60405161028b919061219b565b60405180910390f35b61029c61083f565b6040516102a9919061219b565b60405180910390f35b6102ba610849565b005b6102d660048036038101906102d191906121e7565b6108ba565b005b6102e0610c91565b6040516102ed919061219b565b60405180910390f35b6102fe610c9a565b005b610308610d48565b005b610312610da0565b60405161031f91906123f7565b60405180910390f35b610342600480360381019061033d9190612445565b610e73565b005b61034c610f74565b6040516103599190612481565b60405180910390f35b61036a610f9d565b005b61038660048036038101906103819190612272565b61104d565b005b6103a2600480360381019061039d91906121e7565b611173565b6040516103af919061219b565b60405180910390f35b6103c06112e4565b6040516103cd91906124fb565b60405180910390f35b6103f060048036038101906103eb9190612516565b61130e565b005b61040c60048036038101906104079190612556565b611671565b005b6104166118d2565b604051610423919061219b565b60405180910390f35b6104346118dc565b604051610441919061219b565b60405180910390f35b610464600480360381019061045f91906121e7565b6118e6565b604051610471919061219b565b60405180910390f35b610494600480360381019061048f91906121e7565b6119f9565b6040516104a1919061219b565b60405180910390f35b6104c460048036038101906104bf9190612272565b611b82565b005b6104ce611c79565b6040516104db91906122ba565b60405180910390f35b6000806104ef611c90565b905060006104fb611cd7565b9050610506826105b1565b8161051191906125d8565b9250505090565b610520611ce1565b73ffffffffffffffffffffffffffffffffffffffff1661053e610f74565b73ffffffffffffffffffffffffffffffffffffffff1614610594576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058b9061268b565b60405180910390fd5b670de0b6b3a7640000816105a891906126ab565b60018190555050565b6000806105bc61083f565b036105ca57600090506105f1565b600082036105db57600090506105f1565b6105e361083f565b826105ee9190612734565b90505b919050565b60076020528060005260406000206000915054906101000a900460ff1681565b806008805490508110610655576040517fd0333a0600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006008838154811061066b5761066a612765565b5b906000526020600020906004020190506000610686846119f9565b90506000811461074557600082600301819055506106d06106a56112e4565b8360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683611ce9565b8160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568858360405161073c929190612794565b60405180910390a25b50505050565b600081600880549050811061078c576040517fd0333a0600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600884815481106107a2576107a1612765565b5b90600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820154815250509050806060015192505050919050565b6000600554905090565b610851611c79565b610887576040517faa3aac7f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610891611c90565b905061089c816105b1565b6004546108a991906125d8565b6004819055506108b7611d6f565b50565b8060088054905081106108f9576040517fd0333a0600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610901611c79565b610937576040517faa3aac7f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61093f611ce1565b73ffffffffffffffffffffffffffffffffffffffff1661095d610f74565b73ffffffffffffffffffffffffffffffffffffffff16146109b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109aa9061268b565b60405180910390fd5b6109bc826119f9565b506000600883815481106109d3576109d2612765565b5b90600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820154815250509050600081606001519050610a9960088581548110610a8257610a81612765565b5b906000526020600020906004020160010154611d78565b60086001600880549050610aad91906127bd565b81548110610abe57610abd612765565b5b906000526020600020906004020160088581548110610ae057610adf612765565b5b90600052602060002090600402016000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001820154816001015560028201548160020155600382015481600301559050506008805480610b8857610b876127f1565b5b6001900381819060005260206000209060040201600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600182016000905560028201600090556003820160009055505090556000811115610c5457610bff610bf46112e4565b836000015183611ce9565b816000015173ffffffffffffffffffffffffffffffffffffffff167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5688583604051610c4b929190612794565b60405180910390a25b7fb1a6bb6cf9f57de6dc8c1840765c71e86b135a69d0405bc28dc7a011cc572e4482604051610c839190612875565b60405180910390a150505050565b64e8d4a5100081565b610ca2611ce1565b73ffffffffffffffffffffffffffffffffffffffff16610cc0610f74565b73ffffffffffffffffffffffffffffffffffffffff1614610d16576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0d9061268b565b60405180910390fd5b6040517fc5fea89800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610d50611c79565b610d86576040517faa3aac7f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610d8e6118d2565b431115610d9e57610d9d610849565b5b565b60606008805480602002602001604051908101604052809291908181526020016000905b82821015610e6a57838290600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152505081526020019060010190610dc4565b50505050905090565b610e7b611ce1565b73ffffffffffffffffffffffffffffffffffffffff16610e99610f74565b73ffffffffffffffffffffffffffffffffffffffff1614610eef576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ee69061268b565b60405180910390fd5b600260009054906101000a900460ff16151581151503610f3b576040517f1b82e04500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8015610f4e57610f49611d6f565b610f57565b610f56610849565b5b80600260006101000a81548160ff02191690831515021790555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610fa5611ce1565b73ffffffffffffffffffffffffffffffffffffffff16610fc3610f74565b73ffffffffffffffffffffffffffffffffffffffff1614611019576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110109061268b565b60405180910390fd5b60005b6008805490508160ff16101561104a576110388160ff166119f9565b50806110439061289d565b905061101c565b50565b611055611ce1565b73ffffffffffffffffffffffffffffffffffffffff16611073610f74565b73ffffffffffffffffffffffffffffffffffffffff16146110c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110c09061268b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361112f576040517fe6c4247b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008160088054905081106111b4576040517fd0333a0600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600884815481106111ca576111c9612765565b5b90600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820154815250509050611261611c79565b156112a457806040015164e8d4a510006112796104e4565b836020015161128891906126ab565b6112929190612734565b61129c91906127bd565b9250506112de565b806040015164e8d4a510006112b7611cd7565b83602001516112c691906126ab565b6112d09190612734565b6112da91906127bd565b9250505b50919050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b611316611ce1565b73ffffffffffffffffffffffffffffffffffffffff16611334610f74565b73ffffffffffffffffffffffffffffffffffffffff161461138a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113819061268b565b60405180910390fd5b8160011515600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151503611415576040517f0a47c55800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036114d3576040517fe6c4247b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000821161150d576040517ff915581500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611515611c79565b80156115285750600061152661083f565b115b1561153657611535610d48565b5b600060405180608001604052808573ffffffffffffffffffffffffffffffffffffffff16815260200184815260200164e8d4a51000611573611cd7565b8661157e91906126ab565b6115889190612734565b815260200160008152509050600881908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201556060820151816003015550506116348160200151611dcb565b7f3108114300301baeef9bdf0a02b438810d99420fce1d00b913d3830d8f823054816040516116639190612875565b60405180910390a150505050565b611679611c79565b6116af576040517faa3aac7f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8160088054905081106116ee576040517fd0333a0600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6116f6611ce1565b73ffffffffffffffffffffffffffffffffffffffff16611714610f74565b73ffffffffffffffffffffffffffffffffffffffff161461176a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117619061268b565b60405180910390fd5b600082116117a4576040517ff915581500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff160361180a576040517fe6c4247b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611813836119f9565b5060006008848154811061182a57611829612765565b5b90600052602060002090600402019050611848816001015484611de2565b848160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508281600101819055507f3a996fe4a1f2923fe87fc2e86696fc0102f0b8afe464f1539d5f70041ee46e9d816040516118c391906129b4565b60405180910390a15050505050565b6000600354905090565b6000600154905090565b6000816008805490508110611927576040517fd0333a0600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006008848154811061193d5761193c612765565b5b90600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815260200160028201548152602001600382015481525050905060008160600151905060006119e086611173565b905080826119ee91906125d8565b945050505050919050565b6000611a03611c79565b611a39576040517faa3aac7f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b816008805490508110611a78576040517fd0333a0600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060088481548110611a8e57611a8d612765565b5b90600052602060002090600402019050611aa6610d48565b6000816002015464e8d4a51000611abb611cd7565b8460010154611aca91906126ab565b611ad49190612734565b611ade91906127bd565b9050808260020154611af091906125d8565b82600201819055506000818360030154611b0a91906125d8565b90508083600301819055506000821115611b7657611b26611ce1565b73ffffffffffffffffffffffffffffffffffffffff167f71bab65ced2e5750775a0613be067df48ef06cf92a496ebf7663ae06609249548784604051611b6d929190612794565b60405180910390a25b80945050505050919050565b611b8a611ce1565b73ffffffffffffffffffffffffffffffffffffffff16611ba8610f74565b73ffffffffffffffffffffffffffffffffffffffff1614611bfe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bf59061268b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611c6d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c6490612a41565b60405180910390fd5b611c7681611e41565b50565b6000600260009054906101000a900460ff16905090565b600080611c9b6118d2565b43611ca691906127bd565b90506000611cb26118dc565b82611cbd91906126ab565b905064e8d4a5100081611cd091906126ab565b9250505090565b6000600454905090565b600033905090565b611d6a8363a9059cbb60e01b8484604051602401611d08929190612a61565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611f05565b505050565b43600381905550565b600554811115611db4576040517f8c88122d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600554611dc291906127bd565b60058190555050565b80600554611dd991906125d8565b60058190555050565b600554821115611e1e576040517f8c88122d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8082600554611e2d91906127bd565b611e3791906125d8565b6005819055505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000611f67826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611fcc9092919063ffffffff16565b9050600081511115611fc75780806020019051810190611f879190612a9f565b611fc6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fbd90612b3e565b60405180910390fd5b5b505050565b6060611fdb8484600085611fe4565b90509392505050565b606082471015612029576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161202090612bd0565b60405180910390fd5b612032856120f8565b612071576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161206890612c3c565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161209a9190612cd6565b60006040518083038185875af1925050503d80600081146120d7576040519150601f19603f3d011682016040523d82523d6000602084013e6120dc565b606091505b50915091506120ec82828661211b565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6060831561212b5782905061217b565b60008351111561213e5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121729190612d42565b60405180910390fd5b9392505050565b6000819050919050565b61219581612182565b82525050565b60006020820190506121b0600083018461218c565b92915050565b600080fd5b6121c481612182565b81146121cf57600080fd5b50565b6000813590506121e1816121bb565b92915050565b6000602082840312156121fd576121fc6121b6565b5b600061220b848285016121d2565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061223f82612214565b9050919050565b61224f81612234565b811461225a57600080fd5b50565b60008135905061226c81612246565b92915050565b600060208284031215612288576122876121b6565b5b60006122968482850161225d565b91505092915050565b60008115159050919050565b6122b48161229f565b82525050565b60006020820190506122cf60008301846122ab565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61230a81612234565b82525050565b61231981612182565b82525050565b6080820160008201516123356000850182612301565b5060208201516123486020850182612310565b50604082015161235b6040850182612310565b50606082015161236e6060850182612310565b50505050565b6000612380838361231f565b60808301905092915050565b6000602082019050919050565b60006123a4826122d5565b6123ae81856122e0565b93506123b9836122f1565b8060005b838110156123ea5781516123d18882612374565b97506123dc8361238c565b9250506001810190506123bd565b5085935050505092915050565b600060208201905081810360008301526124118184612399565b905092915050565b6124228161229f565b811461242d57600080fd5b50565b60008135905061243f81612419565b92915050565b60006020828403121561245b5761245a6121b6565b5b600061246984828501612430565b91505092915050565b61247b81612234565b82525050565b60006020820190506124966000830184612472565b92915050565b6000819050919050565b60006124c16124bc6124b784612214565b61249c565b612214565b9050919050565b60006124d3826124a6565b9050919050565b60006124e5826124c8565b9050919050565b6124f5816124da565b82525050565b600060208201905061251060008301846124ec565b92915050565b6000806040838503121561252d5761252c6121b6565b5b600061253b8582860161225d565b925050602061254c858286016121d2565b9150509250929050565b60008060006060848603121561256f5761256e6121b6565b5b600061257d8682870161225d565b935050602061258e868287016121d2565b925050604061259f868287016121d2565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006125e382612182565b91506125ee83612182565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612623576126226125a9565b5b828201905092915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061267560208361262e565b91506126808261263f565b602082019050919050565b600060208201905081810360008301526126a481612668565b9050919050565b60006126b682612182565b91506126c183612182565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156126fa576126f96125a9565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061273f82612182565b915061274a83612182565b92508261275a57612759612705565b5b828204905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006040820190506127a9600083018561218c565b6127b6602083018461218c565b9392505050565b60006127c882612182565b91506127d383612182565b9250828210156127e6576127e56125a9565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6080820160008201516128366000850182612301565b5060208201516128496020850182612310565b50604082015161285c6040850182612310565b50606082015161286f6060850182612310565b50505050565b600060808201905061288a6000830184612820565b92915050565b600060ff82169050919050565b60006128a882612890565b915060ff82036128bb576128ba6125a9565b5b600182019050919050565b60008160001c9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612906612901836128c6565b6128d3565b9050919050565b6000819050919050565b600061292a612925836128c6565b61290d565b9050919050565b608082016000808301549050612946816128f3565b6129536000860182612301565b506001830154905061296481612917565b6129716020860182612310565b506002830154905061298281612917565b61298f6040860182612310565b50600383015490506129a081612917565b6129ad6060860182612310565b5050505050565b60006080820190506129c96000830184612931565b92915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612a2b60268361262e565b9150612a36826129cf565b604082019050919050565b60006020820190508181036000830152612a5a81612a1e565b9050919050565b6000604082019050612a766000830185612472565b612a83602083018461218c565b9392505050565b600081519050612a9981612419565b92915050565b600060208284031215612ab557612ab46121b6565b5b6000612ac384828501612a8a565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000612b28602a8361262e565b9150612b3382612acc565b604082019050919050565b60006020820190508181036000830152612b5781612b1b565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000612bba60268361262e565b9150612bc582612b5e565b604082019050919050565b60006020820190508181036000830152612be981612bad565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000612c26601d8361262e565b9150612c3182612bf0565b602082019050919050565b60006020820190508181036000830152612c5581612c19565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015612c90578082015181840152602081019050612c75565b83811115612c9f576000848401525b50505050565b6000612cb082612c5c565b612cba8185612c67565b9350612cca818560208601612c72565b80840191505092915050565b6000612ce28284612ca5565b915081905092915050565b600081519050919050565b6000601f19601f8301169050919050565b6000612d1482612ced565b612d1e818561262e565b9350612d2e818560208601612c72565b612d3781612cf8565b840191505092915050565b60006020820190508181036000830152612d5c8184612d09565b90509291505056fea2646970667358221220fed330bbefdc3e50bf3125ee0f8100293d921d8f8dd66d36838d03dc16c22f2964736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "src/contracts/TopChef.sol:TopChef",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2816,
        "contract": "src/contracts/TopChef.sol:TopChef",
        "label": "_metricPerBlock",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2822,
        "contract": "src/contracts/TopChef.sol:TopChef",
        "label": "_rewardsActive",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 2824,
        "contract": "src/contracts/TopChef.sol:TopChef",
        "label": "_lastRewardBlock",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2826,
        "contract": "src/contracts/TopChef.sol:TopChef",
        "label": "_lifetimeShareValue",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 2828,
        "contract": "src/contracts/TopChef.sol:TopChef",
        "label": "_totalAllocShares",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 2831,
        "contract": "src/contracts/TopChef.sol:TopChef",
        "label": "metric",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(MetricToken)3223"
      },
      {
        "astId": 3111,
        "contract": "src/contracts/TopChef.sol:TopChef",
        "label": "addressExistence",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 5595,
        "contract": "src/contracts/TopChef.sol:TopChef",
        "label": "_allocations",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_struct(AllocationGroup)6119_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(AllocationGroup)6119_storage)dyn_storage": {
        "base": "t_struct(AllocationGroup)6119_storage",
        "encoding": "dynamic_array",
        "label": "struct TopChef.AllocationGroup[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(MetricToken)3223": {
        "encoding": "inplace",
        "label": "contract MetricToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_struct(AllocationGroup)6119_storage": {
        "encoding": "inplace",
        "label": "struct TopChef.AllocationGroup",
        "members": [
          {
            "astId": 6112,
            "contract": "src/contracts/TopChef.sol:TopChef",
            "label": "groupAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6114,
            "contract": "src/contracts/TopChef.sol:TopChef",
            "label": "shares",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6116,
            "contract": "src/contracts/TopChef.sol:TopChef",
            "label": "lifetimeEarnings",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6118,
            "contract": "src/contracts/TopChef.sol:TopChef",
            "label": "claimable",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}