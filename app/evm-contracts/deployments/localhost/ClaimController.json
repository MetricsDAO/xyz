{
  "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
  "abi": [
    {
      "inputs": [],
      "name": "AlreadyClaimed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ClaimLimitReached",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NeedClaimToAnswer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotTheApi",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "answerURL",
          "type": "string"
        }
      ],
      "name": "answer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "answers",
      "outputs": [
        {
          "internalType": "enum ClaimController.STATE",
          "name": "state",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "answerURL",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "finalGrade",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "scoringMetaDataURI",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "claimLimits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "claims",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getClaimDataForUser",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum ClaimController.STATE",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "author",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "answerURL",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "finalGrade",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "scoringMetaDataURI",
              "type": "string"
            }
          ],
          "internalType": "struct ClaimController.Answer",
          "name": "_answer",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        }
      ],
      "name": "getClaimLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        }
      ],
      "name": "getClaims",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_claims",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimLimit",
          "type": "uint256"
        }
      ],
      "name": "initializeQuestion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "questionApi",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newApi",
          "type": "address"
        }
      ],
      "name": "setQuestionApi",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc6828346961d12b0da73ebdf3631d15d28dd961e6559777b4d41695a24f9fd8f",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
    "transactionIndex": 0,
    "gasUsed": "1537014",
    "logsBloom": "0x
    "blockHash": "0x93c8242d1e2f8f18c01cd802e0cdd104aed8314479decba2c7b6a03070ee09c4",
    "transactionHash": "0xc6828346961d12b0da73ebdf3631d15d28dd961e6559777b4d41695a24f9fd8f",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 5,
        "transactionHash": "0xc6828346961d12b0da73ebdf3631d15d28dd961e6559777b4d41695a24f9fd8f",
        "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x93c8242d1e2f8f18c01cd802e0cdd104aed8314479decba2c7b6a03070ee09c4"
      }
    ],
    "blockNumber": 5,
    "cumulativeGasUsed": "1537014",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "23a5c42ffdc6fce9090df76d82673573",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AlreadyClaimed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClaimLimitReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NeedClaimToAnswer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotTheApi\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"answerURL\",\"type\":\"string\"}],\"name\":\"answer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"answers\",\"outputs\":[{\"internalType\":\"enum ClaimController.STATE\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"answerURL\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"finalGrade\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"scoringMetaDataURI\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimLimits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claims\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getClaimDataForUser\",\"outputs\":[{\"components\":[{\"internalType\":\"enum ClaimController.STATE\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"answerURL\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"finalGrade\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"scoringMetaDataURI\",\"type\":\"string\"}],\"internalType\":\"struct ClaimController.Answer\",\"name\":\"_answer\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"}],\"name\":\"getClaimLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"}],\"name\":\"getClaims\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_claims\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimLimit\",\"type\":\"uint256\"}],\"name\":\"initializeQuestion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"questionApi\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newApi\",\"type\":\"address\"}],\"name\":\"setQuestionApi\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"initializeQuestion(uint256,uint256)\":{\"params\":{\"claimLimit\":\"The limit for the amount of people that can claim the question\",\"questionId\":\"The id of the question\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setQuestionApi(address)\":{\"params\":{\"_newApi\":\"The new address of the question API.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"AlreadyClaimed()\":[{\"notice\":\"Throw if analyst tries to claim a question multiple times\"}],\"ClaimLimitReached()\":[{\"notice\":\"Throw if user tries to claim a question that is past its limit\"}],\"NeedClaimToAnswer()\":[{\"notice\":\"Throw if a analyst tries to answer a question that it has not claimed\"}]},\"kind\":\"user\",\"methods\":{\"answers(uint256,address)\":{\"notice\":\"maps answers to the question they belong to\"},\"claimLimits(uint256)\":{\"notice\":\"Keeps track of claim limits per question\"},\"claims(uint256,uint256)\":{\"notice\":\"maps all claimers to a question\"},\"initializeQuestion(uint256,uint256)\":{\"notice\":\"Initializes a question to receive claims\"},\"setQuestionApi(address)\":{\"notice\":\"Sets the address of the question API.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/Protocol/ClaimController.sol\":\"ClaimController\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"src/contracts/Protocol/ClaimController.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n// Interfaces\\nimport \\\"./interfaces/IClaimController.sol\\\";\\n\\n// Modifiers\\nimport \\\"./modifiers/OnlyAPI.sol\\\";\\n\\ncontract ClaimController is Ownable, IClaimController, OnlyApi {\\n    /// @notice Keeps track of claim limits per question\\n    mapping(uint256 => uint256) public claimLimits;\\n\\n    /// @notice maps answers to the question they belong to\\n    mapping(uint256 => mapping(address => Answer)) public answers;\\n\\n    /// @notice maps all claimers to a question\\n    mapping(uint256 => address[]) public claims;\\n\\n    //------------------------------------------------------ ERRORS\\n\\n    /// @notice Throw if user tries to claim a question that is past its limit\\n    error ClaimLimitReached();\\n\\n    /// @notice Throw if a analyst tries to answer a question that it has not claimed\\n    error NeedClaimToAnswer();\\n\\n    /// @notice Throw if analyst tries to claim a question multiple times\\n    error AlreadyClaimed();\\n\\n    //------------------------------------------------------ STRUCTS\\n\\n    struct Answer {\\n        STATE state;\\n        address author;\\n        string answerURL;\\n        uint256 finalGrade;\\n        string scoringMetaDataURI; // store heuristics and such on ipfs\\n    }\\n\\n    // ------------------------------------------------------ ENUMS\\n\\n    enum STATE {\\n        UNINT,\\n        CLAIMED,\\n        ANSWERED\\n    }\\n\\n    // ------------------------------------------------------ FUNCTIONS\\n\\n    /**\\n     * @notice Initializes a question to receive claims\\n     * @param questionId The id of the question\\n     * @param claimLimit The limit for the amount of people that can claim the question\\n     */\\n    function initializeQuestion(uint256 questionId, uint256 claimLimit) public onlyApi {\\n        claimLimits[questionId] = claimLimit;\\n    }\\n\\n    function claim(address user, uint256 questionId) public onlyApi {\\n        if (claims[questionId].length >= claimLimits[questionId]) revert ClaimLimitReached();\\n        if (answers[questionId][user].author == user) revert AlreadyClaimed();\\n\\n        claims[questionId].push(user);\\n        Answer memory _answer = Answer({state: STATE.CLAIMED, author: user, answerURL: \\\"\\\", scoringMetaDataURI: \\\"\\\", finalGrade: 0});\\n        answers[questionId][user] = _answer;\\n    }\\n\\n    function answer(\\n        address user,\\n        uint256 questionId,\\n        string calldata answerURL\\n    ) public onlyOwner {\\n        if (answers[questionId][user].state != STATE.CLAIMED) revert NeedClaimToAnswer();\\n        answers[questionId][user].answerURL = answerURL;\\n    }\\n\\n    function getClaims(uint256 questionId) public view returns (address[] memory _claims) {\\n        return claims[questionId];\\n    }\\n\\n    function getClaimLimit(uint256 questionId) public view returns (uint256) {\\n        return claimLimits[questionId];\\n    }\\n\\n    function getClaimDataForUser(uint256 questionId, address user) public view returns (Answer memory _answer) {\\n        return answers[questionId][user];\\n    }\\n}\\n\",\"keccak256\":\"0xe7a175f06bbc7061f6718d067071d8115cd682d96d6fd09a94b4f24d0ddd43f2\",\"license\":\"MIT\"},\"src/contracts/Protocol/interfaces/IClaimController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IClaimController {\\n    function initializeQuestion(uint256 questionId, uint256 claimLimit) external;\\n\\n    function claim(address user, uint256 questionId) external;\\n\\n    function answer(\\n        address user,\\n        uint256 questionId,\\n        string calldata answerURL\\n    ) external;\\n}\\n\",\"keccak256\":\"0x2f3620da333026906853fe6394c516fd50b33bec988a008ef64812fa6bc6729c\",\"license\":\"MIT\"},\"src/contracts/Protocol/modifiers/OnlyAPI.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract OnlyApi is Ownable {\\n    address public questionApi;\\n\\n    // ------------------------------- Setter\\n    /**\\n     * @notice Sets the address of the question API.\\n     * @param _newApi The new address of the question API.\\n     */\\n    function setQuestionApi(address _newApi) external onlyOwner {\\n        questionApi = _newApi;\\n    }\\n\\n    // ------------------------ Modifiers\\n    modifier onlyApi() {\\n        if (_msgSender() != questionApi) revert NotTheApi();\\n        _;\\n    }\\n\\n    // ------------------------ Errors\\n    error NotTheApi();\\n}\\n\",\"keccak256\":\"0x0681de2966fa03720603c0e7361f8ee5d887b9526d074ba9c14dbf3b80978934\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061002d61002261003260201b60201c565b61003a60201b60201c565b6100fe565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b611a6e8061010d6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063a461272b1161008c578063c0875dfd11610066578063c0875dfd14610261578063de9951a61461027d578063f2fde38b14610299578063f894160e146102b5576100ea565b8063a461272b146101e5578063aad3ec9614610215578063bdb686de14610231576100ea565b8063715018a6116100c8578063715018a6146101595780637dfca71c14610163578063888af91d146101975780638da5cb5b146101c7576100ea565b80636baef497146100ef5780636e3c4dd71461010d578063701776f71461013d575b600080fd5b6100f76102e5565b60405161010491906112de565b60405180910390f35b61012760048036038101906101229190611339565b61030b565b6040516101349190611375565b60405180910390f35b61015760048036038101906101529190611390565b610323565b005b6101616103cd565b005b61017d600480360381019061017891906113fc565b610455565b60405161018e95949392919061154c565b60405180910390f35b6101b160048036038101906101ac9190611339565b6105d5565b6040516101be919061166b565b60405180910390f35b6101cf610676565b6040516101dc91906112de565b60405180910390f35b6101ff60048036038101906101fa9190611339565b61069f565b60405161020c9190611375565b60405180910390f35b61022f600480360381019061022a919061168d565b6106bc565b005b61024b600480360381019061024691906113fc565b610a7f565b60405161025891906117b2565b60405180910390f35b61027b600480360381019061027691906117d4565b610ca9565b005b61029760048036038101906102929190611866565b610d69565b005b6102b360048036038101906102ae91906117d4565b610f0c565b005b6102cf60048036038101906102ca9190611390565b611003565b6040516102dc91906112de565b60405180910390f35b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60026020528060005260406000206000915090505481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610364611051565b73ffffffffffffffffffffffffffffffffffffffff16146103b1576040517f92471d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060026000848152602001908152602001600020819055505050565b6103d5611051565b73ffffffffffffffffffffffffffffffffffffffff166103f3610676565b73ffffffffffffffffffffffffffffffffffffffff1614610449576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044090611926565b60405180910390fd5b6104536000611059565b565b6003602052816000526040600020602052806000526040600020600091509150508060000160009054906101000a900460ff16908060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010180546104be90611975565b80601f01602080910402602001604051908101604052809291908181526020018280546104ea90611975565b80156105375780601f1061050c57610100808354040283529160200191610537565b820191906000526020600020905b81548152906001019060200180831161051a57829003601f168201915b50505050509080600201549080600301805461055290611975565b80601f016020809104026020016040519081016040528092919081815260200182805461057e90611975565b80156105cb5780601f106105a0576101008083540402835291602001916105cb565b820191906000526020600020905b8154815290600101906020018083116105ae57829003601f168201915b5050505050905085565b60606004600083815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561066a57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610620575b50505050509050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600060026000838152602001908152602001600020549050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166106fd611051565b73ffffffffffffffffffffffffffffffffffffffff161461074a576040517f92471d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60026000828152602001908152602001600020546004600083815260200190815260200160002080549050106107ac576040517f9907008b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff166003600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610884576040517f646cf55800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60046000828152602001908152602001600020829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060006040518060a00160405280600160028111156109195761091861143c565b5b81526020018473ffffffffffffffffffffffffffffffffffffffff16815260200160405180602001604052806000815250815260200160008152602001604051806020016040528060008152508152509050806003600084815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548160ff021916908360028111156109e7576109e661143c565b5b021790555060208201518160000160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816001019080519060200190610a4f92919061111d565b50606082015181600201556080820151816003019080519060200190610a7692919061111d565b50905050505050565b610a876111a3565b6003600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060a00160405290816000820160009054906101000a900460ff166002811115610b0757610b0661143c565b5b6002811115610b1957610b1861143c565b5b81526020016000820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054610b8390611975565b80601f0160208091040260200160405190810160405280929190818152602001828054610baf90611975565b8015610bfc5780601f10610bd157610100808354040283529160200191610bfc565b820191906000526020600020905b815481529060010190602001808311610bdf57829003601f168201915b5050505050815260200160028201548152602001600382018054610c1f90611975565b80601f0160208091040260200160405190810160405280929190818152602001828054610c4b90611975565b8015610c985780601f10610c6d57610100808354040283529160200191610c98565b820191906000526020600020905b815481529060010190602001808311610c7b57829003601f168201915b505050505081525050905092915050565b610cb1611051565b73ffffffffffffffffffffffffffffffffffffffff16610ccf610676565b73ffffffffffffffffffffffffffffffffffffffff1614610d25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d1c90611926565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610d71611051565b73ffffffffffffffffffffffffffffffffffffffff16610d8f610676565b73ffffffffffffffffffffffffffffffffffffffff1614610de5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ddc90611926565b60405180910390fd5b60016002811115610df957610df861143c565b5b6003600085815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff166002811115610e6c57610e6b61143c565b5b14610ea3576040517f54a0346a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81816003600086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001019190610f059291906111fa565b5050505050565b610f14611051565b73ffffffffffffffffffffffffffffffffffffffff16610f32610676565b73ffffffffffffffffffffffffffffffffffffffff1614610f88576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7f90611926565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610ff7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fee90611a18565b60405180910390fd5b61100081611059565b50565b6004602052816000526040600020818154811061101f57600080fd5b906000526020600020016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b82805461112990611975565b90600052602060002090601f01602090048101928261114b5760008555611192565b82601f1061116457805160ff1916838001178555611192565b82800160010185558215611192579182015b82811115611191578251825591602001919060010190611176565b5b50905061119f9190611280565b5090565b6040518060a00160405280600060028111156111c2576111c161143c565b5b8152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016060815260200160008152602001606081525090565b82805461120690611975565b90600052602060002090601f016020900481019282611228576000855561126f565b82601f1061124157803560ff191683800117855561126f565b8280016001018555821561126f579182015b8281111561126e578235825591602001919060010190611253565b5b50905061127c9190611280565b5090565b5b80821115611299576000816000905550600101611281565b5090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006112c88261129d565b9050919050565b6112d8816112bd565b82525050565b60006020820190506112f360008301846112cf565b92915050565b600080fd5b600080fd5b6000819050919050565b61131681611303565b811461132157600080fd5b50565b6000813590506113338161130d565b92915050565b60006020828403121561134f5761134e6112f9565b5b600061135d84828501611324565b91505092915050565b61136f81611303565b82525050565b600060208201905061138a6000830184611366565b92915050565b600080604083850312156113a7576113a66112f9565b5b60006113b585828601611324565b92505060206113c685828601611324565b9150509250929050565b6113d9816112bd565b81146113e457600080fd5b50565b6000813590506113f6816113d0565b92915050565b60008060408385031215611413576114126112f9565b5b600061142185828601611324565b9250506020611432858286016113e7565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6003811061147c5761147b61143c565b5b50565b600081905061148d8261146b565b919050565b600061149d8261147f565b9050919050565b6114ad81611492565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156114ed5780820151818401526020810190506114d2565b838111156114fc576000848401525b50505050565b6000601f19601f8301169050919050565b600061151e826114b3565b61152881856114be565b93506115388185602086016114cf565b61154181611502565b840191505092915050565b600060a08201905061156160008301886114a4565b61156e60208301876112cf565b81810360408301526115808186611513565b905061158f6060830185611366565b81810360808301526115a18184611513565b90509695505050505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6115e2816112bd565b82525050565b60006115f483836115d9565b60208301905092915050565b6000602082019050919050565b6000611618826115ad565b61162281856115b8565b935061162d836115c9565b8060005b8381101561165e57815161164588826115e8565b975061165083611600565b925050600181019050611631565b5085935050505092915050565b60006020820190508181036000830152611685818461160d565b905092915050565b600080604083850312156116a4576116a36112f9565b5b60006116b2858286016113e7565b92505060206116c385828601611324565b9150509250929050565b6116d681611492565b82525050565b600082825260208201905092915050565b60006116f8826114b3565b61170281856116dc565b93506117128185602086016114cf565b61171b81611502565b840191505092915050565b61172f81611303565b82525050565b600060a08301600083015161174d60008601826116cd565b50602083015161176060208601826115d9565b506040830151848203604086015261177882826116ed565b915050606083015161178d6060860182611726565b50608083015184820360808601526117a582826116ed565b9150508091505092915050565b600060208201905081810360008301526117cc8184611735565b905092915050565b6000602082840312156117ea576117e96112f9565b5b60006117f8848285016113e7565b91505092915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261182657611825611801565b5b8235905067ffffffffffffffff81111561184357611842611806565b5b60208301915083600182028301111561185f5761185e61180b565b5b9250929050565b600080600080606085870312156118805761187f6112f9565b5b600061188e878288016113e7565b945050602061189f87828801611324565b935050604085013567ffffffffffffffff8111156118c0576118bf6112fe565b5b6118cc87828801611810565b925092505092959194509250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006119106020836114be565b915061191b826118da565b602082019050919050565b6000602082019050818103600083015261193f81611903565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061198d57607f821691505b6020821081036119a05761199f611946565b5b50919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611a026026836114be565b9150611a0d826119a6565b604082019050919050565b60006020820190508181036000830152611a31816119f5565b905091905056fea2646970667358221220f509ca107e3c8b19de6f4dd9cfc651d4c83bcac446ad16efe7e12c8a9ced3dfb64736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063a461272b1161008c578063c0875dfd11610066578063c0875dfd14610261578063de9951a61461027d578063f2fde38b14610299578063f894160e146102b5576100ea565b8063a461272b146101e5578063aad3ec9614610215578063bdb686de14610231576100ea565b8063715018a6116100c8578063715018a6146101595780637dfca71c14610163578063888af91d146101975780638da5cb5b146101c7576100ea565b80636baef497146100ef5780636e3c4dd71461010d578063701776f71461013d575b600080fd5b6100f76102e5565b60405161010491906112de565b60405180910390f35b61012760048036038101906101229190611339565b61030b565b6040516101349190611375565b60405180910390f35b61015760048036038101906101529190611390565b610323565b005b6101616103cd565b005b61017d600480360381019061017891906113fc565b610455565b60405161018e95949392919061154c565b60405180910390f35b6101b160048036038101906101ac9190611339565b6105d5565b6040516101be919061166b565b60405180910390f35b6101cf610676565b6040516101dc91906112de565b60405180910390f35b6101ff60048036038101906101fa9190611339565b61069f565b60405161020c9190611375565b60405180910390f35b61022f600480360381019061022a919061168d565b6106bc565b005b61024b600480360381019061024691906113fc565b610a7f565b60405161025891906117b2565b60405180910390f35b61027b600480360381019061027691906117d4565b610ca9565b005b61029760048036038101906102929190611866565b610d69565b005b6102b360048036038101906102ae91906117d4565b610f0c565b005b6102cf60048036038101906102ca9190611390565b611003565b6040516102dc91906112de565b60405180910390f35b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60026020528060005260406000206000915090505481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610364611051565b73ffffffffffffffffffffffffffffffffffffffff16146103b1576040517f92471d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060026000848152602001908152602001600020819055505050565b6103d5611051565b73ffffffffffffffffffffffffffffffffffffffff166103f3610676565b73ffffffffffffffffffffffffffffffffffffffff1614610449576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044090611926565b60405180910390fd5b6104536000611059565b565b6003602052816000526040600020602052806000526040600020600091509150508060000160009054906101000a900460ff16908060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010180546104be90611975565b80601f01602080910402602001604051908101604052809291908181526020018280546104ea90611975565b80156105375780601f1061050c57610100808354040283529160200191610537565b820191906000526020600020905b81548152906001019060200180831161051a57829003601f168201915b50505050509080600201549080600301805461055290611975565b80601f016020809104026020016040519081016040528092919081815260200182805461057e90611975565b80156105cb5780601f106105a0576101008083540402835291602001916105cb565b820191906000526020600020905b8154815290600101906020018083116105ae57829003601f168201915b5050505050905085565b60606004600083815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561066a57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610620575b50505050509050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600060026000838152602001908152602001600020549050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166106fd611051565b73ffffffffffffffffffffffffffffffffffffffff161461074a576040517f92471d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60026000828152602001908152602001600020546004600083815260200190815260200160002080549050106107ac576040517f9907008b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff166003600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610884576040517f646cf55800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60046000828152602001908152602001600020829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060006040518060a00160405280600160028111156109195761091861143c565b5b81526020018473ffffffffffffffffffffffffffffffffffffffff16815260200160405180602001604052806000815250815260200160008152602001604051806020016040528060008152508152509050806003600084815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548160ff021916908360028111156109e7576109e661143c565b5b021790555060208201518160000160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816001019080519060200190610a4f92919061111d565b50606082015181600201556080820151816003019080519060200190610a7692919061111d565b50905050505050565b610a876111a3565b6003600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060a00160405290816000820160009054906101000a900460ff166002811115610b0757610b0661143c565b5b6002811115610b1957610b1861143c565b5b81526020016000820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054610b8390611975565b80601f0160208091040260200160405190810160405280929190818152602001828054610baf90611975565b8015610bfc5780601f10610bd157610100808354040283529160200191610bfc565b820191906000526020600020905b815481529060010190602001808311610bdf57829003601f168201915b5050505050815260200160028201548152602001600382018054610c1f90611975565b80601f0160208091040260200160405190810160405280929190818152602001828054610c4b90611975565b8015610c985780601f10610c6d57610100808354040283529160200191610c98565b820191906000526020600020905b815481529060010190602001808311610c7b57829003601f168201915b505050505081525050905092915050565b610cb1611051565b73ffffffffffffffffffffffffffffffffffffffff16610ccf610676565b73ffffffffffffffffffffffffffffffffffffffff1614610d25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d1c90611926565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610d71611051565b73ffffffffffffffffffffffffffffffffffffffff16610d8f610676565b73ffffffffffffffffffffffffffffffffffffffff1614610de5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ddc90611926565b60405180910390fd5b60016002811115610df957610df861143c565b5b6003600085815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff166002811115610e6c57610e6b61143c565b5b14610ea3576040517f54a0346a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81816003600086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001019190610f059291906111fa565b5050505050565b610f14611051565b73ffffffffffffffffffffffffffffffffffffffff16610f32610676565b73ffffffffffffffffffffffffffffffffffffffff1614610f88576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7f90611926565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610ff7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fee90611a18565b60405180910390fd5b61100081611059565b50565b6004602052816000526040600020818154811061101f57600080fd5b906000526020600020016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b82805461112990611975565b90600052602060002090601f01602090048101928261114b5760008555611192565b82601f1061116457805160ff1916838001178555611192565b82800160010185558215611192579182015b82811115611191578251825591602001919060010190611176565b5b50905061119f9190611280565b5090565b6040518060a00160405280600060028111156111c2576111c161143c565b5b8152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016060815260200160008152602001606081525090565b82805461120690611975565b90600052602060002090601f016020900481019282611228576000855561126f565b82601f1061124157803560ff191683800117855561126f565b8280016001018555821561126f579182015b8281111561126e578235825591602001919060010190611253565b5b50905061127c9190611280565b5090565b5b80821115611299576000816000905550600101611281565b5090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006112c88261129d565b9050919050565b6112d8816112bd565b82525050565b60006020820190506112f360008301846112cf565b92915050565b600080fd5b600080fd5b6000819050919050565b61131681611303565b811461132157600080fd5b50565b6000813590506113338161130d565b92915050565b60006020828403121561134f5761134e6112f9565b5b600061135d84828501611324565b91505092915050565b61136f81611303565b82525050565b600060208201905061138a6000830184611366565b92915050565b600080604083850312156113a7576113a66112f9565b5b60006113b585828601611324565b92505060206113c685828601611324565b9150509250929050565b6113d9816112bd565b81146113e457600080fd5b50565b6000813590506113f6816113d0565b92915050565b60008060408385031215611413576114126112f9565b5b600061142185828601611324565b9250506020611432858286016113e7565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6003811061147c5761147b61143c565b5b50565b600081905061148d8261146b565b919050565b600061149d8261147f565b9050919050565b6114ad81611492565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156114ed5780820151818401526020810190506114d2565b838111156114fc576000848401525b50505050565b6000601f19601f8301169050919050565b600061151e826114b3565b61152881856114be565b93506115388185602086016114cf565b61154181611502565b840191505092915050565b600060a08201905061156160008301886114a4565b61156e60208301876112cf565b81810360408301526115808186611513565b905061158f6060830185611366565b81810360808301526115a18184611513565b90509695505050505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6115e2816112bd565b82525050565b60006115f483836115d9565b60208301905092915050565b6000602082019050919050565b6000611618826115ad565b61162281856115b8565b935061162d836115c9565b8060005b8381101561165e57815161164588826115e8565b975061165083611600565b925050600181019050611631565b5085935050505092915050565b60006020820190508181036000830152611685818461160d565b905092915050565b600080604083850312156116a4576116a36112f9565b5b60006116b2858286016113e7565b92505060206116c385828601611324565b9150509250929050565b6116d681611492565b82525050565b600082825260208201905092915050565b60006116f8826114b3565b61170281856116dc565b93506117128185602086016114cf565b61171b81611502565b840191505092915050565b61172f81611303565b82525050565b600060a08301600083015161174d60008601826116cd565b50602083015161176060208601826115d9565b506040830151848203604086015261177882826116ed565b915050606083015161178d6060860182611726565b50608083015184820360808601526117a582826116ed565b9150508091505092915050565b600060208201905081810360008301526117cc8184611735565b905092915050565b6000602082840312156117ea576117e96112f9565b5b60006117f8848285016113e7565b91505092915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261182657611825611801565b5b8235905067ffffffffffffffff81111561184357611842611806565b5b60208301915083600182028301111561185f5761185e61180b565b5b9250929050565b600080600080606085870312156118805761187f6112f9565b5b600061188e878288016113e7565b945050602061189f87828801611324565b935050604085013567ffffffffffffffff8111156118c0576118bf6112fe565b5b6118cc87828801611810565b925092505092959194509250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006119106020836114be565b915061191b826118da565b602082019050919050565b6000602082019050818103600083015261193f81611903565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061198d57607f821691505b6020821081036119a05761199f611946565b5b50919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611a026026836114be565b9150611a0d826119a6565b604082019050919050565b60006020820190508181036000830152611a31816119f5565b905091905056fea2646970667358221220f509ca107e3c8b19de6f4dd9cfc651d4c83bcac446ad16efe7e12c8a9ced3dfb64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "initializeQuestion(uint256,uint256)": {
        "params": {
          "claimLimit": "The limit for the amount of people that can claim the question",
          "questionId": "The id of the question"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setQuestionApi(address)": {
        "params": {
          "_newApi": "The new address of the question API."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "AlreadyClaimed()": [
        {
          "notice": "Throw if analyst tries to claim a question multiple times"
        }
      ],
      "ClaimLimitReached()": [
        {
          "notice": "Throw if user tries to claim a question that is past its limit"
        }
      ],
      "NeedClaimToAnswer()": [
        {
          "notice": "Throw if a analyst tries to answer a question that it has not claimed"
        }
      ]
    },
    "kind": "user",
    "methods": {
      "answers(uint256,address)": {
        "notice": "maps answers to the question they belong to"
      },
      "claimLimits(uint256)": {
        "notice": "Keeps track of claim limits per question"
      },
      "claims(uint256,uint256)": {
        "notice": "maps all claimers to a question"
      },
      "initializeQuestion(uint256,uint256)": {
        "notice": "Initializes a question to receive claims"
      },
      "setQuestionApi(address)": {
        "notice": "Sets the address of the question API."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "src/contracts/Protocol/ClaimController.sol:ClaimController",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5494,
        "contract": "src/contracts/Protocol/ClaimController.sol:ClaimController",
        "label": "questionApi",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3538,
        "contract": "src/contracts/Protocol/ClaimController.sol:ClaimController",
        "label": "claimLimits",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3546,
        "contract": "src/contracts/Protocol/ClaimController.sol:ClaimController",
        "label": "answers",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(Answer)3573_storage))"
      },
      {
        "astId": 3552,
        "contract": "src/contracts/Protocol/ClaimController.sol:ClaimController",
        "label": "claims",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_array(t_address)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_enum(STATE)3577": {
        "encoding": "inplace",
        "label": "enum ClaimController.STATE",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(Answer)3573_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ClaimController.Answer)",
        "numberOfBytes": "32",
        "value": "t_struct(Answer)3573_storage"
      },
      "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(Answer)3573_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct ClaimController.Answer))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(Answer)3573_storage)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Answer)3573_storage": {
        "encoding": "inplace",
        "label": "struct ClaimController.Answer",
        "members": [
          {
            "astId": 3564,
            "contract": "src/contracts/Protocol/ClaimController.sol:ClaimController",
            "label": "state",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(STATE)3577"
          },
          {
            "astId": 3566,
            "contract": "src/contracts/Protocol/ClaimController.sol:ClaimController",
            "label": "author",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3568,
            "contract": "src/contracts/Protocol/ClaimController.sol:ClaimController",
            "label": "answerURL",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 3570,
            "contract": "src/contracts/Protocol/ClaimController.sol:ClaimController",
            "label": "finalGrade",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3572,
            "contract": "src/contracts/Protocol/ClaimController.sol:ClaimController",
            "label": "scoringMetaDataURI",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}