{
  "address": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_metric",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NotTheApi",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "createCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        }
      ],
      "name": "payForCreateQuestion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        }
      ],
      "name": "payForVoting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "questionApi",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_cost",
          "type": "uint256"
        }
      ],
      "name": "setCreateCost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_metric",
          "type": "address"
        }
      ],
      "name": "setMetric",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newApi",
          "type": "address"
        }
      ],
      "name": "setQuestionApi",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_cost",
          "type": "uint256"
        }
      ],
      "name": "setVoteCost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "voteCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb826dd9824cf56df4300effafa6c9156eee865ecc8a99c24327b3f951f3a31f9",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
    "transactionIndex": 0,
    "gasUsed": "882828",
    "logsBloom": "0x
    "blockHash": "0x474b7cbafcbd036eee4fa9cfe18dc568b69db70c0f03aa6a475e0b5eb6d6a34c",
    "transactionHash": "0xb826dd9824cf56df4300effafa6c9156eee865ecc8a99c24327b3f951f3a31f9",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 11,
        "transactionHash": "0xb826dd9824cf56df4300effafa6c9156eee865ecc8a99c24327b3f951f3a31f9",
        "address": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x474b7cbafcbd036eee4fa9cfe18dc568b69db70c0f03aa6a475e0b5eb6d6a34c"
      }
    ],
    "blockNumber": 11,
    "cumulativeGasUsed": "882828",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9"
  ],
  "numDeployments": 1,
  "solcInputHash": "23a5c42ffdc6fce9090df76d82673573",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_metric\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotTheApi\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"createCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"}],\"name\":\"payForCreateQuestion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"}],\"name\":\"payForVoting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"questionApi\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cost\",\"type\":\"uint256\"}],\"name\":\"setCreateCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_metric\",\"type\":\"address\"}],\"name\":\"setMetric\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newApi\",\"type\":\"address\"}],\"name\":\"setQuestionApi\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cost\",\"type\":\"uint256\"}],\"name\":\"setVoteCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voteCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"payForCreateQuestion(address,uint256)\":{\"params\":{\"_user\":\"The address of the user who wants to pay for creating a question.\"}},\"payForVoting(address,uint256)\":{\"params\":{\"user\":\"The address of the user who wants to pay for voting on a question.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setCreateCost(uint256)\":{\"params\":{\"_cost\":\"The new cost of creating a question\"}},\"setQuestionApi(address)\":{\"params\":{\"_newApi\":\"The new address of the question API.\"}},\"setVoteCost(uint256)\":{\"params\":{\"_cost\":\"The new cost of voting for a question\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"payForCreateQuestion(address,uint256)\":{\"notice\":\"Makes a user pay for creating a question.  We transfer the funds from the user executing the function to  the contract.\"},\"payForVoting(address,uint256)\":{\"notice\":\"Makes a user pay for voting on a question.  We transfer the funds from the user executing the function to  the contract.\"},\"setCreateCost(uint256)\":{\"notice\":\"Changes the cost of creating a question\"},\"setQuestionApi(address)\":{\"notice\":\"Sets the address of the question API.\"},\"setVoteCost(uint256)\":{\"notice\":\"Changes the cost of voting for a question\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/Protocol/ActionCostController.sol\":\"ActionCostController\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xdadd41acb749920eccf40aeaa8d291adf9751399a7343561bad13e7a8d99be0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"src/contracts/MetricToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n/// @custom:security-contact contracts@metricsdao.com\\ncontract MetricToken is ERC20 {\\n    constructor() ERC20(\\\"METRIC\\\", \\\"METRIC\\\") {\\n        _mint(_msgSender(), 1000000000 * 10**decimals());\\n    }\\n}\\n\",\"keccak256\":\"0x015317ec77ea633af5f2af9cde22891298225bbd33fc6309c06d87579920329b\",\"license\":\"MIT\"},\"src/contracts/Protocol/ActionCostController.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../MetricToken.sol\\\";\\nimport \\\"./Vault.sol\\\";\\n\\n// Interfaces\\nimport \\\"./interfaces/IActionCostController.sol\\\";\\n\\n// Modifiers\\nimport \\\"./modifiers/OnlyAPI.sol\\\";\\n\\ncontract ActionCostController is Ownable, OnlyApi, IActionCostController {\\n    IERC20 private metric;\\n    Vault private vault;\\n\\n    uint256 public createCost;\\n    uint256 public voteCost;\\n\\n    constructor(address _metric, address _vault) {\\n        metric = IERC20(_metric);\\n        vault = Vault(_vault);\\n        createCost = 1e18;\\n        voteCost = 1e18;\\n    }\\n\\n    /**\\n    * @notice Makes a user pay for creating a question. \\n            We transfer the funds from the user executing the function to \\n            the contract.\\n    * @param _user The address of the user who wants to pay for creating a question.\\n    */\\n    function payForCreateQuestion(address _user, uint256 questionId) external onlyApi {\\n        vault.lockMetric(_user, createCost, questionId, 0);\\n    }\\n\\n    /**\\n    * @notice Makes a user pay for voting on a question. \\n            We transfer the funds from the user executing the function to \\n            the contract.\\n    * @param user The address of the user who wants to pay for voting on a question.\\n    */\\n    function payForVoting(address user, uint256 questionId) external onlyApi {\\n        vault.lockMetric(user, voteCost, questionId, 0);\\n    }\\n\\n    // ------------------------------- Getter\\n    // ------------------------------- Admin\\n\\n    /**\\n     * @notice Changes the cost of creating a question\\n     * @param _cost The new cost of creating a question\\n     */\\n    function setCreateCost(uint256 _cost) external onlyOwner {\\n        createCost = _cost;\\n    }\\n\\n    /**\\n     * @notice Changes the cost of voting for a question\\n     * @param _cost The new cost of voting for a question\\n     */\\n    function setVoteCost(uint256 _cost) external onlyOwner {\\n        voteCost = _cost;\\n    }\\n\\n    function setMetric(address _metric) public onlyOwner {\\n        metric = IERC20(_metric);\\n    }\\n}\\n\",\"keccak256\":\"0xb2f1e33e75fed09f3c1b06c0f2355243bab5cd027c040246b7fc2334922d6526\",\"license\":\"MIT\"},\"src/contracts/Protocol/QuestionStateController.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n// Interfaces\\nimport \\\"./interfaces/IQuestionStateController.sol\\\";\\n\\n// Modifiers\\nimport \\\"./modifiers/OnlyAPI.sol\\\";\\n\\ncontract QuestionStateController is IQuestionStateController, Ownable, OnlyApi {\\n    // Mapping for all questions that are upvoted by the user?\\n    mapping(address => mapping(uint256 => bool)) public hasVoted;\\n    mapping(address => mapping(uint256 => uint256)) public questionIndex;\\n\\n    mapping(uint256 => QuestionStats) public questionByState;\\n\\n    //TODO mapping     mapping(STATE => uint256[]) public questionState;\\n\\n    // TODO do we want user to lose their metric if a question is closed? they voted on somethjing bad\\n\\n    /**\\n     * @notice Initializes a question to draft.\\n     * @param questionId The id of the question\\n     */\\n    function initializeQuestion(uint256 questionId, string calldata uri) public onlyApi {\\n        QuestionStats memory question;\\n\\n        question.questionId = questionId;\\n        question.uri = uri;\\n        question.totalVotes = 1;\\n        question.questionState = STATE.VOTING;\\n\\n        questionByState[questionId] = question;\\n    }\\n\\n    function publish(uint256 questionId) public onlyApi onlyState(STATE.VOTING, questionId) {\\n        // if some voting barrier is passed, we can publish the question\\n        QuestionStats storage _question = questionByState[questionId];\\n        _question.questionState = STATE.PUBLISHED;\\n    }\\n\\n    function voteFor(address _user, uint256 questionId) public onlyApi onlyState(STATE.VOTING, questionId) {\\n        // Checks\\n        if (hasVoted[_user][questionId]) revert HasAlreadyVotedForQuestion();\\n\\n        // Effects\\n        QuestionStats storage _question = questionByState[questionId];\\n        _question.totalVotes += 1;\\n\\n        hasVoted[_user][questionId] = true;\\n        _question.voters.push(_user);\\n        questionIndex[_user][questionId] = _question.voters.length - 1;\\n\\n        // Interactions\\n    }\\n\\n    function unvoteFor(address _user, uint256 questionId) public onlyApi onlyState(STATE.VOTING, questionId) {\\n        // Checks\\n        if (!hasVoted[_user][questionId]) revert HasNotVotedForQuestion();\\n\\n        // Effects\\n        QuestionStats storage _question = questionByState[questionId];\\n        _question.totalVotes -= 1;\\n\\n        uint256 index = questionIndex[_user][questionId];\\n        delete _question.voters[index];\\n\\n        hasVoted[_user][questionId] = false;\\n\\n        // Interactions\\n    }\\n\\n    function setDisqualifiedState(uint256 questionId) public onlyApi {\\n        QuestionStats storage _question = questionByState[questionId];\\n        _question.questionState = STATE.DISQUALIFIED;\\n    }\\n\\n    // TODO batch voting and batch operations and look into arrays as parameters security risk\\n\\n    //------------------------------------------------------ View Functions\\n\\n    function getState(uint256 questionId) public view returns (uint256 currentState) {\\n        QuestionStats memory _question = questionByState[questionId];\\n        return uint256(_question.questionState);\\n    }\\n\\n    function getVoters(uint256 questionId) public view returns (address[] memory voters) {\\n        QuestionStats memory _question = questionByState[questionId];\\n        return _question.voters;\\n    }\\n\\n    function getTotalVotes(uint256 questionId) public view returns (uint256) {\\n        QuestionStats memory _question = questionByState[questionId];\\n        return _question.totalVotes;\\n    }\\n\\n    function getQuestionsByState(\\n        STATE currentState,\\n        uint256 currentQuestionId,\\n        uint256 offset\\n    ) public view returns (QuestionStats[] memory) {\\n        uint256 j = 0;\\n        uint256 limit;\\n        uint256 sizeOfArray;\\n        currentQuestionId -= 1;\\n        if (currentQuestionId > offset) {\\n            limit = currentQuestionId - offset;\\n            sizeOfArray = (currentQuestionId - offset) + 1;\\n        } else {\\n            limit = 1;\\n            sizeOfArray = currentQuestionId;\\n        }\\n        QuestionStats[] memory arr = new QuestionStats[](sizeOfArray);\\n        for (uint256 i = currentQuestionId; i >= limit; i--) {\\n            if (questionByState[i].questionState == currentState) {\\n                arr[j] = questionByState[i];\\n                j++;\\n            }\\n        }\\n        return arr;\\n    }\\n\\n    //------------------------------------------------------ Errors\\n    error HasNotVotedForQuestion();\\n    error HasAlreadyVotedForQuestion();\\n    error InvalidStateTransition();\\n\\n    //------------------------------------------------------ Structs\\n    modifier onlyState(STATE required, uint256 questionId) {\\n        if (uint256(required) != getState(questionId)) revert InvalidStateTransition();\\n        _;\\n    }\\n\\n    struct QuestionStats {\\n        uint256 questionId;\\n        string uri;\\n        address[] voters;\\n        uint256 totalVotes;\\n        STATE questionState;\\n    }\\n}\\n\",\"keccak256\":\"0x942b312cbac744b9c1e3281a55e13b4ff5c62cf9686db37cebc20d47a7215c78\",\"license\":\"MIT\"},\"src/contracts/Protocol/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./QuestionStateController.sol\\\";\\n\\n// Interfaces\\nimport \\\"./interfaces/IQuestionStateController.sol\\\";\\n\\n// Modifiers\\nimport \\\"./modifiers/OnlyCostController.sol\\\";\\n\\ncontract Vault is Ownable, OnlyCostController {\\n    IERC20 public metric;\\n    IQuestionStateController public questionStateController;\\n\\n    STATUS public status;\\n\\n    /// @notice Address to the MetricsDAO treasury.\\n    address public treasury;\\n\\n    /// @notice Keeps track of the quantity of deposits per user.\\n    mapping(address => uint256[]) public depositsByWithdrawers;\\n\\n    /// @notice Keeps track of the amount of METRIC locked per question\\n    mapping(uint256 => uint256) public lockedMetricByQuestion;\\n\\n    /// @notice Keeps track of total amount in vault for a given user.\\n    mapping(address => uint256) public totalLockedInVaults;\\n\\n    /// @notice Keeps track of the quantity of withdrawals per user.\\n    mapping(uint256 => mapping(uint256 => mapping(address => lockAttributes))) public lockedMetric;\\n\\n    //------------------------------------------------------ ERRORS\\n\\n    /// @notice Throw if user tries to withdraw Metric from a question it does not own.\\n    error NotTheDepositor();\\n    /// @notice Throw if user tries to withdraw Metric without having first deposited.\\n    error NoMetricDeposited();\\n    /// @notice Throw if user tries to lock Metric for a question that has a different state than UNINT.\\n    error QuestionHasInvalidStatus();\\n    /// @notice Throw if user tries to claim Metric for a question that has not been published (yet).\\n    error QuestionNotPublished();\\n    /// @notice Throw if the same question is slashed twice.\\n    error AlreadySlashed();\\n    /// @notice Throw if address is equal to address(0).\\n    error InvalidAddress();\\n    /// @notice Throw if user tries to lock METRIC for a stage that does not require locking.\\n    error InvalidStage();\\n\\n    //------------------------------------------------------ STRUCTS\\n\\n    struct lockAttributes {\\n        address user;\\n        uint256 amount;\\n        STATUS status;\\n    }\\n\\n    //------------------------------------------------------ ENUMS\\n\\n    enum STATUS {\\n        UNINT,\\n        DEPOSITED,\\n        WITHDRAWN,\\n        SLASHED\\n    }\\n\\n    //------------------------------------------------------ EVENTS\\n\\n    /// @notice Event emitted when Metric is withdrawn.\\n    event Withdraw(address indexed user, uint256 indexed amount);\\n    /// @notice Event emitted when a question is slashed.\\n    event Slashed(address indexed user, uint256 indexed questionId);\\n\\n    //------------------------------------------------------ CONSTRUCTOR\\n\\n    /**\\n     * @notice Constructor sets the question Metric token, QuestionStateController and the treasury.\\n     * @param metricTokenAddress The Metric token address\\n     * @param questionStateControllerAddress The QuestionStateController address.\\n     * @param treasuryAddress The treasury address.\\n     */\\n    constructor(\\n        address metricTokenAddress,\\n        address questionStateControllerAddress,\\n        address treasuryAddress\\n    ) {\\n        metric = IERC20(metricTokenAddress);\\n        questionStateController = IQuestionStateController(questionStateControllerAddress);\\n        treasury = treasuryAddress;\\n    }\\n\\n    //------------------------------------------------------ FUNCTIONS\\n\\n    /**\\n     * @notice Locks METRIC for creating a question\\n     * @param user The address of the user locking the METRIC\\n     * @param amount The amount of METRIC to lock\\n     * @param questionId The question id'\\n     * @param stage The stage for which METRIC is locked\\n     */\\n    function lockMetric(\\n        address user,\\n        uint256 amount,\\n        uint256 questionId,\\n        uint256 stage\\n    ) external onlyCostController {\\n        // Checks if METRIC is locked for a valid stage.\\n        if (stage >= 3) revert InvalidStage();\\n        // Checks if there has not been a deposit yet\\n        if (lockedMetric[questionId][stage][user].status != STATUS.UNINT) revert QuestionHasInvalidStatus();\\n\\n        // Accounting & changes\\n        lockedMetric[questionId][stage][user].user = user;\\n        lockedMetric[questionId][stage][user].amount += amount;\\n\\n        lockedMetricByQuestion[questionId] += amount;\\n\\n        lockedMetric[questionId][stage][user].status = STATUS.DEPOSITED;\\n\\n        totalLockedInVaults[user] += amount;\\n        depositsByWithdrawers[user].push(questionId);\\n\\n        // Transfers Metric from the user to the vault.\\n        metric.transferFrom(user, address(this), amount);\\n    }\\n\\n    /**\\n     * @notice Allows a user to withdraw METRIC locked for a question, after the question is published.\\n     * @param questionId The question id\\n     * @param stage The stage for which the user is withdrawing metric from a question.\\n     */\\n    function withdrawMetric(uint256 questionId, uint256 stage) external {\\n        // Checks if Metric is withdrawn for a valid stage.\\n        if (stage >= 3) revert InvalidStage();\\n        // Checks that only the depositer can withdraw the metric\\n        if (_msgSender() != lockedMetric[questionId][stage][_msgSender()].user) revert NotTheDepositor();\\n        // Checks that the metric to withdraw is not 0\\n        if (lockedMetric[questionId][stage][_msgSender()].status != STATUS.DEPOSITED) revert NoMetricDeposited();\\n\\n        if (stage == 0) {\\n            // Checks that the question is published\\n            if (questionStateController.getState(questionId) != uint256(IQuestionStateController.STATE.PUBLISHED)) revert QuestionNotPublished();\\n\\n            // Accounting & changes\\n            uint256 toWithdraw = lockedMetric[questionId][stage][_msgSender()].amount;\\n\\n            lockedMetric[questionId][stage][_msgSender()].status = STATUS.WITHDRAWN;\\n            lockedMetric[questionId][stage][_msgSender()].amount = 0;\\n\\n            lockedMetricByQuestion[questionId] -= toWithdraw;\\n            totalLockedInVaults[_msgSender()] -= toWithdraw;\\n\\n            // Transfers Metric from the vault to the user.\\n            metric.transfer(_msgSender(), toWithdraw);\\n\\n            emit Withdraw(_msgSender(), toWithdraw);\\n        } else if (stage == 1) {\\n            // if (submissionPeriod == active) revert SubmissionPeriodActive();\\n        } else {\\n            // if (reviewPeriod == active) revert ReviewPeriodActive();\\n        }\\n    }\\n\\n    /**\\n     * @notice Allows onlyOwner to slash a question -- halfing the METRIC locked for the question.\\n     * @param questionId The question id\\n     */\\n    // function slashMetric(uint256 questionId) external onlyOwner {\\n    //     // Check that the question has not been slashed yet.\\n    //     if (lockedMetric[questionId][0].status == STATUS.SLASHED) revert AlreadySlashed();\\n\\n    //     lockedMetric[questionId][0].status = STATUS.SLASHED;\\n\\n    //     // Send half of the Metric to the treasury\\n    //     metric.transfer(treasury, lockedMetricByQuestion[questionId] / 2);\\n\\n    //     // Return the other half of the Metric to the user\\n    //     metric.transfer(lockedMetric[questionId][0].user, lockedMetric[questionId][0].amount / 2);\\n\\n    //     emit Slashed(lockedMetric[questionId][0].user, questionId);\\n    // }\\n\\n    /**\\n     * @notice Gets the questions that a user has created.\\n     * @param user The address of the user.\\n     * @return The questions that the user has created.\\n     */\\n    function getVaultsByWithdrawer(address user) external view returns (uint256[] memory) {\\n        return depositsByWithdrawers[user];\\n    }\\n\\n    /**\\n     * @notice Gets the information about the vault attributes of a question.\\n     * @param questionId The question id.\\n     * @param stage The stage of the question.\\n     * @param user The address of the user.\\n     * @return A struct containing the attributes of the question (withdrawer, amount, status).\\n     */\\n    function getVaultById(\\n        uint256 questionId,\\n        uint256 stage,\\n        address user\\n    ) external view returns (lockAttributes memory) {\\n        return lockedMetric[questionId][stage][user];\\n    }\\n\\n    function getLockedMetricByQuestion(uint256 questionId) public view returns (uint256) {\\n        return lockedMetricByQuestion[questionId];\\n    }\\n\\n    function getUserFromProperties(\\n        uint256 questionId,\\n        uint256 stage,\\n        address user\\n    ) public view returns (address) {\\n        return lockedMetric[questionId][stage][user].user;\\n    }\\n\\n    function getAmountFromProperties(\\n        uint256 questionId,\\n        uint256 stage,\\n        address user\\n    ) public view returns (uint256) {\\n        return lockedMetric[questionId][stage][user].amount;\\n    }\\n\\n    function getLockedPerUser(address _user) public view returns (uint256) {\\n        return totalLockedInVaults[_user];\\n    }\\n\\n    /**\\n     * @notice Gets the total amount of Metric locked in the vault.\\n     * @return The total amount of Metric locked in the vault.\\n     */\\n    function getMetricTotalLockedBalance() external view returns (uint256) {\\n        return metric.balanceOf(address(this));\\n    }\\n\\n    //------------------------------------------------------ OWNER FUNCTIONS\\n\\n    /**\\n     * @notice Allows owner to update the QuestionStateController.\\n     */\\n    function setQuestionStateController(address _questionStateController) public onlyOwner {\\n        if (_questionStateController == address(0)) revert InvalidAddress();\\n        questionStateController = IQuestionStateController(_questionStateController);\\n    }\\n\\n    /**\\n     * @notice Allows owner to update the treasury address.\\n     */\\n    function setTreasury(address _treasury) public onlyOwner {\\n        treasury = _treasury;\\n    }\\n\\n    /**\\n     * @notice Allows owner to update the Metric token address.\\n     */\\n    function setMetric(address _metric) public onlyOwner {\\n        if (_metric == address(0)) revert InvalidAddress();\\n        metric = IERC20(_metric);\\n    }\\n}\\n\",\"keccak256\":\"0xbca04cc5874520f0c1438f5bd85152e504d16d4081e06f9fe28ed24bac1b43b0\",\"license\":\"MIT\"},\"src/contracts/Protocol/interfaces/IActionCostController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IActionCostController {\\n    function payForCreateQuestion(address _user, uint256 questionId) external;\\n\\n    function setCreateCost(uint256 _cost) external;\\n\\n    function payForVoting(address user, uint256 questionId) external;\\n}\\n\",\"keccak256\":\"0xcbe03f87d165974beb31cc141166c0f90bb86be86796d38cef85fb9e5b0b97e0\",\"license\":\"MIT\"},\"src/contracts/Protocol/interfaces/IQuestionStateController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IQuestionStateController {\\n    function initializeQuestion(uint256 questionId, string calldata uri) external;\\n\\n    function voteFor(address _user, uint256 questionId) external;\\n\\n    function unvoteFor(address _user, uint256 questionId) external;\\n\\n    function publish(uint256 questionId) external;\\n\\n    // TODO currentState can probably be like a uint8, it depends on how many states we have\\n    function getState(uint256 quesitonId) external view returns (uint256 currentState);\\n\\n    function setDisqualifiedState(uint256 questionId) external;\\n\\n    enum STATE {\\n        // TODO this where it becomes a challenge, can be claimed and answered\\n        UNINIT,\\n        VOTING,\\n        PUBLISHED, // TODO this where it becomes a challenge, can be claimed and answered\\n        DISQUALIFIED,\\n        COMPLETED\\n    }\\n}\\n\",\"keccak256\":\"0x830f6fc04eabf46ce0ecc5b224c10fb0b0df157430ee95e877f300e33240ae82\",\"license\":\"MIT\"},\"src/contracts/Protocol/modifiers/OnlyAPI.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract OnlyApi is Ownable {\\n    address public questionApi;\\n\\n    // ------------------------------- Setter\\n    /**\\n     * @notice Sets the address of the question API.\\n     * @param _newApi The new address of the question API.\\n     */\\n    function setQuestionApi(address _newApi) external onlyOwner {\\n        questionApi = _newApi;\\n    }\\n\\n    // ------------------------ Modifiers\\n    modifier onlyApi() {\\n        if (_msgSender() != questionApi) revert NotTheApi();\\n        _;\\n    }\\n\\n    // ------------------------ Errors\\n    error NotTheApi();\\n}\\n\",\"keccak256\":\"0x0681de2966fa03720603c0e7361f8ee5d887b9526d074ba9c14dbf3b80978934\",\"license\":\"MIT\"},\"src/contracts/Protocol/modifiers/OnlyCostController.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract OnlyCostController is Ownable {\\n    address public costController;\\n\\n    // ------------------------------- Setter\\n    /**\\n     * @notice Sets the address of the ActionCostController.\\n     * @param _newCostController The new address of the ActionCostController.\\n     */\\n    function setCostController(address _newCostController) external onlyOwner {\\n        costController = _newCostController;\\n    }\\n\\n    // ------------------------ Modifiers\\n    modifier onlyCostController() {\\n        if (_msgSender() != costController) revert NotTheCostController();\\n        _;\\n    }\\n\\n    // ------------------------ Errors\\n    error NotTheCostController();\\n}\\n\",\"keccak256\":\"0x4c3f6b61445fe478b6b3248f1ac2a6f483111c1b0dd89c722c3351f1ece35a86\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162000f6338038062000f63833981810160405281019062000037919062000235565b620000576200004b620000ff60201b60201c565b6200010760201b60201c565b81600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550670de0b6b3a7640000600481905550670de0b6b3a764000060058190555050506200027c565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001fd82620001d0565b9050919050565b6200020f81620001f0565b81146200021b57600080fd5b50565b6000815190506200022f8162000204565b92915050565b600080604083850312156200024f576200024e620001cb565b5b60006200025f858286016200021e565b925050602062000272858286016200021e565b9150509250929050565b610cd7806200028c6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063715018a611610071578063715018a6146101655780638da5cb5b1461016f578063ba0bd64a1461018d578063c0875dfd146101ab578063c7bca409146101c7578063f2fde38b146101e3576100b4565b8063186a8131146100b9578063308879bf146100d557806347365f5c146100f15780634c1b8ffd1461010d5780636baef4971461012b578063708f7c7d14610149575b600080fd5b6100d360048036038101906100ce9190610a1a565b6101ff565b005b6100ef60048036038101906100ea9190610a5a565b610327565b005b61010b60048036038101906101069190610a87565b6103ad565b005b61011561046d565b6040516101229190610ac3565b60405180910390f35b610133610473565b6040516101409190610aed565b60405180910390f35b610163600480360381019061015e9190610a1a565b610499565b005b61016d6105c1565b005b610177610649565b6040516101849190610aed565b60405180910390f35b610195610672565b6040516101a29190610ac3565b60405180910390f35b6101c560048036038101906101c09190610a87565b610678565b005b6101e160048036038101906101dc9190610a5a565b610738565b005b6101fd60048036038101906101f89190610a87565b6107be565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166102406108b5565b73ffffffffffffffffffffffffffffffffffffffff161461028d576040517f92471d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663074a8ed4836004548460006040518563ffffffff1660e01b81526004016102f19493929190610b4d565b600060405180830381600087803b15801561030b57600080fd5b505af115801561031f573d6000803e3d6000fd5b505050505050565b61032f6108b5565b73ffffffffffffffffffffffffffffffffffffffff1661034d610649565b73ffffffffffffffffffffffffffffffffffffffff16146103a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039a90610bef565b60405180910390fd5b8060058190555050565b6103b56108b5565b73ffffffffffffffffffffffffffffffffffffffff166103d3610649565b73ffffffffffffffffffffffffffffffffffffffff1614610429576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042090610bef565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60055481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166104da6108b5565b73ffffffffffffffffffffffffffffffffffffffff1614610527576040517f92471d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663074a8ed4836005548460006040518563ffffffff1660e01b815260040161058b9493929190610b4d565b600060405180830381600087803b1580156105a557600080fd5b505af11580156105b9573d6000803e3d6000fd5b505050505050565b6105c96108b5565b73ffffffffffffffffffffffffffffffffffffffff166105e7610649565b73ffffffffffffffffffffffffffffffffffffffff161461063d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063490610bef565b60405180910390fd5b61064760006108bd565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60045481565b6106806108b5565b73ffffffffffffffffffffffffffffffffffffffff1661069e610649565b73ffffffffffffffffffffffffffffffffffffffff16146106f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106eb90610bef565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6107406108b5565b73ffffffffffffffffffffffffffffffffffffffff1661075e610649565b73ffffffffffffffffffffffffffffffffffffffff16146107b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ab90610bef565b60405180910390fd5b8060048190555050565b6107c66108b5565b73ffffffffffffffffffffffffffffffffffffffff166107e4610649565b73ffffffffffffffffffffffffffffffffffffffff161461083a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083190610bef565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036108a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a090610c81565b60405180910390fd5b6108b2816108bd565b50565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006109b182610986565b9050919050565b6109c1816109a6565b81146109cc57600080fd5b50565b6000813590506109de816109b8565b92915050565b6000819050919050565b6109f7816109e4565b8114610a0257600080fd5b50565b600081359050610a14816109ee565b92915050565b60008060408385031215610a3157610a30610981565b5b6000610a3f858286016109cf565b9250506020610a5085828601610a05565b9150509250929050565b600060208284031215610a7057610a6f610981565b5b6000610a7e84828501610a05565b91505092915050565b600060208284031215610a9d57610a9c610981565b5b6000610aab848285016109cf565b91505092915050565b610abd816109e4565b82525050565b6000602082019050610ad86000830184610ab4565b92915050565b610ae7816109a6565b82525050565b6000602082019050610b026000830184610ade565b92915050565b6000819050919050565b6000819050919050565b6000610b37610b32610b2d84610b08565b610b12565b6109e4565b9050919050565b610b4781610b1c565b82525050565b6000608082019050610b626000830187610ade565b610b6f6020830186610ab4565b610b7c6040830185610ab4565b610b896060830184610b3e565b95945050505050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610bd9602083610b92565b9150610be482610ba3565b602082019050919050565b60006020820190508181036000830152610c0881610bcc565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610c6b602683610b92565b9150610c7682610c0f565b604082019050919050565b60006020820190508181036000830152610c9a81610c5e565b905091905056fea2646970667358221220a8fe91d339bca13998c5574dca215fddbf918e497c30881d0935cb396803fd1c64736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c8063715018a611610071578063715018a6146101655780638da5cb5b1461016f578063ba0bd64a1461018d578063c0875dfd146101ab578063c7bca409146101c7578063f2fde38b146101e3576100b4565b8063186a8131146100b9578063308879bf146100d557806347365f5c146100f15780634c1b8ffd1461010d5780636baef4971461012b578063708f7c7d14610149575b600080fd5b6100d360048036038101906100ce9190610a1a565b6101ff565b005b6100ef60048036038101906100ea9190610a5a565b610327565b005b61010b60048036038101906101069190610a87565b6103ad565b005b61011561046d565b6040516101229190610ac3565b60405180910390f35b610133610473565b6040516101409190610aed565b60405180910390f35b610163600480360381019061015e9190610a1a565b610499565b005b61016d6105c1565b005b610177610649565b6040516101849190610aed565b60405180910390f35b610195610672565b6040516101a29190610ac3565b60405180910390f35b6101c560048036038101906101c09190610a87565b610678565b005b6101e160048036038101906101dc9190610a5a565b610738565b005b6101fd60048036038101906101f89190610a87565b6107be565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166102406108b5565b73ffffffffffffffffffffffffffffffffffffffff161461028d576040517f92471d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663074a8ed4836004548460006040518563ffffffff1660e01b81526004016102f19493929190610b4d565b600060405180830381600087803b15801561030b57600080fd5b505af115801561031f573d6000803e3d6000fd5b505050505050565b61032f6108b5565b73ffffffffffffffffffffffffffffffffffffffff1661034d610649565b73ffffffffffffffffffffffffffffffffffffffff16146103a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039a90610bef565b60405180910390fd5b8060058190555050565b6103b56108b5565b73ffffffffffffffffffffffffffffffffffffffff166103d3610649565b73ffffffffffffffffffffffffffffffffffffffff1614610429576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042090610bef565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60055481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166104da6108b5565b73ffffffffffffffffffffffffffffffffffffffff1614610527576040517f92471d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663074a8ed4836005548460006040518563ffffffff1660e01b815260040161058b9493929190610b4d565b600060405180830381600087803b1580156105a557600080fd5b505af11580156105b9573d6000803e3d6000fd5b505050505050565b6105c96108b5565b73ffffffffffffffffffffffffffffffffffffffff166105e7610649565b73ffffffffffffffffffffffffffffffffffffffff161461063d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063490610bef565b60405180910390fd5b61064760006108bd565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60045481565b6106806108b5565b73ffffffffffffffffffffffffffffffffffffffff1661069e610649565b73ffffffffffffffffffffffffffffffffffffffff16146106f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106eb90610bef565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6107406108b5565b73ffffffffffffffffffffffffffffffffffffffff1661075e610649565b73ffffffffffffffffffffffffffffffffffffffff16146107b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ab90610bef565b60405180910390fd5b8060048190555050565b6107c66108b5565b73ffffffffffffffffffffffffffffffffffffffff166107e4610649565b73ffffffffffffffffffffffffffffffffffffffff161461083a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083190610bef565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036108a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a090610c81565b60405180910390fd5b6108b2816108bd565b50565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006109b182610986565b9050919050565b6109c1816109a6565b81146109cc57600080fd5b50565b6000813590506109de816109b8565b92915050565b6000819050919050565b6109f7816109e4565b8114610a0257600080fd5b50565b600081359050610a14816109ee565b92915050565b60008060408385031215610a3157610a30610981565b5b6000610a3f858286016109cf565b9250506020610a5085828601610a05565b9150509250929050565b600060208284031215610a7057610a6f610981565b5b6000610a7e84828501610a05565b91505092915050565b600060208284031215610a9d57610a9c610981565b5b6000610aab848285016109cf565b91505092915050565b610abd816109e4565b82525050565b6000602082019050610ad86000830184610ab4565b92915050565b610ae7816109a6565b82525050565b6000602082019050610b026000830184610ade565b92915050565b6000819050919050565b6000819050919050565b6000610b37610b32610b2d84610b08565b610b12565b6109e4565b9050919050565b610b4781610b1c565b82525050565b6000608082019050610b626000830187610ade565b610b6f6020830186610ab4565b610b7c6040830185610ab4565b610b896060830184610b3e565b95945050505050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610bd9602083610b92565b9150610be482610ba3565b602082019050919050565b60006020820190508181036000830152610c0881610bcc565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610c6b602683610b92565b9150610c7682610c0f565b604082019050919050565b60006020820190508181036000830152610c9a81610c5e565b905091905056fea2646970667358221220a8fe91d339bca13998c5574dca215fddbf918e497c30881d0935cb396803fd1c64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "payForCreateQuestion(address,uint256)": {
        "params": {
          "_user": "The address of the user who wants to pay for creating a question."
        }
      },
      "payForVoting(address,uint256)": {
        "params": {
          "user": "The address of the user who wants to pay for voting on a question."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setCreateCost(uint256)": {
        "params": {
          "_cost": "The new cost of creating a question"
        }
      },
      "setQuestionApi(address)": {
        "params": {
          "_newApi": "The new address of the question API."
        }
      },
      "setVoteCost(uint256)": {
        "params": {
          "_cost": "The new cost of voting for a question"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "payForCreateQuestion(address,uint256)": {
        "notice": "Makes a user pay for creating a question.  We transfer the funds from the user executing the function to  the contract."
      },
      "payForVoting(address,uint256)": {
        "notice": "Makes a user pay for voting on a question.  We transfer the funds from the user executing the function to  the contract."
      },
      "setCreateCost(uint256)": {
        "notice": "Changes the cost of creating a question"
      },
      "setQuestionApi(address)": {
        "notice": "Sets the address of the question API."
      },
      "setVoteCost(uint256)": {
        "notice": "Changes the cost of voting for a question"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "src/contracts/Protocol/ActionCostController.sol:ActionCostController",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5494,
        "contract": "src/contracts/Protocol/ActionCostController.sol:ActionCostController",
        "label": "questionApi",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3240,
        "contract": "src/contracts/Protocol/ActionCostController.sol:ActionCostController",
        "label": "metric",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)865"
      },
      {
        "astId": 3243,
        "contract": "src/contracts/Protocol/ActionCostController.sol:ActionCostController",
        "label": "vault",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(Vault)5292"
      },
      {
        "astId": 3245,
        "contract": "src/contracts/Protocol/ActionCostController.sol:ActionCostController",
        "label": "createCost",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 3247,
        "contract": "src/contracts/Protocol/ActionCostController.sol:ActionCostController",
        "label": "voteCost",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)865": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(Vault)5292": {
        "encoding": "inplace",
        "label": "contract Vault",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}