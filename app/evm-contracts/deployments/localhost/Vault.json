{
  "address": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_metricTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_questionStateController",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadySlashed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoMetricToWithdraw",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotTheCostController",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotTheWithdrawer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "QuestionHasInvalidStatus",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "QuestionNotPublished",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "withdrawer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        }
      ],
      "name": "Slash",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "withdrawer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "costController",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "depositsByWithdrawers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMetricTotalLockedBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_questionId",
          "type": "uint256"
        }
      ],
      "name": "getVaultById",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "withdrawer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "enum Vault.STATUS",
              "name": "status",
              "type": "uint8"
            }
          ],
          "internalType": "struct Vault.lockAttributes",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_withdrawer",
          "type": "address"
        }
      ],
      "name": "getVaultsByWithdrawer",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_withdrawer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_questionId",
          "type": "uint256"
        }
      ],
      "name": "lockMetric",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lockedMetric",
      "outputs": [
        {
          "internalType": "address",
          "name": "withdrawer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "enum Vault.STATUS",
          "name": "status",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "metric",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "questionStateController",
      "outputs": [
        {
          "internalType": "contract IQuestionStateController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newCostController",
          "type": "address"
        }
      ],
      "name": "setCostController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_metric",
          "type": "address"
        }
      ],
      "name": "setMetric",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_questionStateController",
          "type": "address"
        }
      ],
      "name": "setQuestionStateController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_questionId",
          "type": "uint256"
        }
      ],
      "name": "slashMetric",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "status",
      "outputs": [
        {
          "internalType": "enum Vault.STATUS",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_questionId",
          "type": "uint256"
        }
      ],
      "name": "withdrawMetric",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x45d87eadf572cb5ff38bacd84002e703116bab2f01e4661c25727e783a8f6f14",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
    "transactionIndex": 0,
    "gasUsed": "1874889",
    "logsBloom": "0x
    "blockHash": "0x5a183aeccfae12578468656110ed9d82f02a6c09bba21bb531ef1c3acfe8fba9",
    "transactionHash": "0x45d87eadf572cb5ff38bacd84002e703116bab2f01e4661c25727e783a8f6f14",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 9,
        "transactionHash": "0x45d87eadf572cb5ff38bacd84002e703116bab2f01e4661c25727e783a8f6f14",
        "address": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x5a183aeccfae12578468656110ed9d82f02a6c09bba21bb531ef1c3acfe8fba9"
      }
    ],
    "blockNumber": 9,
    "cumulativeGasUsed": "1874889",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "0x70997970C51812dc3A010C7d01b50e0d17dc79C8"
  ],
  "numDeployments": 1,
  "solcInputHash": "da832cf33e970a25c26f6a4223c0aa85",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_metricTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_questionStateController\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadySlashed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoMetricToWithdraw\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotTheCostController\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotTheWithdrawer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QuestionHasInvalidStatus\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QuestionNotPublished\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"}],\"name\":\"Slash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"costController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"depositsByWithdrawers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMetricTotalLockedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_questionId\",\"type\":\"uint256\"}],\"name\":\"getVaultById\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"enum Vault.STATUS\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct Vault.lockAttributes\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_withdrawer\",\"type\":\"address\"}],\"name\":\"getVaultsByWithdrawer\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_withdrawer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_questionId\",\"type\":\"uint256\"}],\"name\":\"lockMetric\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockedMetric\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"enum Vault.STATUS\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metric\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"questionStateController\",\"outputs\":[{\"internalType\":\"contract IQuestionStateController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newCostController\",\"type\":\"address\"}],\"name\":\"setCostController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_metric\",\"type\":\"address\"}],\"name\":\"setMetric\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_questionStateController\",\"type\":\"address\"}],\"name\":\"setQuestionStateController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_questionId\",\"type\":\"uint256\"}],\"name\":\"slashMetric\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"internalType\":\"enum Vault.STATUS\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_questionId\",\"type\":\"uint256\"}],\"name\":\"withdrawMetric\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"lockMetric(address,uint256,uint256)\":{\"params\":{\"_amount\":\"The amount of METRIC to lock\",\"_questionId\":\"The question id\",\"_withdrawer\":\"The address of the user locking the METRIC\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setCostController(address)\":{\"params\":{\"_newCostController\":\"The new address of the ActionCostController.\"}},\"slashMetric(uint256)\":{\"params\":{\"_questionId\":\"The question id\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawMetric(uint256)\":{\"params\":{\"_questionId\":\"The question id\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"lockMetric(address,uint256,uint256)\":{\"notice\":\"Locks METRIC for creating a question\"},\"setCostController(address)\":{\"notice\":\"Sets the address of the ActionCostController.\"},\"slashMetric(uint256)\":{\"notice\":\"Allows onlyOwner to slash a question -- halfing the METRIC locked for the question.\"},\"withdrawMetric(uint256)\":{\"notice\":\"Allows a user to withdraw METRIC locked for a question, after the question is published.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/Protocol/Vault.sol\":\"Vault\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"src/contracts/Protocol/QuestionStateController.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IQuestionStateController.sol\\\";\\nimport \\\"./modifiers/OnlyAPI.sol\\\";\\n\\ncontract QuestionStateController is IQuestionStateController, Ownable, OnlyApi {\\n    mapping(uint256 => QuestionVote) public votes;\\n    mapping(uint256 => STATE) public state;\\n\\n    // Mapping for all questions that are upvoted by the user?\\n    mapping(address => mapping(uint256 => bool)) public hasVoted;\\n    mapping(address => mapping(uint256 => uint256)) public questionIndex;\\n\\n    mapping(uint256 => QuestionData) public questionByState;\\n\\n    //TODO mapping     mapping(STATE => uint256[]) public questionState;\\n\\n    // TODO do we want user to lose their metric if a question is closed? they voted on somethjing bad\\n\\n    /**\\n     * @notice Initializes a question to draft.\\n     * @param questionId The id of the question\\n     */\\n    function initializeQuestion(uint256 questionId, string calldata uri) public onlyApi {\\n        state[questionId] = STATE.VOTING;\\n        QuestionData memory _question = QuestionData({url: uri, totalVotes: 0, questionId: questionId, questionState: STATE.VOTING});\\n        questionByState[questionId] = _question;\\n    }\\n\\n    function publish(uint256 questionId) public onlyApi onlyState(STATE.VOTING, questionId) {\\n        // if some voting barrier is passed, we can publish the question\\n        state[questionId] = STATE.PUBLISHED;\\n    }\\n\\n    function voteFor(\\n        address _user,\\n        uint256 questionId,\\n        uint256 amount\\n    ) public onlyApi onlyState(STATE.VOTING, questionId) {\\n        // Checks\\n        // TODO check if creator can upvote their own ?\\n        // TODO limit the max amount of token they can use?\\n        if (hasVoted[_user][questionId]) revert HasAlreadyVotedForQuestion();\\n\\n        // Effects\\n        Vote memory _vote = Vote({voter: _user, amount: amount});\\n        votes[questionId].votes.push(_vote);\\n\\n        hasVoted[_user][questionId] = true;\\n        questionIndex[_user][questionId] = votes[questionId].votes.length - 1;\\n\\n        votes[questionId].totalVoteCount += amount; // TODO Lock tokens for voting include safeTransferFrom\\n\\n        QuestionData storage question = questionByState[questionId];\\n        question.totalVotes += amount;\\n        // Interactions\\n    }\\n\\n    function unvoteFor(address _user, uint256 questionId) public onlyApi onlyState(STATE.VOTING, questionId) {\\n        // Checks\\n        if (!hasVoted[_user][questionId]) revert HasNotVotedForQuestion();\\n\\n        // Effects\\n        uint256 index = questionIndex[_user][questionId];\\n        uint256 amount = votes[questionId].votes[index].amount;\\n\\n        votes[questionId].votes[index].amount = 0;\\n        votes[questionId].totalVoteCount -= amount; // TODO Unlock tokens for voting\\n        // Interactions\\n    }\\n\\n    function setDisqualifiedState(uint256 questionId) public onlyApi {\\n        state[questionId] = STATE.DISQUALIFIED;\\n        QuestionData storage question = questionByState[questionId];\\n        question.questionState = STATE.DISQUALIFIED;\\n    }\\n\\n    // TODO batch voting and batch operations and look into arrays as parameters security risk\\n\\n    //------------------------------------------------------ View Functions\\n\\n    function getState(uint256 quesitonId) public view returns (uint256 currentState) {\\n        return uint256(state[quesitonId]);\\n    }\\n\\n    function getVotes(uint256 questionId) public view returns (Vote[] memory _votes) {\\n        return votes[questionId].votes;\\n    }\\n\\n    function getTotalVotes(uint256 questionId) public view returns (uint256) {\\n        return votes[questionId].totalVoteCount;\\n    }\\n\\n    function getQuestionsByState(\\n        STATE currentState,\\n        uint256 currentQuestionId,\\n        uint256 offset\\n    ) public view returns (QuestionData[] memory) {\\n        uint256 j = 0;\\n        uint256 limit;\\n        uint256 sizeOfArray;\\n        if (currentQuestionId > offset) {\\n            limit = currentQuestionId - offset;\\n            sizeOfArray = (currentQuestionId - offset) + 1;\\n        } else {\\n            limit = 1;\\n            sizeOfArray = currentQuestionId;\\n        }\\n        QuestionData[] memory arr = new QuestionData[](sizeOfArray);\\n        for (uint256 i = currentQuestionId; i >= limit; i--) {\\n            if (questionByState[i].questionState == currentState) {\\n                arr[j] = questionByState[i];\\n                j++;\\n            }\\n        }\\n        return arr;\\n    }\\n\\n    //------------------------------------------------------ Errors\\n    error HasNotVotedForQuestion();\\n    error HasAlreadyVotedForQuestion();\\n    error InvalidStateTransition();\\n\\n    //------------------------------------------------------ Structs\\n    modifier onlyState(STATE required, uint256 questionId) {\\n        if (required != state[questionId]) revert InvalidStateTransition();\\n        _;\\n    }\\n\\n    struct QuestionVote {\\n        Vote[] votes;\\n        uint256 totalVoteCount;\\n    }\\n\\n    struct Vote {\\n        address voter;\\n        uint256 amount;\\n    }\\n\\n    struct QuestionData {\\n        string url;\\n        uint256 totalVotes;\\n        uint256 questionId;\\n        STATE questionState;\\n    }\\n}\\n\",\"keccak256\":\"0xa05c53d397dcadb9218e3264de2ecc64d1d67b76d340085cff654bb5854fd2ec\",\"license\":\"MIT\"},\"src/contracts/Protocol/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./QuestionStateController.sol\\\";\\nimport \\\"./interfaces/IQuestionStateController.sol\\\";\\nimport \\\"./modifiers/OnlyCostController.sol\\\";\\n\\ncontract Vault is Ownable, OnlyCostController {\\n    IERC20 public metric;\\n    IQuestionStateController public questionStateController;\\n\\n    address public treasury;\\n\\n    uint256 public depositsCount;\\n\\n    mapping(address => uint256[]) public depositsByWithdrawers;\\n    mapping(uint256 => lockAttributes) public lockedMetric;\\n\\n    STATUS public status;\\n\\n    constructor(\\n        address _metricTokenAddress,\\n        address _questionStateController,\\n        address _treasury\\n    ) {\\n        metric = IERC20(_metricTokenAddress);\\n        questionStateController = IQuestionStateController(_questionStateController);\\n        treasury = _treasury;\\n    }\\n\\n    /**\\n     * @notice Locks METRIC for creating a question\\n     * @param _withdrawer The address of the user locking the METRIC\\n     * @param _amount The amount of METRIC to lock\\n     * @param _questionId The question id\\n     */\\n    function lockMetric(\\n        address _withdrawer,\\n        uint256 _amount,\\n        uint256 _questionId\\n    ) external onlyCostController {\\n        //Checks\\n        if (lockedMetric[_questionId].status != STATUS.UNINT) revert QuestionHasInvalidStatus();\\n\\n        // Effects\\n        lockedMetric[_questionId].withdrawer = _withdrawer;\\n        lockedMetric[_questionId].amount += _amount;\\n\\n        lockedMetric[_questionId].status = STATUS.DEPOSITED;\\n\\n        depositsByWithdrawers[_withdrawer].push(_questionId);\\n\\n        // Interactions\\n        metric.transferFrom(_withdrawer, address(this), _amount);\\n    }\\n\\n    /**\\n     * @notice Allows a user to withdraw METRIC locked for a question, after the question is published.\\n     * @param _questionId The question id\\n     */\\n    function withdrawMetric(uint256 _questionId) external {\\n        // Checks\\n        if (_msgSender() != lockedMetric[_questionId].withdrawer) revert NotTheWithdrawer();\\n        if (lockedMetric[_questionId].amount == 0) revert NoMetricToWithdraw();\\n        if (questionStateController.getState(_questionId) != uint256(IQuestionStateController.STATE.PUBLISHED)) revert QuestionNotPublished();\\n\\n        // Effects\\n        uint256 toWithdraw = lockedMetric[_questionId].amount;\\n\\n        lockedMetric[_questionId].status = STATUS.WITHDRAWN;\\n        lockedMetric[_questionId].amount = 0;\\n\\n        // Interactions\\n        emit Withdraw(_msgSender(), toWithdraw);\\n        metric.transfer(_msgSender(), toWithdraw);\\n    }\\n\\n    /**\\n     * @notice Allows onlyOwner to slash a question -- halfing the METRIC locked for the question.\\n     * @param _questionId The question id\\n     */\\n    function slashMetric(uint256 _questionId) external onlyOwner {\\n        if (lockedMetric[_questionId].status == STATUS.SLASHED) revert AlreadySlashed();\\n\\n        lockedMetric[_questionId].status = STATUS.SLASHED;\\n\\n        emit Slash(lockedMetric[_questionId].withdrawer, _questionId);\\n\\n        // Send half to treasury\\n        metric.transfer(treasury, lockedMetric[_questionId].amount / 2);\\n\\n        // Return half to user\\n        metric.transfer(lockedMetric[_questionId].withdrawer, lockedMetric[_questionId].amount / 2);\\n    }\\n\\n    //------------------------------------------------------ Getters\\n    function getVaultsByWithdrawer(address _withdrawer) external view returns (uint256[] memory) {\\n        return depositsByWithdrawers[_withdrawer];\\n    }\\n\\n    function getVaultById(uint256 _questionId) external view returns (lockAttributes memory) {\\n        return lockedMetric[_questionId];\\n    }\\n\\n    function getMetricTotalLockedBalance() external view returns (uint256) {\\n        return metric.balanceOf(address(this));\\n    }\\n\\n    //------------------------------------------------------ Events\\n    event Withdraw(address indexed withdrawer, uint256 indexed amount);\\n    event Slash(address indexed withdrawer, uint256 indexed questionId);\\n\\n    //------------------------------------------------------ Errors\\n    error NotTheWithdrawer();\\n    error NoMetricToWithdraw();\\n    error QuestionHasInvalidStatus();\\n    error QuestionNotPublished();\\n    error AlreadySlashed();\\n    error InvalidAddress();\\n\\n    //------------------------------------------------------ Structs\\n    struct lockAttributes {\\n        address withdrawer;\\n        uint256 amount;\\n        STATUS status;\\n    }\\n\\n    //------------------------------------------------------ Enums\\n    enum STATUS {\\n        UNINT,\\n        WITHDRAWN,\\n        DEPOSITED,\\n        PUBLISHED,\\n        SLASHED\\n    }\\n\\n    //------------------------------------------------------ Admin functions\\n    function setQuestionStateController(address _questionStateController) public onlyOwner {\\n        if (_questionStateController == address(0)) revert InvalidAddress();\\n        questionStateController = IQuestionStateController(_questionStateController);\\n    }\\n\\n    function setTreasury(address _treasury) public onlyOwner {\\n        treasury = _treasury;\\n    }\\n\\n    function setMetric(address _metric) public onlyOwner {\\n        if (_metric == address(0)) revert InvalidAddress();\\n        metric = IERC20(_metric);\\n    }\\n}\\n\",\"keccak256\":\"0x71e2755ad67722f0ca7ec07bfe2e89a22cd3427a6ebee44175823e11e4d51b52\",\"license\":\"MIT\"},\"src/contracts/Protocol/interfaces/IQuestionStateController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IQuestionStateController {\\n    function initializeQuestion(uint256 questionId, string calldata uri) external;\\n\\n    function voteFor(\\n        address _user,\\n        uint256 questionId,\\n        uint256 amount\\n    ) external;\\n\\n    function unvoteFor(address _user, uint256 questionId) external;\\n\\n    function publish(uint256 questionId) external;\\n\\n    // TODO currentState can probably be like a uint8, it depends on how many states we have\\n    function getState(uint256 quesitonId) external view returns (uint256 currentState);\\n\\n    function setDisqualifiedState(uint256 questionId) external;\\n\\n    enum STATE {\\n        // TODO this where it becomes a challenge, can be claimed and answered\\n        UNINIT,\\n        VOTING,\\n        PUBLISHED, // TODO this where it becomes a challenge, can be claimed and answered\\n        DISQUALIFIED,\\n        COMPLETED\\n    }\\n}\\n\",\"keccak256\":\"0xcd6e4eae47b170aeab62607ad776ff3836ec5df72f7dc62e3986fde202b39adf\",\"license\":\"MIT\"},\"src/contracts/Protocol/modifiers/OnlyAPI.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract OnlyApi is Ownable {\\n    address public questionApi;\\n\\n    // ------------------------------- Setter\\n    /**\\n     * @notice Sets the address of the question API.\\n     * @param _newApi The new address of the question API.\\n     */\\n    function setQuestionApi(address _newApi) external onlyOwner {\\n        questionApi = _newApi;\\n    }\\n\\n    // ------------------------ Modifiers\\n    modifier onlyApi() {\\n        if (_msgSender() != questionApi) revert NotTheApi();\\n        _;\\n    }\\n\\n    // ------------------------ Errors\\n    error NotTheApi();\\n}\\n\",\"keccak256\":\"0x0681de2966fa03720603c0e7361f8ee5d887b9526d074ba9c14dbf3b80978934\",\"license\":\"MIT\"},\"src/contracts/Protocol/modifiers/OnlyCostController.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract OnlyCostController is Ownable {\\n    address public costController;\\n\\n    // ------------------------------- Setter\\n    /**\\n     * @notice Sets the address of the ActionCostController.\\n     * @param _newCostController The new address of the ActionCostController.\\n     */\\n    function setCostController(address _newCostController) external onlyOwner {\\n        costController = _newCostController;\\n    }\\n\\n    // ------------------------ Modifiers\\n    modifier onlyCostController() {\\n        if (_msgSender() != costController) revert NotTheCostController();\\n        _;\\n    }\\n\\n    // ------------------------ Errors\\n    error NotTheCostController();\\n}\\n\",\"keccak256\":\"0x4c3f6b61445fe478b6b3248f1ac2a6f483111c1b0dd89c722c3351f1ece35a86\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200220038038062002200833981810160405281019062000037919062000259565b620000576200004b6200012360201b60201c565b6200012b60201b60201c565b82600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050620002b5565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200022182620001f4565b9050919050565b620002338162000214565b81146200023f57600080fd5b50565b600081519050620002538162000228565b92915050565b600080600060608486031215620002755762000274620001ef565b5b6000620002858682870162000242565b9350506020620002988682870162000242565b9250506040620002ab8682870162000242565b9150509250925092565b611f3b80620002c56000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c80638ce58682116100b8578063b548fcae1161007c578063b548fcae1461032c578063cb5519761461034a578063dd55fee714610368578063f0f4426014610384578063f0f64201146103a0578063f2fde38b146103bc57610137565b80638ce58682146102745780638da5cb5b1461029257806394708776146102b0578063aa9ce2e6146102e0578063b363ad4f1461031057610137565b80634506e935116100ff5780634506e935146101e257806347365f5c1461020057806361d027b31461021c578063715018a61461023a57806371546b811461024457610137565b806311de9a6c1461013c5780631919bcd61461015a5780631c92d6a514610176578063200d2ed2146101a85780633951df76146101c6575b600080fd5b6101446103d8565b60405161015191906117d5565b60405180910390f35b610174600480360381019061016f9190611833565b6103fe565b005b610190600480360381019061018b9190611896565b6104be565b60405161019f93929190611958565b60405180910390f35b6101b0610515565b6040516101bd919061198f565b60405180910390f35b6101e060048036038101906101db9190611896565b610528565b005b6101ea61086e565b6040516101f791906119aa565b60405180910390f35b61021a60048036038101906102159190611833565b610874565b005b61022461099a565b60405161023191906119c5565b60405180910390f35b6102426109c0565b005b61025e60048036038101906102599190611833565b610a48565b60405161026b9190611a9e565b60405180910390f35b61027c610adf565b60405161028991906119aa565b60405180910390f35b61029a610b82565b6040516102a791906119c5565b60405180910390f35b6102ca60048036038101906102c59190611896565b610bab565b6040516102d79190611b20565b60405180910390f35b6102fa60048036038101906102f59190611b3b565b610c73565b60405161030791906119aa565b60405180910390f35b61032a60048036038101906103259190611896565b610ca4565b005b61033461103a565b60405161034191906119c5565b60405180910390f35b610352611060565b60405161035f9190611b9c565b60405180910390f35b610382600480360381019061037d9190611bb7565b611086565b005b61039e60048036038101906103999190611833565b611364565b005b6103ba60048036038101906103b59190611833565b611424565b005b6103d660048036038101906103d19190611833565b61154a565b005b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610406611641565b73ffffffffffffffffffffffffffffffffffffffff16610424610b82565b73ffffffffffffffffffffffffffffffffffffffff161461047a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047190611c67565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60076020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020160009054906101000a900460ff16905083565b600860009054906101000a900460ff1681565b6007600082815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661057d611641565b73ffffffffffffffffffffffffffffffffffffffff16146105ca576040517f19eb952800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060076000838152602001908152602001600020600101540361061a576040517f4b0aa74e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600481111561062e5761062d6118e1565b5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166344c9af28836040518263ffffffff1660e01b815260040161068991906119aa565b602060405180830381865afa1580156106a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ca9190611c9c565b14610701576040517f9aded0d000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006007600083815260200190815260200160002060010154905060016007600084815260200190815260200160002060020160006101000a81548160ff02191690836004811115610756576107556118e1565b5b02179055506000600760008481526020019081526020016000206001018190555080610780611641565b73ffffffffffffffffffffffffffffffffffffffff167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a942436460405160405180910390a3600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb610808611641565b836040518363ffffffff1660e01b8152600401610826929190611cc9565b6020604051808303816000875af1158015610845573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108699190611d2a565b505050565b60055481565b61087c611641565b73ffffffffffffffffffffffffffffffffffffffff1661089a610b82565b73ffffffffffffffffffffffffffffffffffffffff16146108f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e790611c67565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610956576040517fe6c4247b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6109c8611641565b73ffffffffffffffffffffffffffffffffffffffff166109e6610b82565b73ffffffffffffffffffffffffffffffffffffffff1614610a3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3390611c67565b60405180910390fd5b610a466000611649565b565b6060600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015610ad357602002820191906000526020600020905b815481526020019060010190808311610abf575b50505050509050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610b3c91906119c5565b602060405180830381865afa158015610b59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7d9190611c9c565b905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610bb361170d565b600760008381526020019081526020016000206040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820160009054906101000a900460ff166004811115610c5657610c556118e1565b5b6004811115610c6857610c676118e1565b5b815250509050919050565b60066020528160005260406000208181548110610c8f57600080fd5b90600052602060002001600091509150505481565b610cac611641565b73ffffffffffffffffffffffffffffffffffffffff16610cca610b82565b73ffffffffffffffffffffffffffffffffffffffff1614610d20576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d1790611c67565b60405180910390fd5b600480811115610d3357610d326118e1565b5b6007600083815260200190815260200160002060020160009054906101000a900460ff166004811115610d6957610d686118e1565b5b03610da0576040517f3723376200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60046007600083815260200190815260200160002060020160006101000a81548160ff02191690836004811115610dda57610dd96118e1565b5b0217905550806007600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fa69f22d963cb7981f842db8c1aafcc93d915ba2a95dcf26dcc333a9c2a09be2660405160405180910390a3600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660026007600086815260200190815260200160002060010154610edd9190611db5565b6040518363ffffffff1660e01b8152600401610efa929190611cc9565b6020604051808303816000875af1158015610f19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3d9190611d2a565b50600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6007600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660026007600086815260200190815260200160002060010154610fd69190611db5565b6040518363ffffffff1660e01b8152600401610ff3929190611cc9565b6020604051808303816000875af1158015611012573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110369190611d2a565b5050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166110c7611641565b73ffffffffffffffffffffffffffffffffffffffff1614611114576040517f1ac379d700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006004811115611128576111276118e1565b5b6007600083815260200190815260200160002060020160009054906101000a900460ff16600481111561115e5761115d6118e1565b5b14611195576040517fbe9ad66900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b826007600083815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550816007600083815260200190815260200160002060010160008282546112109190611de6565b9250508190555060026007600083815260200190815260200160002060020160006101000a81548160ff02191690836004811115611251576112506118e1565b5b0217905550600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819080600181540180825580915050600190039060005260206000200160009091909190915055600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd8430856040518463ffffffff1660e01b815260040161131b93929190611e3c565b6020604051808303816000875af115801561133a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061135e9190611d2a565b50505050565b61136c611641565b73ffffffffffffffffffffffffffffffffffffffff1661138a610b82565b73ffffffffffffffffffffffffffffffffffffffff16146113e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113d790611c67565b60405180910390fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61142c611641565b73ffffffffffffffffffffffffffffffffffffffff1661144a610b82565b73ffffffffffffffffffffffffffffffffffffffff16146114a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161149790611c67565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611506576040517fe6c4247b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b611552611641565b73ffffffffffffffffffffffffffffffffffffffff16611570610b82565b73ffffffffffffffffffffffffffffffffffffffff16146115c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115bd90611c67565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611635576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161162c90611ee5565b60405180910390fd5b61163e81611649565b50565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600060048111156117505761174f6118e1565b5b81525090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061179b61179661179184611756565b611776565b611756565b9050919050565b60006117ad82611780565b9050919050565b60006117bf826117a2565b9050919050565b6117cf816117b4565b82525050565b60006020820190506117ea60008301846117c6565b92915050565b600080fd5b600061180082611756565b9050919050565b611810816117f5565b811461181b57600080fd5b50565b60008135905061182d81611807565b92915050565b600060208284031215611849576118486117f0565b5b60006118578482850161181e565b91505092915050565b6000819050919050565b61187381611860565b811461187e57600080fd5b50565b6000813590506118908161186a565b92915050565b6000602082840312156118ac576118ab6117f0565b5b60006118ba84828501611881565b91505092915050565b6118cc816117f5565b82525050565b6118db81611860565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60058110611921576119206118e1565b5b50565b600081905061193282611910565b919050565b600061194282611924565b9050919050565b61195281611937565b82525050565b600060608201905061196d60008301866118c3565b61197a60208301856118d2565b6119876040830184611949565b949350505050565b60006020820190506119a46000830184611949565b92915050565b60006020820190506119bf60008301846118d2565b92915050565b60006020820190506119da60008301846118c3565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611a1581611860565b82525050565b6000611a278383611a0c565b60208301905092915050565b6000602082019050919050565b6000611a4b826119e0565b611a5581856119eb565b9350611a60836119fc565b8060005b83811015611a91578151611a788882611a1b565b9750611a8383611a33565b925050600181019050611a64565b5085935050505092915050565b60006020820190508181036000830152611ab88184611a40565b905092915050565b611ac9816117f5565b82525050565b611ad881611937565b82525050565b606082016000820151611af46000850182611ac0565b506020820151611b076020850182611a0c565b506040820151611b1a6040850182611acf565b50505050565b6000606082019050611b356000830184611ade565b92915050565b60008060408385031215611b5257611b516117f0565b5b6000611b608582860161181e565b9250506020611b7185828601611881565b9150509250929050565b6000611b86826117a2565b9050919050565b611b9681611b7b565b82525050565b6000602082019050611bb16000830184611b8d565b92915050565b600080600060608486031215611bd057611bcf6117f0565b5b6000611bde8682870161181e565b9350506020611bef86828701611881565b9250506040611c0086828701611881565b9150509250925092565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611c51602083611c0a565b9150611c5c82611c1b565b602082019050919050565b60006020820190508181036000830152611c8081611c44565b9050919050565b600081519050611c968161186a565b92915050565b600060208284031215611cb257611cb16117f0565b5b6000611cc084828501611c87565b91505092915050565b6000604082019050611cde60008301856118c3565b611ceb60208301846118d2565b9392505050565b60008115159050919050565b611d0781611cf2565b8114611d1257600080fd5b50565b600081519050611d2481611cfe565b92915050565b600060208284031215611d4057611d3f6117f0565b5b6000611d4e84828501611d15565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611dc082611860565b9150611dcb83611860565b925082611ddb57611dda611d57565b5b828204905092915050565b6000611df182611860565b9150611dfc83611860565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611e3157611e30611d86565b5b828201905092915050565b6000606082019050611e5160008301866118c3565b611e5e60208301856118c3565b611e6b60408301846118d2565b949350505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611ecf602683611c0a565b9150611eda82611e73565b604082019050919050565b60006020820190508181036000830152611efe81611ec2565b905091905056fea26469706673582212208fa28a02b2c7b9878c5e32b89c8106d12b1958c2ab813a346be54da18b0a06de64736f6c634300080d0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "lockMetric(address,uint256,uint256)": {
        "params": {
          "_amount": "The amount of METRIC to lock",
          "_questionId": "The question id",
          "_withdrawer": "The address of the user locking the METRIC"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setCostController(address)": {
        "params": {
          "_newCostController": "The new address of the ActionCostController."
        }
      },
      "slashMetric(uint256)": {
        "params": {
          "_questionId": "The question id"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawMetric(uint256)": {
        "params": {
          "_questionId": "The question id"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "lockMetric(address,uint256,uint256)": {
        "notice": "Locks METRIC for creating a question"
      },
      "setCostController(address)": {
        "notice": "Sets the address of the ActionCostController."
      },
      "slashMetric(uint256)": {
        "notice": "Allows onlyOwner to slash a question -- halfing the METRIC locked for the question."
      },
      "withdrawMetric(uint256)": {
        "notice": "Allows a user to withdraw METRIC locked for a question, after the question is published."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "src/contracts/Protocol/Vault.sol:Vault",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3212,
        "contract": "src/contracts/Protocol/Vault.sol:Vault",
        "label": "costController",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2621,
        "contract": "src/contracts/Protocol/Vault.sol:Vault",
        "label": "metric",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)773"
      },
      {
        "astId": 2624,
        "contract": "src/contracts/Protocol/Vault.sol:Vault",
        "label": "questionStateController",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IQuestionStateController)3105"
      },
      {
        "astId": 2626,
        "contract": "src/contracts/Protocol/Vault.sol:Vault",
        "label": "treasury",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 2628,
        "contract": "src/contracts/Protocol/Vault.sol:Vault",
        "label": "depositsCount",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 2633,
        "contract": "src/contracts/Protocol/Vault.sol:Vault",
        "label": "depositsByWithdrawers",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 2638,
        "contract": "src/contracts/Protocol/Vault.sol:Vault",
        "label": "lockedMetric",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_struct(lockAttributes)2945_storage)"
      },
      {
        "astId": 2641,
        "contract": "src/contracts/Protocol/Vault.sol:Vault",
        "label": "status",
        "offset": 0,
        "slot": "8",
        "type": "t_enum(STATUS)2951"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)773": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IQuestionStateController)3105": {
        "encoding": "inplace",
        "label": "contract IQuestionStateController",
        "numberOfBytes": "20"
      },
      "t_enum(STATUS)2951": {
        "encoding": "inplace",
        "label": "enum Vault.STATUS",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_struct(lockAttributes)2945_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Vault.lockAttributes)",
        "numberOfBytes": "32",
        "value": "t_struct(lockAttributes)2945_storage"
      },
      "t_struct(lockAttributes)2945_storage": {
        "encoding": "inplace",
        "label": "struct Vault.lockAttributes",
        "members": [
          {
            "astId": 2939,
            "contract": "src/contracts/Protocol/Vault.sol:Vault",
            "label": "withdrawer",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2941,
            "contract": "src/contracts/Protocol/Vault.sol:Vault",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2944,
            "contract": "src/contracts/Protocol/Vault.sol:Vault",
            "label": "status",
            "offset": 0,
            "slot": "2",
            "type": "t_enum(STATUS)2951"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}