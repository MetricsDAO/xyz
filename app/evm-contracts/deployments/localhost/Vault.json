{
  "address": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "metricTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "questionStateControllerAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "treasuryAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadySlashed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidStage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoMetricDeposited",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotTheCostController",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotTheDepositor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "QuestionHasInvalidStatus",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "QuestionNotPublished",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        }
      ],
      "name": "Slashed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "costController",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "depositsByWithdrawers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stage",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getAmountFromProperties",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        }
      ],
      "name": "getLockedMetricByQuestion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getLockedPerUser",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMetricTotalLockedBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stage",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserFromProperties",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stage",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getVaultById",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "enum Vault.STATUS",
              "name": "status",
              "type": "uint8"
            }
          ],
          "internalType": "struct Vault.lockAttributes",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getVaultsByWithdrawer",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stage",
          "type": "uint256"
        }
      ],
      "name": "lockMetric",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lockedMetric",
      "outputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "enum Vault.STATUS",
          "name": "status",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lockedMetricByQuestion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "metric",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "questionStateController",
      "outputs": [
        {
          "internalType": "contract IQuestionStateController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newCostController",
          "type": "address"
        }
      ],
      "name": "setCostController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_metric",
          "type": "address"
        }
      ],
      "name": "setMetric",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_questionStateController",
          "type": "address"
        }
      ],
      "name": "setQuestionStateController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "status",
      "outputs": [
        {
          "internalType": "enum Vault.STATUS",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "totalLockedInVaults",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stage",
          "type": "uint256"
        }
      ],
      "name": "withdrawMetric",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbb29c80dd2e8d7cc23538f126af03b907b1a476f3c62e7d31e7cc75d2647923c",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
    "transactionIndex": 0,
    "gasUsed": "2130185",
    "logsBloom": "0x
    "blockHash": "0x98ba492cf6987e80dd47988bbf2b914843c8339169a645d6692a98b0a667bf02",
    "transactionHash": "0xbb29c80dd2e8d7cc23538f126af03b907b1a476f3c62e7d31e7cc75d2647923c",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 9,
        "transactionHash": "0xbb29c80dd2e8d7cc23538f126af03b907b1a476f3c62e7d31e7cc75d2647923c",
        "address": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x98ba492cf6987e80dd47988bbf2b914843c8339169a645d6692a98b0a667bf02"
      }
    ],
    "blockNumber": 9,
    "cumulativeGasUsed": "2130185",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "0x70997970C51812dc3A010C7d01b50e0d17dc79C8"
  ],
  "numDeployments": 1,
  "solcInputHash": "23a5c42ffdc6fce9090df76d82673573",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"metricTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"questionStateControllerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasuryAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadySlashed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoMetricDeposited\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotTheCostController\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotTheDepositor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QuestionHasInvalidStatus\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QuestionNotPublished\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"}],\"name\":\"Slashed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"costController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"depositsByWithdrawers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getAmountFromProperties\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"}],\"name\":\"getLockedMetricByQuestion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getLockedPerUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMetricTotalLockedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserFromProperties\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getVaultById\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"enum Vault.STATUS\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct Vault.lockAttributes\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getVaultsByWithdrawer\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stage\",\"type\":\"uint256\"}],\"name\":\"lockMetric\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedMetric\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"enum Vault.STATUS\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockedMetricByQuestion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metric\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"questionStateController\",\"outputs\":[{\"internalType\":\"contract IQuestionStateController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newCostController\",\"type\":\"address\"}],\"name\":\"setCostController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_metric\",\"type\":\"address\"}],\"name\":\"setMetric\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_questionStateController\",\"type\":\"address\"}],\"name\":\"setQuestionStateController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"internalType\":\"enum Vault.STATUS\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalLockedInVaults\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stage\",\"type\":\"uint256\"}],\"name\":\"withdrawMetric\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"metricTokenAddress\":\"The Metric token address\",\"questionStateControllerAddress\":\"The QuestionStateController address.\",\"treasuryAddress\":\"The treasury address.\"}},\"getMetricTotalLockedBalance()\":{\"returns\":{\"_0\":\"The total amount of Metric locked in the vault.\"}},\"getVaultById(uint256,uint256,address)\":{\"params\":{\"questionId\":\"The question id.\",\"stage\":\"The stage of the question.\",\"user\":\"The address of the user.\"},\"returns\":{\"_0\":\"A struct containing the attributes of the question (withdrawer, amount, status).\"}},\"getVaultsByWithdrawer(address)\":{\"params\":{\"user\":\"The address of the user.\"},\"returns\":{\"_0\":\"The questions that the user has created.\"}},\"lockMetric(address,uint256,uint256,uint256)\":{\"params\":{\"amount\":\"The amount of METRIC to lock\",\"questionId\":\"The question id'\",\"stage\":\"The stage for which METRIC is locked\",\"user\":\"The address of the user locking the METRIC\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setCostController(address)\":{\"params\":{\"_newCostController\":\"The new address of the ActionCostController.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawMetric(uint256,uint256)\":{\"params\":{\"questionId\":\"The question id\",\"stage\":\"The stage for which the user is withdrawing metric from a question.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"AlreadySlashed()\":[{\"notice\":\"Throw if the same question is slashed twice.\"}],\"InvalidAddress()\":[{\"notice\":\"Throw if address is equal to address(0).\"}],\"InvalidStage()\":[{\"notice\":\"Throw if user tries to lock METRIC for a stage that does not require locking.\"}],\"NoMetricDeposited()\":[{\"notice\":\"Throw if user tries to withdraw Metric without having first deposited.\"}],\"NotTheDepositor()\":[{\"notice\":\"Throw if user tries to withdraw Metric from a question it does not own.\"}],\"QuestionHasInvalidStatus()\":[{\"notice\":\"Throw if user tries to lock Metric for a question that has a different state than UNINT.\"}],\"QuestionNotPublished()\":[{\"notice\":\"Throw if user tries to claim Metric for a question that has not been published (yet).\"}]},\"events\":{\"Slashed(address,uint256)\":{\"notice\":\"Event emitted when a question is slashed.\"},\"Withdraw(address,uint256)\":{\"notice\":\"Event emitted when Metric is withdrawn.\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructor sets the question Metric token, QuestionStateController and the treasury.\"},\"depositsByWithdrawers(address,uint256)\":{\"notice\":\"Keeps track of the quantity of deposits per user.\"},\"getMetricTotalLockedBalance()\":{\"notice\":\"Gets the total amount of Metric locked in the vault.\"},\"getVaultById(uint256,uint256,address)\":{\"notice\":\"Gets the information about the vault attributes of a question.\"},\"getVaultsByWithdrawer(address)\":{\"notice\":\"Gets the questions that a user has created.\"},\"lockMetric(address,uint256,uint256,uint256)\":{\"notice\":\"Locks METRIC for creating a question\"},\"lockedMetric(uint256,uint256,address)\":{\"notice\":\"Keeps track of the quantity of withdrawals per user.\"},\"lockedMetricByQuestion(uint256)\":{\"notice\":\"Keeps track of the amount of METRIC locked per question\"},\"setCostController(address)\":{\"notice\":\"Sets the address of the ActionCostController.\"},\"setMetric(address)\":{\"notice\":\"Allows owner to update the Metric token address.\"},\"setQuestionStateController(address)\":{\"notice\":\"Allows owner to update the QuestionStateController.\"},\"setTreasury(address)\":{\"notice\":\"Allows owner to update the treasury address.\"},\"totalLockedInVaults(address)\":{\"notice\":\"Keeps track of total amount in vault for a given user.\"},\"treasury()\":{\"notice\":\"Address to the MetricsDAO treasury.\"},\"withdrawMetric(uint256,uint256)\":{\"notice\":\"Allows a user to withdraw METRIC locked for a question, after the question is published.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/Protocol/Vault.sol\":\"Vault\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"src/contracts/Protocol/QuestionStateController.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n// Interfaces\\nimport \\\"./interfaces/IQuestionStateController.sol\\\";\\n\\n// Modifiers\\nimport \\\"./modifiers/OnlyAPI.sol\\\";\\n\\ncontract QuestionStateController is IQuestionStateController, Ownable, OnlyApi {\\n    // Mapping for all questions that are upvoted by the user?\\n    mapping(address => mapping(uint256 => bool)) public hasVoted;\\n    mapping(address => mapping(uint256 => uint256)) public questionIndex;\\n\\n    mapping(uint256 => QuestionStats) public questionByState;\\n\\n    //TODO mapping     mapping(STATE => uint256[]) public questionState;\\n\\n    // TODO do we want user to lose their metric if a question is closed? they voted on somethjing bad\\n\\n    /**\\n     * @notice Initializes a question to draft.\\n     * @param questionId The id of the question\\n     */\\n    function initializeQuestion(uint256 questionId, string calldata uri) public onlyApi {\\n        QuestionStats memory question;\\n\\n        question.questionId = questionId;\\n        question.uri = uri;\\n        question.totalVotes = 1;\\n        question.questionState = STATE.VOTING;\\n\\n        questionByState[questionId] = question;\\n    }\\n\\n    function publish(uint256 questionId) public onlyApi onlyState(STATE.VOTING, questionId) {\\n        // if some voting barrier is passed, we can publish the question\\n        QuestionStats storage _question = questionByState[questionId];\\n        _question.questionState = STATE.PUBLISHED;\\n    }\\n\\n    function voteFor(address _user, uint256 questionId) public onlyApi onlyState(STATE.VOTING, questionId) {\\n        // Checks\\n        if (hasVoted[_user][questionId]) revert HasAlreadyVotedForQuestion();\\n\\n        // Effects\\n        QuestionStats storage _question = questionByState[questionId];\\n        _question.totalVotes += 1;\\n\\n        hasVoted[_user][questionId] = true;\\n        _question.voters.push(_user);\\n        questionIndex[_user][questionId] = _question.voters.length - 1;\\n\\n        // Interactions\\n    }\\n\\n    function unvoteFor(address _user, uint256 questionId) public onlyApi onlyState(STATE.VOTING, questionId) {\\n        // Checks\\n        if (!hasVoted[_user][questionId]) revert HasNotVotedForQuestion();\\n\\n        // Effects\\n        QuestionStats storage _question = questionByState[questionId];\\n        _question.totalVotes -= 1;\\n\\n        uint256 index = questionIndex[_user][questionId];\\n        delete _question.voters[index];\\n\\n        hasVoted[_user][questionId] = false;\\n\\n        // Interactions\\n    }\\n\\n    function setDisqualifiedState(uint256 questionId) public onlyApi {\\n        QuestionStats storage _question = questionByState[questionId];\\n        _question.questionState = STATE.DISQUALIFIED;\\n    }\\n\\n    // TODO batch voting and batch operations and look into arrays as parameters security risk\\n\\n    //------------------------------------------------------ View Functions\\n\\n    function getState(uint256 questionId) public view returns (uint256 currentState) {\\n        QuestionStats memory _question = questionByState[questionId];\\n        return uint256(_question.questionState);\\n    }\\n\\n    function getVoters(uint256 questionId) public view returns (address[] memory voters) {\\n        QuestionStats memory _question = questionByState[questionId];\\n        return _question.voters;\\n    }\\n\\n    function getTotalVotes(uint256 questionId) public view returns (uint256) {\\n        QuestionStats memory _question = questionByState[questionId];\\n        return _question.totalVotes;\\n    }\\n\\n    function getQuestionsByState(\\n        STATE currentState,\\n        uint256 currentQuestionId,\\n        uint256 offset\\n    ) public view returns (QuestionStats[] memory) {\\n        uint256 j = 0;\\n        uint256 limit;\\n        uint256 sizeOfArray;\\n        currentQuestionId -= 1;\\n        if (currentQuestionId > offset) {\\n            limit = currentQuestionId - offset;\\n            sizeOfArray = (currentQuestionId - offset) + 1;\\n        } else {\\n            limit = 1;\\n            sizeOfArray = currentQuestionId;\\n        }\\n        QuestionStats[] memory arr = new QuestionStats[](sizeOfArray);\\n        for (uint256 i = currentQuestionId; i >= limit; i--) {\\n            if (questionByState[i].questionState == currentState) {\\n                arr[j] = questionByState[i];\\n                j++;\\n            }\\n        }\\n        return arr;\\n    }\\n\\n    //------------------------------------------------------ Errors\\n    error HasNotVotedForQuestion();\\n    error HasAlreadyVotedForQuestion();\\n    error InvalidStateTransition();\\n\\n    //------------------------------------------------------ Structs\\n    modifier onlyState(STATE required, uint256 questionId) {\\n        if (uint256(required) != getState(questionId)) revert InvalidStateTransition();\\n        _;\\n    }\\n\\n    struct QuestionStats {\\n        uint256 questionId;\\n        string uri;\\n        address[] voters;\\n        uint256 totalVotes;\\n        STATE questionState;\\n    }\\n}\\n\",\"keccak256\":\"0x942b312cbac744b9c1e3281a55e13b4ff5c62cf9686db37cebc20d47a7215c78\",\"license\":\"MIT\"},\"src/contracts/Protocol/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./QuestionStateController.sol\\\";\\n\\n// Interfaces\\nimport \\\"./interfaces/IQuestionStateController.sol\\\";\\n\\n// Modifiers\\nimport \\\"./modifiers/OnlyCostController.sol\\\";\\n\\ncontract Vault is Ownable, OnlyCostController {\\n    IERC20 public metric;\\n    IQuestionStateController public questionStateController;\\n\\n    STATUS public status;\\n\\n    /// @notice Address to the MetricsDAO treasury.\\n    address public treasury;\\n\\n    /// @notice Keeps track of the quantity of deposits per user.\\n    mapping(address => uint256[]) public depositsByWithdrawers;\\n\\n    /// @notice Keeps track of the amount of METRIC locked per question\\n    mapping(uint256 => uint256) public lockedMetricByQuestion;\\n\\n    /// @notice Keeps track of total amount in vault for a given user.\\n    mapping(address => uint256) public totalLockedInVaults;\\n\\n    /// @notice Keeps track of the quantity of withdrawals per user.\\n    mapping(uint256 => mapping(uint256 => mapping(address => lockAttributes))) public lockedMetric;\\n\\n    //------------------------------------------------------ ERRORS\\n\\n    /// @notice Throw if user tries to withdraw Metric from a question it does not own.\\n    error NotTheDepositor();\\n    /// @notice Throw if user tries to withdraw Metric without having first deposited.\\n    error NoMetricDeposited();\\n    /// @notice Throw if user tries to lock Metric for a question that has a different state than UNINT.\\n    error QuestionHasInvalidStatus();\\n    /// @notice Throw if user tries to claim Metric for a question that has not been published (yet).\\n    error QuestionNotPublished();\\n    /// @notice Throw if the same question is slashed twice.\\n    error AlreadySlashed();\\n    /// @notice Throw if address is equal to address(0).\\n    error InvalidAddress();\\n    /// @notice Throw if user tries to lock METRIC for a stage that does not require locking.\\n    error InvalidStage();\\n\\n    //------------------------------------------------------ STRUCTS\\n\\n    struct lockAttributes {\\n        address user;\\n        uint256 amount;\\n        STATUS status;\\n    }\\n\\n    //------------------------------------------------------ ENUMS\\n\\n    enum STATUS {\\n        UNINT,\\n        DEPOSITED,\\n        WITHDRAWN,\\n        SLASHED\\n    }\\n\\n    //------------------------------------------------------ EVENTS\\n\\n    /// @notice Event emitted when Metric is withdrawn.\\n    event Withdraw(address indexed user, uint256 indexed amount);\\n    /// @notice Event emitted when a question is slashed.\\n    event Slashed(address indexed user, uint256 indexed questionId);\\n\\n    //------------------------------------------------------ CONSTRUCTOR\\n\\n    /**\\n     * @notice Constructor sets the question Metric token, QuestionStateController and the treasury.\\n     * @param metricTokenAddress The Metric token address\\n     * @param questionStateControllerAddress The QuestionStateController address.\\n     * @param treasuryAddress The treasury address.\\n     */\\n    constructor(\\n        address metricTokenAddress,\\n        address questionStateControllerAddress,\\n        address treasuryAddress\\n    ) {\\n        metric = IERC20(metricTokenAddress);\\n        questionStateController = IQuestionStateController(questionStateControllerAddress);\\n        treasury = treasuryAddress;\\n    }\\n\\n    //------------------------------------------------------ FUNCTIONS\\n\\n    /**\\n     * @notice Locks METRIC for creating a question\\n     * @param user The address of the user locking the METRIC\\n     * @param amount The amount of METRIC to lock\\n     * @param questionId The question id'\\n     * @param stage The stage for which METRIC is locked\\n     */\\n    function lockMetric(\\n        address user,\\n        uint256 amount,\\n        uint256 questionId,\\n        uint256 stage\\n    ) external onlyCostController {\\n        // Checks if METRIC is locked for a valid stage.\\n        if (stage >= 3) revert InvalidStage();\\n        // Checks if there has not been a deposit yet\\n        if (lockedMetric[questionId][stage][user].status != STATUS.UNINT) revert QuestionHasInvalidStatus();\\n\\n        // Accounting & changes\\n        lockedMetric[questionId][stage][user].user = user;\\n        lockedMetric[questionId][stage][user].amount += amount;\\n\\n        lockedMetricByQuestion[questionId] += amount;\\n\\n        lockedMetric[questionId][stage][user].status = STATUS.DEPOSITED;\\n\\n        totalLockedInVaults[user] += amount;\\n        depositsByWithdrawers[user].push(questionId);\\n\\n        // Transfers Metric from the user to the vault.\\n        metric.transferFrom(user, address(this), amount);\\n    }\\n\\n    /**\\n     * @notice Allows a user to withdraw METRIC locked for a question, after the question is published.\\n     * @param questionId The question id\\n     * @param stage The stage for which the user is withdrawing metric from a question.\\n     */\\n    function withdrawMetric(uint256 questionId, uint256 stage) external {\\n        // Checks if Metric is withdrawn for a valid stage.\\n        if (stage >= 3) revert InvalidStage();\\n        // Checks that only the depositer can withdraw the metric\\n        if (_msgSender() != lockedMetric[questionId][stage][_msgSender()].user) revert NotTheDepositor();\\n        // Checks that the metric to withdraw is not 0\\n        if (lockedMetric[questionId][stage][_msgSender()].status != STATUS.DEPOSITED) revert NoMetricDeposited();\\n\\n        if (stage == 0) {\\n            // Checks that the question is published\\n            if (questionStateController.getState(questionId) != uint256(IQuestionStateController.STATE.PUBLISHED)) revert QuestionNotPublished();\\n\\n            // Accounting & changes\\n            uint256 toWithdraw = lockedMetric[questionId][stage][_msgSender()].amount;\\n\\n            lockedMetric[questionId][stage][_msgSender()].status = STATUS.WITHDRAWN;\\n            lockedMetric[questionId][stage][_msgSender()].amount = 0;\\n\\n            lockedMetricByQuestion[questionId] -= toWithdraw;\\n            totalLockedInVaults[_msgSender()] -= toWithdraw;\\n\\n            // Transfers Metric from the vault to the user.\\n            metric.transfer(_msgSender(), toWithdraw);\\n\\n            emit Withdraw(_msgSender(), toWithdraw);\\n        } else if (stage == 1) {\\n            // if (submissionPeriod == active) revert SubmissionPeriodActive();\\n        } else {\\n            // if (reviewPeriod == active) revert ReviewPeriodActive();\\n        }\\n    }\\n\\n    /**\\n     * @notice Allows onlyOwner to slash a question -- halfing the METRIC locked for the question.\\n     * @param questionId The question id\\n     */\\n    // function slashMetric(uint256 questionId) external onlyOwner {\\n    //     // Check that the question has not been slashed yet.\\n    //     if (lockedMetric[questionId][0].status == STATUS.SLASHED) revert AlreadySlashed();\\n\\n    //     lockedMetric[questionId][0].status = STATUS.SLASHED;\\n\\n    //     // Send half of the Metric to the treasury\\n    //     metric.transfer(treasury, lockedMetricByQuestion[questionId] / 2);\\n\\n    //     // Return the other half of the Metric to the user\\n    //     metric.transfer(lockedMetric[questionId][0].user, lockedMetric[questionId][0].amount / 2);\\n\\n    //     emit Slashed(lockedMetric[questionId][0].user, questionId);\\n    // }\\n\\n    /**\\n     * @notice Gets the questions that a user has created.\\n     * @param user The address of the user.\\n     * @return The questions that the user has created.\\n     */\\n    function getVaultsByWithdrawer(address user) external view returns (uint256[] memory) {\\n        return depositsByWithdrawers[user];\\n    }\\n\\n    /**\\n     * @notice Gets the information about the vault attributes of a question.\\n     * @param questionId The question id.\\n     * @param stage The stage of the question.\\n     * @param user The address of the user.\\n     * @return A struct containing the attributes of the question (withdrawer, amount, status).\\n     */\\n    function getVaultById(\\n        uint256 questionId,\\n        uint256 stage,\\n        address user\\n    ) external view returns (lockAttributes memory) {\\n        return lockedMetric[questionId][stage][user];\\n    }\\n\\n    function getLockedMetricByQuestion(uint256 questionId) public view returns (uint256) {\\n        return lockedMetricByQuestion[questionId];\\n    }\\n\\n    function getUserFromProperties(\\n        uint256 questionId,\\n        uint256 stage,\\n        address user\\n    ) public view returns (address) {\\n        return lockedMetric[questionId][stage][user].user;\\n    }\\n\\n    function getAmountFromProperties(\\n        uint256 questionId,\\n        uint256 stage,\\n        address user\\n    ) public view returns (uint256) {\\n        return lockedMetric[questionId][stage][user].amount;\\n    }\\n\\n    function getLockedPerUser(address _user) public view returns (uint256) {\\n        return totalLockedInVaults[_user];\\n    }\\n\\n    /**\\n     * @notice Gets the total amount of Metric locked in the vault.\\n     * @return The total amount of Metric locked in the vault.\\n     */\\n    function getMetricTotalLockedBalance() external view returns (uint256) {\\n        return metric.balanceOf(address(this));\\n    }\\n\\n    //------------------------------------------------------ OWNER FUNCTIONS\\n\\n    /**\\n     * @notice Allows owner to update the QuestionStateController.\\n     */\\n    function setQuestionStateController(address _questionStateController) public onlyOwner {\\n        if (_questionStateController == address(0)) revert InvalidAddress();\\n        questionStateController = IQuestionStateController(_questionStateController);\\n    }\\n\\n    /**\\n     * @notice Allows owner to update the treasury address.\\n     */\\n    function setTreasury(address _treasury) public onlyOwner {\\n        treasury = _treasury;\\n    }\\n\\n    /**\\n     * @notice Allows owner to update the Metric token address.\\n     */\\n    function setMetric(address _metric) public onlyOwner {\\n        if (_metric == address(0)) revert InvalidAddress();\\n        metric = IERC20(_metric);\\n    }\\n}\\n\",\"keccak256\":\"0xbca04cc5874520f0c1438f5bd85152e504d16d4081e06f9fe28ed24bac1b43b0\",\"license\":\"MIT\"},\"src/contracts/Protocol/interfaces/IQuestionStateController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IQuestionStateController {\\n    function initializeQuestion(uint256 questionId, string calldata uri) external;\\n\\n    function voteFor(address _user, uint256 questionId) external;\\n\\n    function unvoteFor(address _user, uint256 questionId) external;\\n\\n    function publish(uint256 questionId) external;\\n\\n    // TODO currentState can probably be like a uint8, it depends on how many states we have\\n    function getState(uint256 quesitonId) external view returns (uint256 currentState);\\n\\n    function setDisqualifiedState(uint256 questionId) external;\\n\\n    enum STATE {\\n        // TODO this where it becomes a challenge, can be claimed and answered\\n        UNINIT,\\n        VOTING,\\n        PUBLISHED, // TODO this where it becomes a challenge, can be claimed and answered\\n        DISQUALIFIED,\\n        COMPLETED\\n    }\\n}\\n\",\"keccak256\":\"0x830f6fc04eabf46ce0ecc5b224c10fb0b0df157430ee95e877f300e33240ae82\",\"license\":\"MIT\"},\"src/contracts/Protocol/modifiers/OnlyAPI.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract OnlyApi is Ownable {\\n    address public questionApi;\\n\\n    // ------------------------------- Setter\\n    /**\\n     * @notice Sets the address of the question API.\\n     * @param _newApi The new address of the question API.\\n     */\\n    function setQuestionApi(address _newApi) external onlyOwner {\\n        questionApi = _newApi;\\n    }\\n\\n    // ------------------------ Modifiers\\n    modifier onlyApi() {\\n        if (_msgSender() != questionApi) revert NotTheApi();\\n        _;\\n    }\\n\\n    // ------------------------ Errors\\n    error NotTheApi();\\n}\\n\",\"keccak256\":\"0x0681de2966fa03720603c0e7361f8ee5d887b9526d074ba9c14dbf3b80978934\",\"license\":\"MIT\"},\"src/contracts/Protocol/modifiers/OnlyCostController.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract OnlyCostController is Ownable {\\n    address public costController;\\n\\n    // ------------------------------- Setter\\n    /**\\n     * @notice Sets the address of the ActionCostController.\\n     * @param _newCostController The new address of the ActionCostController.\\n     */\\n    function setCostController(address _newCostController) external onlyOwner {\\n        costController = _newCostController;\\n    }\\n\\n    // ------------------------ Modifiers\\n    modifier onlyCostController() {\\n        if (_msgSender() != costController) revert NotTheCostController();\\n        _;\\n    }\\n\\n    // ------------------------ Errors\\n    error NotTheCostController();\\n}\\n\",\"keccak256\":\"0x4c3f6b61445fe478b6b3248f1ac2a6f483111c1b0dd89c722c3351f1ece35a86\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101735760003560e01c806371546b81116100de578063aa9ce2e611610097578063e37a9b6711610071578063e37a9b671461048a578063f0f44260146104a6578063f0f64201146104c2578063f2fde38b146104de57610173565b8063aa9ce2e61461041e578063b548fcae1461044e578063cb5519761461046c57610173565b806371546b811461032057806377f72a01146103505780637dd8421e146103805780638ad4b249146103b05780638ce58682146103e25780638da5cb5b1461040057610173565b8063434047d911610130578063434047d91461024c57806347365f5c1461027c5780635adbf5ff1461029857806361d027b3146102c857806369e9c77f146102e6578063715018a61461031657610173565b8063063e9e3a14610178578063074a8ed4146101a857806311de9a6c146101c45780631919bcd6146101e2578063200d2ed2146101fe5780633445f3321461021c575b600080fd5b610192600480360381019061018d9190611bb4565b6104fa565b60405161019f9190611bf0565b60405180910390f35b6101c260048036038101906101bd9190611c69565b610512565b005b6101cc6109e3565b6040516101d99190611d2f565b60405180910390f35b6101fc60048036038101906101f79190611d4a565b610a09565b005b610206610ac9565b6040516102139190611dee565b60405180910390f35b61023660048036038101906102319190611e09565b610adc565b6040516102439190611ecb565b60405180910390f35b61026660048036038101906102619190611bb4565b610bf4565b6040516102739190611bf0565b60405180910390f35b61029660048036038101906102919190611d4a565b610c11565b005b6102b260048036038101906102ad9190611d4a565b610d37565b6040516102bf9190611bf0565b60405180910390f35b6102d0610d4f565b6040516102dd9190611ef5565b60405180910390f35b61030060048036038101906102fb9190611e09565b610d75565b60405161030d9190611bf0565b60405180910390f35b61031e610de5565b005b61033a60048036038101906103359190611d4a565b610e6d565b6040516103479190611fbf565b60405180910390f35b61036a60048036038101906103659190611d4a565b610f04565b6040516103779190611bf0565b60405180910390f35b61039a60048036038101906103959190611e09565b610f4d565b6040516103a79190611ef5565b60405180910390f35b6103ca60048036038101906103c59190611e09565b610fdd565b6040516103d993929190611fe1565b60405180910390f35b6103ea61104e565b6040516103f79190611bf0565b60405180910390f35b6104086110f1565b6040516104159190611ef5565b60405180910390f35b61043860048036038101906104339190612018565b61111a565b6040516104459190611bf0565b60405180910390f35b61045661114b565b6040516104639190611ef5565b60405180910390f35b610474611171565b6040516104819190612079565b60405180910390f35b6104a4600480360381019061049f9190612094565b611197565b005b6104c060048036038101906104bb9190611d4a565b611787565b005b6104dc60048036038101906104d79190611d4a565b611847565b005b6104f860048036038101906104f39190611d4a565b61196d565b005b60066020528060005260406000206000915090505481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610553611a64565b73ffffffffffffffffffffffffffffffffffffffff16146105a0576040517f1ac379d700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600381106105da576040517fe82a532900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060038111156105ee576105ed611d77565b5b60086000848152602001908152602001600020600083815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16600381111561067257610671611d77565b5b146106a9576040517fbe9ad66900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8360086000848152602001908152602001600020600083815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508260086000848152602001908152602001600020600083815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008282546107c09190612103565b92505081905550826006600084815260200190815260200160002060008282546107ea9190612103565b92505081905550600160086000848152602001908152602001600020600083815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160006101000a81548160ff0219169083600381111561087957610878611d77565b5b021790555082600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546108cd9190612103565b92505081905550600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020829080600181540180825580915050600190039060005260206000200160009091909190915055600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd8530866040518463ffffffff1660e01b815260040161099993929190612159565b6020604051808303816000875af11580156109b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109dc91906121c8565b5050505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610a11611a64565b73ffffffffffffffffffffffffffffffffffffffff16610a2f6110f1565b73ffffffffffffffffffffffffffffffffffffffff1614610a85576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7c90612252565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600360149054906101000a900460ff1681565b610ae4611b30565b60086000858152602001908152602001600020600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820160009054906101000a900460ff166003811115610bd557610bd4611d77565b5b6003811115610be757610be6611d77565b5b8152505090509392505050565b600060066000838152602001908152602001600020549050919050565b610c19611a64565b73ffffffffffffffffffffffffffffffffffffffff16610c376110f1565b73ffffffffffffffffffffffffffffffffffffffff1614610c8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8490612252565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610cf3576040517fe6c4247b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60076020528060005260406000206000915090505481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060086000858152602001908152602001600020600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015490509392505050565b610ded611a64565b73ffffffffffffffffffffffffffffffffffffffff16610e0b6110f1565b73ffffffffffffffffffffffffffffffffffffffff1614610e61576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5890612252565b60405180910390fd5b610e6b6000611a6c565b565b6060600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015610ef857602002820191906000526020600020905b815481526020019060010190808311610ee4575b50505050509050919050565b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600060086000858152602001908152602001600020600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690509392505050565b600860205282600052604060002060205281600052604060002060205280600052604060002060009250925050508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020160009054906101000a900460ff16905083565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016110ab9190611ef5565b602060405180830381865afa1580156110c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ec9190612287565b905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6005602052816000526040600020818154811061113657600080fd5b90600052602060002001600091509150505481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600381106111d1576040517fe82a532900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60086000838152602001908152602001600020600082815260200190815260200160002060006111ff611a64565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661127b611a64565b73ffffffffffffffffffffffffffffffffffffffff16146112c8576040517f7ff62b7d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160038111156112dc576112db611d77565b5b600860008481526020019081526020016000206000838152602001908152602001600020600061130a611a64565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16600381111561136757611366611d77565b5b1461139e576040517f7109e46600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000810361178257600260048111156113ba576113b9611d77565b5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166344c9af28846040518263ffffffff1660e01b81526004016114159190611bf0565b602060405180830381865afa158015611432573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114569190612287565b1461148d576040517f9aded0d000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060086000848152602001908152602001600020600083815260200190815260200160002060006114bd611a64565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015490506002600860008581526020019081526020016000206000848152602001908152602001600020600061152d611a64565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160006101000a81548160ff0219169083600381111561158c5761158b611d77565b5b0217905550600060086000858152602001908152602001600020600084815260200190815260200160002060006115c1611a64565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055508060066000858152602001908152602001600020600082825461162591906122b4565b925050819055508060076000611639611a64565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461168291906122b4565b92505081905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6116cf611a64565b836040518363ffffffff1660e01b81526004016116ed9291906122e8565b6020604051808303816000875af115801561170c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061173091906121c8565b508061173a611a64565b73ffffffffffffffffffffffffffffffffffffffff167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a942436460405160405180910390a350611783565b5b5050565b61178f611a64565b73ffffffffffffffffffffffffffffffffffffffff166117ad6110f1565b73ffffffffffffffffffffffffffffffffffffffff1614611803576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117fa90612252565b60405180910390fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61184f611a64565b73ffffffffffffffffffffffffffffffffffffffff1661186d6110f1565b73ffffffffffffffffffffffffffffffffffffffff16146118c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118ba90612252565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611929576040517fe6c4247b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b611975611a64565b73ffffffffffffffffffffffffffffffffffffffff166119936110f1565b73ffffffffffffffffffffffffffffffffffffffff16146119e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119e090612252565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611a58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a4f90612383565b60405180910390fd5b611a6181611a6c565b50565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160006003811115611b7357611b72611d77565b5b81525090565b600080fd5b6000819050919050565b611b9181611b7e565b8114611b9c57600080fd5b50565b600081359050611bae81611b88565b92915050565b600060208284031215611bca57611bc9611b79565b5b6000611bd884828501611b9f565b91505092915050565b611bea81611b7e565b82525050565b6000602082019050611c056000830184611be1565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611c3682611c0b565b9050919050565b611c4681611c2b565b8114611c5157600080fd5b50565b600081359050611c6381611c3d565b92915050565b60008060008060808587031215611c8357611c82611b79565b5b6000611c9187828801611c54565b9450506020611ca287828801611b9f565b9350506040611cb387828801611b9f565b9250506060611cc487828801611b9f565b91505092959194509250565b6000819050919050565b6000611cf5611cf0611ceb84611c0b565b611cd0565b611c0b565b9050919050565b6000611d0782611cda565b9050919050565b6000611d1982611cfc565b9050919050565b611d2981611d0e565b82525050565b6000602082019050611d446000830184611d20565b92915050565b600060208284031215611d6057611d5f611b79565b5b6000611d6e84828501611c54565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60048110611db757611db6611d77565b5b50565b6000819050611dc882611da6565b919050565b6000611dd882611dba565b9050919050565b611de881611dcd565b82525050565b6000602082019050611e036000830184611ddf565b92915050565b600080600060608486031215611e2257611e21611b79565b5b6000611e3086828701611b9f565b9350506020611e4186828701611b9f565b9250506040611e5286828701611c54565b9150509250925092565b611e6581611c2b565b82525050565b611e7481611b7e565b82525050565b611e8381611dcd565b82525050565b606082016000820151611e9f6000850182611e5c565b506020820151611eb26020850182611e6b565b506040820151611ec56040850182611e7a565b50505050565b6000606082019050611ee06000830184611e89565b92915050565b611eef81611c2b565b82525050565b6000602082019050611f0a6000830184611ee6565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000611f488383611e6b565b60208301905092915050565b6000602082019050919050565b6000611f6c82611f10565b611f768185611f1b565b9350611f8183611f2c565b8060005b83811015611fb2578151611f998882611f3c565b9750611fa483611f54565b925050600181019050611f85565b5085935050505092915050565b60006020820190508181036000830152611fd98184611f61565b905092915050565b6000606082019050611ff66000830186611ee6565b6120036020830185611be1565b6120106040830184611ddf565b949350505050565b6000806040838503121561202f5761202e611b79565b5b600061203d85828601611c54565b925050602061204e85828601611b9f565b9150509250929050565b600061206382611cfc565b9050919050565b61207381612058565b82525050565b600060208201905061208e600083018461206a565b92915050565b600080604083850312156120ab576120aa611b79565b5b60006120b985828601611b9f565b92505060206120ca85828601611b9f565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061210e82611b7e565b915061211983611b7e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561214e5761214d6120d4565b5b828201905092915050565b600060608201905061216e6000830186611ee6565b61217b6020830185611ee6565b6121886040830184611be1565b949350505050565b60008115159050919050565b6121a581612190565b81146121b057600080fd5b50565b6000815190506121c28161219c565b92915050565b6000602082840312156121de576121dd611b79565b5b60006121ec848285016121b3565b91505092915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061223c6020836121f5565b915061224782612206565b602082019050919050565b6000602082019050818103600083015261226b8161222f565b9050919050565b60008151905061228181611b88565b92915050565b60006020828403121561229d5761229c611b79565b5b60006122ab84828501612272565b91505092915050565b60006122bf82611b7e565b91506122ca83611b7e565b9250828210156122dd576122dc6120d4565b5b828203905092915050565b60006040820190506122fd6000830185611ee6565b61230a6020830184611be1565b9392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061236d6026836121f5565b915061237882612311565b604082019050919050565b6000602082019050818103600083015261239c81612360565b905091905056fea264697066735822122010ae1840f5279b81ded2c1b4790c49059b27ebdecf1351187f1d319475b5aa9b64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "metricTokenAddress": "The Metric token address",
          "questionStateControllerAddress": "The QuestionStateController address.",
          "treasuryAddress": "The treasury address."
        }
      },
      "getMetricTotalLockedBalance()": {
        "returns": {
          "_0": "The total amount of Metric locked in the vault."
        }
      },
      "getVaultById(uint256,uint256,address)": {
        "params": {
          "questionId": "The question id.",
          "stage": "The stage of the question.",
          "user": "The address of the user."
        },
        "returns": {
          "_0": "A struct containing the attributes of the question (withdrawer, amount, status)."
        }
      },
      "getVaultsByWithdrawer(address)": {
        "params": {
          "user": "The address of the user."
        },
        "returns": {
          "_0": "The questions that the user has created."
        }
      },
      "lockMetric(address,uint256,uint256,uint256)": {
        "params": {
          "amount": "The amount of METRIC to lock",
          "questionId": "The question id'",
          "stage": "The stage for which METRIC is locked",
          "user": "The address of the user locking the METRIC"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setCostController(address)": {
        "params": {
          "_newCostController": "The new address of the ActionCostController."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawMetric(uint256,uint256)": {
        "params": {
          "questionId": "The question id",
          "stage": "The stage for which the user is withdrawing metric from a question."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "AlreadySlashed()": [
        {
          "notice": "Throw if the same question is slashed twice."
        }
      ],
      "InvalidAddress()": [
        {
          "notice": "Throw if address is equal to address(0)."
        }
      ],
      "InvalidStage()": [
        {
          "notice": "Throw if user tries to lock METRIC for a stage that does not require locking."
        }
      ],
      "NoMetricDeposited()": [
        {
          "notice": "Throw if user tries to withdraw Metric without having first deposited."
        }
      ],
      "NotTheDepositor()": [
        {
          "notice": "Throw if user tries to withdraw Metric from a question it does not own."
        }
      ],
      "QuestionHasInvalidStatus()": [
        {
          "notice": "Throw if user tries to lock Metric for a question that has a different state than UNINT."
        }
      ],
      "QuestionNotPublished()": [
        {
          "notice": "Throw if user tries to claim Metric for a question that has not been published (yet)."
        }
      ]
    },
    "events": {
      "Slashed(address,uint256)": {
        "notice": "Event emitted when a question is slashed."
      },
      "Withdraw(address,uint256)": {
        "notice": "Event emitted when Metric is withdrawn."
      }
    },
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Constructor sets the question Metric token, QuestionStateController and the treasury."
      },
      "depositsByWithdrawers(address,uint256)": {
        "notice": "Keeps track of the quantity of deposits per user."
      },
      "getMetricTotalLockedBalance()": {
        "notice": "Gets the total amount of Metric locked in the vault."
      },
      "getVaultById(uint256,uint256,address)": {
        "notice": "Gets the information about the vault attributes of a question."
      },
      "getVaultsByWithdrawer(address)": {
        "notice": "Gets the questions that a user has created."
      },
      "lockMetric(address,uint256,uint256,uint256)": {
        "notice": "Locks METRIC for creating a question"
      },
      "lockedMetric(uint256,uint256,address)": {
        "notice": "Keeps track of the quantity of withdrawals per user."
      },
      "lockedMetricByQuestion(uint256)": {
        "notice": "Keeps track of the amount of METRIC locked per question"
      },
      "setCostController(address)": {
        "notice": "Sets the address of the ActionCostController."
      },
      "setMetric(address)": {
        "notice": "Allows owner to update the Metric token address."
      },
      "setQuestionStateController(address)": {
        "notice": "Allows owner to update the QuestionStateController."
      },
      "setTreasury(address)": {
        "notice": "Allows owner to update the treasury address."
      },
      "totalLockedInVaults(address)": {
        "notice": "Keeps track of total amount in vault for a given user."
      },
      "treasury()": {
        "notice": "Address to the MetricsDAO treasury."
      },
      "withdrawMetric(uint256,uint256)": {
        "notice": "Allows a user to withdraw METRIC locked for a question, after the question is published."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "src/contracts/Protocol/Vault.sol:Vault",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5529,
        "contract": "src/contracts/Protocol/Vault.sol:Vault",
        "label": "costController",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 4762,
        "contract": "src/contracts/Protocol/Vault.sol:Vault",
        "label": "metric",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)865"
      },
      {
        "astId": 4765,
        "contract": "src/contracts/Protocol/Vault.sol:Vault",
        "label": "questionStateController",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IQuestionStateController)5387"
      },
      {
        "astId": 4768,
        "contract": "src/contracts/Protocol/Vault.sol:Vault",
        "label": "status",
        "offset": 20,
        "slot": "3",
        "type": "t_enum(STATUS)4831"
      },
      {
        "astId": 4771,
        "contract": "src/contracts/Protocol/Vault.sol:Vault",
        "label": "treasury",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 4777,
        "contract": "src/contracts/Protocol/Vault.sol:Vault",
        "label": "depositsByWithdrawers",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 4782,
        "contract": "src/contracts/Protocol/Vault.sol:Vault",
        "label": "lockedMetricByQuestion",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 4787,
        "contract": "src/contracts/Protocol/Vault.sol:Vault",
        "label": "totalLockedInVaults",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4797,
        "contract": "src/contracts/Protocol/Vault.sol:Vault",
        "label": "lockedMetric",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_address,t_struct(lockAttributes)4826_storage)))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)865": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IQuestionStateController)5387": {
        "encoding": "inplace",
        "label": "contract IQuestionStateController",
        "numberOfBytes": "20"
      },
      "t_enum(STATUS)4831": {
        "encoding": "inplace",
        "label": "enum Vault.STATUS",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_struct(lockAttributes)4826_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Vault.lockAttributes)",
        "numberOfBytes": "32",
        "value": "t_struct(lockAttributes)4826_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(lockAttributes)4826_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct Vault.lockAttributes))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(lockAttributes)4826_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_address,t_struct(lockAttributes)4826_storage)))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => mapping(address => struct Vault.lockAttributes)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_address,t_struct(lockAttributes)4826_storage))"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(lockAttributes)4826_storage": {
        "encoding": "inplace",
        "label": "struct Vault.lockAttributes",
        "members": [
          {
            "astId": 4820,
            "contract": "src/contracts/Protocol/Vault.sol:Vault",
            "label": "user",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4822,
            "contract": "src/contracts/Protocol/Vault.sol:Vault",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4825,
            "contract": "src/contracts/Protocol/Vault.sol:Vault",
            "label": "status",
            "offset": 0,
            "slot": "2",
            "type": "t_enum(STATUS)4831"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}