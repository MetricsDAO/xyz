{
  "address": "0x90EA3EC3deb32DCbCfd87d81E358011185d2998e",
  "abi": [
    {
      "inputs": [],
      "name": "HasAlreadyVotedForQuestion",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "HasNotVotedForQuestion",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidStateTransition",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotTheApi",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "enum IQuestionStateController.STATE",
          "name": "currentState",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "currentQuestionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        }
      ],
      "name": "getQuestionsByState",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "questionId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "uri",
              "type": "string"
            },
            {
              "internalType": "address[]",
              "name": "voters",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "totalVotes",
              "type": "uint256"
            },
            {
              "internalType": "enum IQuestionStateController.STATE",
              "name": "questionState",
              "type": "uint8"
            }
          ],
          "internalType": "struct QuestionStateController.QuestionStats[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        }
      ],
      "name": "getState",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "currentState",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        }
      ],
      "name": "getTotalVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        }
      ],
      "name": "getVoters",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "voters",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "hasVoted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "initializeQuestion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        }
      ],
      "name": "publish",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "questionApi",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "questionByState",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "totalVotes",
          "type": "uint256"
        },
        {
          "internalType": "enum IQuestionStateController.STATE",
          "name": "questionState",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "questionIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        }
      ],
      "name": "setDisqualifiedState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newApi",
          "type": "address"
        }
      ],
      "name": "setQuestionApi",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        }
      ],
      "name": "unvoteFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        }
      ],
      "name": "voteFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4cd80f7f6b7d4515c301184f4475567e6ed250fd1447ce325098e3289d695e71",
  "receipt": {
    "to": null,
    "from": "0x2d11F99f9884e257A1c9ACcc8A4Bea16FC6dA7AA",
    "contractAddress": "0x90EA3EC3deb32DCbCfd87d81E358011185d2998e",
    "transactionIndex": 30,
    "gasUsed": "2122913",
    "logsBloom": "0x
    "blockHash": "0x926d42c28ebaf87f8ac92583344ec48a2c58a6a8eca5f620a51b7e36e49be271",
    "transactionHash": "0x4cd80f7f6b7d4515c301184f4475567e6ed250fd1447ce325098e3289d695e71",
    "logs": [
      {
        "transactionIndex": 30,
        "blockNumber": 31552517,
        "transactionHash": "0x4cd80f7f6b7d4515c301184f4475567e6ed250fd1447ce325098e3289d695e71",
        "address": "0x90EA3EC3deb32DCbCfd87d81E358011185d2998e",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002d11f99f9884e257a1c9accc8a4bea16fc6da7aa"
        ],
        "data": "0x",
        "logIndex": 140,
        "blockHash": "0x926d42c28ebaf87f8ac92583344ec48a2c58a6a8eca5f620a51b7e36e49be271"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 31552517,
        "transactionHash": "0x4cd80f7f6b7d4515c301184f4475567e6ed250fd1447ce325098e3289d695e71",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000002d11f99f9884e257a1c9accc8a4bea16fc6da7aa",
          "0x00000000000000000000000030dd252c7c150f26a3a06e4eada9e706db3fa58c"
        ],
        "data": "0x000000000000000000000000000000000000000000000000010c3cecec83cf6e00000000000000000000000000000000000000000000000239adb06b8a2f4bee000000000000000000000000000000000000000000000ac0937249e73f81fcf100000000000000000000000000000000000000000000000238a1737e9dab7c80000000000000000000000000000000000000000000000ac0947e86d42c05cc5f",
        "logIndex": 141,
        "blockHash": "0x926d42c28ebaf87f8ac92583344ec48a2c58a6a8eca5f620a51b7e36e49be271"
      }
    ],
    "blockNumber": 31552517,
    "cumulativeGasUsed": "6960100",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "23a5c42ffdc6fce9090df76d82673573",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"HasAlreadyVotedForQuestion\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HasNotVotedForQuestion\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStateTransition\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotTheApi\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"enum IQuestionStateController.STATE\",\"name\":\"currentState\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"currentQuestionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"getQuestionsByState\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"voters\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"totalVotes\",\"type\":\"uint256\"},{\"internalType\":\"enum IQuestionStateController.STATE\",\"name\":\"questionState\",\"type\":\"uint8\"}],\"internalType\":\"struct QuestionStateController.QuestionStats[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"}],\"name\":\"getState\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentState\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"}],\"name\":\"getTotalVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"}],\"name\":\"getVoters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"voters\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hasVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"initializeQuestion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"}],\"name\":\"publish\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"questionApi\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"questionByState\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalVotes\",\"type\":\"uint256\"},{\"internalType\":\"enum IQuestionStateController.STATE\",\"name\":\"questionState\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"questionIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"}],\"name\":\"setDisqualifiedState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newApi\",\"type\":\"address\"}],\"name\":\"setQuestionApi\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"}],\"name\":\"unvoteFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"}],\"name\":\"voteFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"initializeQuestion(uint256,string)\":{\"params\":{\"questionId\":\"The id of the question\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setQuestionApi(address)\":{\"params\":{\"_newApi\":\"The new address of the question API.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"initializeQuestion(uint256,string)\":{\"notice\":\"Initializes a question to draft.\"},\"setQuestionApi(address)\":{\"notice\":\"Sets the address of the question API.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/Protocol/QuestionStateController.sol\":\"QuestionStateController\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"src/contracts/Protocol/QuestionStateController.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n// Interfaces\\nimport \\\"./interfaces/IQuestionStateController.sol\\\";\\n\\n// Modifiers\\nimport \\\"./modifiers/OnlyAPI.sol\\\";\\n\\ncontract QuestionStateController is IQuestionStateController, Ownable, OnlyApi {\\n    // Mapping for all questions that are upvoted by the user?\\n    mapping(address => mapping(uint256 => bool)) public hasVoted;\\n    mapping(address => mapping(uint256 => uint256)) public questionIndex;\\n\\n    mapping(uint256 => QuestionStats) public questionByState;\\n\\n    //TODO mapping     mapping(STATE => uint256[]) public questionState;\\n\\n    // TODO do we want user to lose their metric if a question is closed? they voted on somethjing bad\\n\\n    /**\\n     * @notice Initializes a question to draft.\\n     * @param questionId The id of the question\\n     */\\n    function initializeQuestion(uint256 questionId, string calldata uri) public onlyApi {\\n        QuestionStats memory question;\\n\\n        question.questionId = questionId;\\n        question.uri = uri;\\n        question.totalVotes = 1;\\n        question.questionState = STATE.VOTING;\\n\\n        questionByState[questionId] = question;\\n    }\\n\\n    function publish(uint256 questionId) public onlyApi onlyState(STATE.VOTING, questionId) {\\n        // if some voting barrier is passed, we can publish the question\\n        QuestionStats storage _question = questionByState[questionId];\\n        _question.questionState = STATE.PUBLISHED;\\n    }\\n\\n    function voteFor(address _user, uint256 questionId) public onlyApi onlyState(STATE.VOTING, questionId) {\\n        // Checks\\n        if (hasVoted[_user][questionId]) revert HasAlreadyVotedForQuestion();\\n\\n        // Effects\\n        QuestionStats storage _question = questionByState[questionId];\\n        _question.totalVotes += 1;\\n\\n        hasVoted[_user][questionId] = true;\\n        _question.voters.push(_user);\\n        questionIndex[_user][questionId] = _question.voters.length - 1;\\n\\n        // Interactions\\n    }\\n\\n    function unvoteFor(address _user, uint256 questionId) public onlyApi onlyState(STATE.VOTING, questionId) {\\n        // Checks\\n        if (!hasVoted[_user][questionId]) revert HasNotVotedForQuestion();\\n\\n        // Effects\\n        QuestionStats storage _question = questionByState[questionId];\\n        _question.totalVotes -= 1;\\n\\n        uint256 index = questionIndex[_user][questionId];\\n        delete _question.voters[index];\\n\\n        hasVoted[_user][questionId] = false;\\n\\n        // Interactions\\n    }\\n\\n    function setDisqualifiedState(uint256 questionId) public onlyApi {\\n        QuestionStats storage _question = questionByState[questionId];\\n        _question.questionState = STATE.DISQUALIFIED;\\n    }\\n\\n    // TODO batch voting and batch operations and look into arrays as parameters security risk\\n\\n    //------------------------------------------------------ View Functions\\n\\n    function getState(uint256 questionId) public view returns (uint256 currentState) {\\n        QuestionStats memory _question = questionByState[questionId];\\n        return uint256(_question.questionState);\\n    }\\n\\n    function getVoters(uint256 questionId) public view returns (address[] memory voters) {\\n        QuestionStats memory _question = questionByState[questionId];\\n        return _question.voters;\\n    }\\n\\n    function getTotalVotes(uint256 questionId) public view returns (uint256) {\\n        QuestionStats memory _question = questionByState[questionId];\\n        return _question.totalVotes;\\n    }\\n\\n    function getQuestionsByState(\\n        STATE currentState,\\n        uint256 currentQuestionId,\\n        uint256 offset\\n    ) public view returns (QuestionStats[] memory) {\\n        uint256 j = 0;\\n        uint256 limit;\\n        uint256 sizeOfArray;\\n        currentQuestionId -= 1;\\n        if (currentQuestionId > offset) {\\n            limit = currentQuestionId - offset;\\n            sizeOfArray = (currentQuestionId - offset) + 1;\\n        } else {\\n            limit = 1;\\n            sizeOfArray = currentQuestionId;\\n        }\\n        QuestionStats[] memory arr = new QuestionStats[](sizeOfArray);\\n        for (uint256 i = currentQuestionId; i >= limit; i--) {\\n            if (questionByState[i].questionState == currentState) {\\n                arr[j] = questionByState[i];\\n                j++;\\n            }\\n        }\\n        return arr;\\n    }\\n\\n    //------------------------------------------------------ Errors\\n    error HasNotVotedForQuestion();\\n    error HasAlreadyVotedForQuestion();\\n    error InvalidStateTransition();\\n\\n    //------------------------------------------------------ Structs\\n    modifier onlyState(STATE required, uint256 questionId) {\\n        if (uint256(required) != getState(questionId)) revert InvalidStateTransition();\\n        _;\\n    }\\n\\n    struct QuestionStats {\\n        uint256 questionId;\\n        string uri;\\n        address[] voters;\\n        uint256 totalVotes;\\n        STATE questionState;\\n    }\\n}\\n\",\"keccak256\":\"0x942b312cbac744b9c1e3281a55e13b4ff5c62cf9686db37cebc20d47a7215c78\",\"license\":\"MIT\"},\"src/contracts/Protocol/interfaces/IQuestionStateController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IQuestionStateController {\\n    function initializeQuestion(uint256 questionId, string calldata uri) external;\\n\\n    function voteFor(address _user, uint256 questionId) external;\\n\\n    function unvoteFor(address _user, uint256 questionId) external;\\n\\n    function publish(uint256 questionId) external;\\n\\n    // TODO currentState can probably be like a uint8, it depends on how many states we have\\n    function getState(uint256 quesitonId) external view returns (uint256 currentState);\\n\\n    function setDisqualifiedState(uint256 questionId) external;\\n\\n    enum STATE {\\n        // TODO this where it becomes a challenge, can be claimed and answered\\n        UNINIT,\\n        VOTING,\\n        PUBLISHED, // TODO this where it becomes a challenge, can be claimed and answered\\n        DISQUALIFIED,\\n        COMPLETED\\n    }\\n}\\n\",\"keccak256\":\"0x830f6fc04eabf46ce0ecc5b224c10fb0b0df157430ee95e877f300e33240ae82\",\"license\":\"MIT\"},\"src/contracts/Protocol/modifiers/OnlyAPI.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract OnlyApi is Ownable {\\n    address public questionApi;\\n\\n    // ------------------------------- Setter\\n    /**\\n     * @notice Sets the address of the question API.\\n     * @param _newApi The new address of the question API.\\n     */\\n    function setQuestionApi(address _newApi) external onlyOwner {\\n        questionApi = _newApi;\\n    }\\n\\n    // ------------------------ Modifiers\\n    modifier onlyApi() {\\n        if (_msgSender() != questionApi) revert NotTheApi();\\n        _;\\n    }\\n\\n    // ------------------------ Errors\\n    error NotTheApi();\\n}\\n\",\"keccak256\":\"0x0681de2966fa03720603c0e7361f8ee5d887b9526d074ba9c14dbf3b80978934\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5062000032620000266200003860201b60201c565b6200004060201b60201c565b62000104565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61251380620001146000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c80638da5cb5b116100a2578063d257d16d11610071578063d257d16d146102cd578063d68993e5146102e9578063e78daa7514610319578063ecf24b3114610335578063f2fde38b146103515761010b565b80638da5cb5b146102475780639e0ffcd514610265578063c0875dfd14610295578063cc4ef119146102b15761010b565b806344c9af28116100de57806344c9af28146101bf5780636baef497146101ef578063715018a61461020d57806386b646f2146102175761010b565b80631ac284001461011057806324d6d601146101435780632ce35e111461015f578063425458251461018f575b600080fd5b61012a60048036038101906101259190611ac4565b61036d565b60405161013a9493929190611c10565b60405180910390f35b61015d60048036038101906101589190611cba565b610432565b005b61017960048036038101906101749190611ac4565b61071b565b6040516101869190611cfa565b60405180910390f35b6101a960048036038101906101a49190611cba565b6108ba565b6040516101b69190611d30565b60405180910390f35b6101d960048036038101906101d49190611ac4565b6108e9565b6040516101e69190611cfa565b60405180910390f35b6101f7610a9a565b6040516102049190611d5a565b60405180910390f35b610215610ac0565b005b610231600480360381019061022c9190611ac4565b610b48565b60405161023e9190611e33565b60405180910390f35b61024f610ce8565b60405161025c9190611d5a565b60405180910390f35b61027f600480360381019061027a9190611e7a565b610d11565b60405161028c91906120e3565b60405180910390f35b6102af60048036038101906102aa9190612105565b610ff2565b005b6102cb60048036038101906102c69190611ac4565b6110b2565b005b6102e760048036038101906102e29190612197565b6111e0565b005b61030360048036038101906102fe9190611cba565b6113a4565b6040516103109190611cfa565b60405180910390f35b610333600480360381019061032e9190611cba565b6113c9565b005b61034f600480360381019061034a9190611ac4565b61167d565b005b61036b60048036038101906103669190612105565b611753565b005b600460205280600052604060002060009150905080600001549080600101805461039690612226565b80601f01602080910402602001604051908101604052809291908181526020018280546103c290612226565b801561040f5780601f106103e45761010080835404028352916020019161040f565b820191906000526020600020905b8154815290600101906020018083116103f257829003601f168201915b5050505050908060030154908060040160009054906101000a900460ff16905084565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661047361184a565b73ffffffffffffffffffffffffffffffffffffffff16146104c0576040517f92471d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001816104cc816108e9565b8260048111156104df576104de611b99565b5b14610516576040517f8f9a780c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060009054906101000a900460ff16156105ab576040517f285d4e4b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060046000858152602001908152602001600020905060018160030160008282546105d79190612286565b925050819055506001600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600086815260200190815260200160002060006101000a81548160ff02191690831515021790555080600201859080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600181600201805490506106c091906122dc565b600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000868152602001908152602001600020819055505050505050565b600080600460008481526020019081526020016000206040518060a00160405290816000820154815260200160018201805461075690612226565b80601f016020809104026020016040519081016040528092919081815260200182805461078290612226565b80156107cf5780601f106107a4576101008083540402835291602001916107cf565b820191906000526020600020905b8154815290600101906020018083116107b257829003601f168201915b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561085d57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610813575b50505050508152602001600382015481526020016004820160009054906101000a900460ff16600481111561089557610894611b99565b5b60048111156108a7576108a6611b99565b5b8152505090508060600151915050919050565b60026020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b600080600460008481526020019081526020016000206040518060a00160405290816000820154815260200160018201805461092490612226565b80601f016020809104026020016040519081016040528092919081815260200182805461095090612226565b801561099d5780601f106109725761010080835404028352916020019161099d565b820191906000526020600020905b81548152906001019060200180831161098057829003601f168201915b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015610a2b57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116109e1575b50505050508152602001600382015481526020016004820160009054906101000a900460ff166004811115610a6357610a62611b99565b5b6004811115610a7557610a74611b99565b5b81525050905080608001516004811115610a9257610a91611b99565b5b915050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610ac861184a565b73ffffffffffffffffffffffffffffffffffffffff16610ae6610ce8565b73ffffffffffffffffffffffffffffffffffffffff1614610b3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b339061235c565b60405180910390fd5b610b466000611852565b565b60606000600460008481526020019081526020016000206040518060a001604052908160008201548152602001600182018054610b8490612226565b80601f0160208091040260200160405190810160405280929190818152602001828054610bb090612226565b8015610bfd5780601f10610bd257610100808354040283529160200191610bfd565b820191906000526020600020905b815481529060010190602001808311610be057829003601f168201915b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015610c8b57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610c41575b50505050508152602001600382015481526020016004820160009054906101000a900460ff166004811115610cc357610cc2611b99565b5b6004811115610cd557610cd4611b99565b5b8152505090508060400151915050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060008080600186610d2491906122dc565b955084861115610d5b578486610d3a91906122dc565b915060018587610d4a91906122dc565b610d549190612286565b9050610d63565b600191508590505b60008167ffffffffffffffff811115610d7f57610d7e61237c565b5b604051908082528060200260200182016040528015610db857816020015b610da5611916565b815260200190600190039081610d9d5790505b50905060008790505b838110610fe357886004811115610ddb57610dda611b99565b5b6004600083815260200190815260200160002060040160009054906101000a900460ff166004811115610e1157610e10611b99565b5b03610fd057600460008281526020019081526020016000206040518060a001604052908160008201548152602001600182018054610e4e90612226565b80601f0160208091040260200160405190810160405280929190818152602001828054610e7a90612226565b8015610ec75780601f10610e9c57610100808354040283529160200191610ec7565b820191906000526020600020905b815481529060010190602001808311610eaa57829003601f168201915b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015610f5557602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610f0b575b50505050508152602001600382015481526020016004820160009054906101000a900460ff166004811115610f8d57610f8c611b99565b5b6004811115610f9f57610f9e611b99565b5b81525050828681518110610fb657610fb56123ab565b5b60200260200101819052508480610fcc906123da565b9550505b8080610fdb90612422565b915050610dc1565b50809450505050509392505050565b610ffa61184a565b73ffffffffffffffffffffffffffffffffffffffff16611018610ce8565b73ffffffffffffffffffffffffffffffffffffffff161461106e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110659061235c565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166110f361184a565b73ffffffffffffffffffffffffffffffffffffffff1614611140576040517f92471d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018161114c816108e9565b82600481111561115f5761115e611b99565b5b14611196576040517f8f9a780c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060046000858152602001908152602001600020905060028160040160006101000a81548160ff021916908360048111156111d5576111d4611b99565b5b021790555050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661122161184a565b73ffffffffffffffffffffffffffffffffffffffff161461126e576040517f92471d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611276611916565b8381600001818152505082828080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050816020018190525060018160600181815250506001816080019060048111156112f1576112f0611b99565b5b9081600481111561130557611304611b99565b5b815250508060046000868152602001908152602001600020600082015181600001556020820151816001019080519060200190611343929190611957565b5060408201518160020190805190602001906113609291906119dd565b506060820151816003015560808201518160040160006101000a81548160ff0219169083600481111561139657611395611b99565b5b021790555090505050505050565b6003602052816000526040600020602052806000526040600020600091509150505481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661140a61184a565b73ffffffffffffffffffffffffffffffffffffffff1614611457576040517f92471d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600181611463816108e9565b82600481111561147657611475611b99565b5b146114ad576040517f8f9a780c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060009054906101000a900460ff16611541576040517f4c0e0faf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600460008581526020019081526020016000209050600181600301600082825461156d91906122dc565b925050819055506000600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008681526020019081526020016000205490508160020181815481106115df576115de6123ab565b5b9060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600087815260200190815260200160002060006101000a81548160ff021916908315150217905550505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166116be61184a565b73ffffffffffffffffffffffffffffffffffffffff161461170b576040517f92471d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060046000838152602001908152602001600020905060038160040160006101000a81548160ff0219169083600481111561174a57611749611b99565b5b02179055505050565b61175b61184a565b73ffffffffffffffffffffffffffffffffffffffff16611779610ce8565b73ffffffffffffffffffffffffffffffffffffffff16146117cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117c69061235c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361183e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611835906124bd565b60405180910390fd5b61184781611852565b50565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6040518060a00160405280600081526020016060815260200160608152602001600081526020016000600481111561195157611950611b99565b5b81525090565b82805461196390612226565b90600052602060002090601f01602090048101928261198557600085556119cc565b82601f1061199e57805160ff19168380011785556119cc565b828001600101855582156119cc579182015b828111156119cb5782518255916020019190600101906119b0565b5b5090506119d99190611a67565b5090565b828054828255906000526020600020908101928215611a56579160200282015b82811115611a555782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906119fd565b5b509050611a639190611a67565b5090565b5b80821115611a80576000816000905550600101611a68565b5090565b600080fd5b600080fd5b6000819050919050565b611aa181611a8e565b8114611aac57600080fd5b50565b600081359050611abe81611a98565b92915050565b600060208284031215611ada57611ad9611a84565b5b6000611ae884828501611aaf565b91505092915050565b611afa81611a8e565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611b3a578082015181840152602081019050611b1f565b83811115611b49576000848401525b50505050565b6000601f19601f8301169050919050565b6000611b6b82611b00565b611b758185611b0b565b9350611b85818560208601611b1c565b611b8e81611b4f565b840191505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60058110611bd957611bd8611b99565b5b50565b6000819050611bea82611bc8565b919050565b6000611bfa82611bdc565b9050919050565b611c0a81611bef565b82525050565b6000608082019050611c256000830187611af1565b8181036020830152611c378186611b60565b9050611c466040830185611af1565b611c536060830184611c01565b95945050505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611c8782611c5c565b9050919050565b611c9781611c7c565b8114611ca257600080fd5b50565b600081359050611cb481611c8e565b92915050565b60008060408385031215611cd157611cd0611a84565b5b6000611cdf85828601611ca5565b9250506020611cf085828601611aaf565b9150509250929050565b6000602082019050611d0f6000830184611af1565b92915050565b60008115159050919050565b611d2a81611d15565b82525050565b6000602082019050611d456000830184611d21565b92915050565b611d5481611c7c565b82525050565b6000602082019050611d6f6000830184611d4b565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611daa81611c7c565b82525050565b6000611dbc8383611da1565b60208301905092915050565b6000602082019050919050565b6000611de082611d75565b611dea8185611d80565b9350611df583611d91565b8060005b83811015611e26578151611e0d8882611db0565b9750611e1883611dc8565b925050600181019050611df9565b5085935050505092915050565b60006020820190508181036000830152611e4d8184611dd5565b905092915050565b60058110611e6257600080fd5b50565b600081359050611e7481611e55565b92915050565b600080600060608486031215611e9357611e92611a84565b5b6000611ea186828701611e65565b9350506020611eb286828701611aaf565b9250506040611ec386828701611aaf565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611f0281611a8e565b82525050565b600082825260208201905092915050565b6000611f2482611b00565b611f2e8185611f08565b9350611f3e818560208601611b1c565b611f4781611b4f565b840191505092915050565b600082825260208201905092915050565b6000611f6e82611d75565b611f788185611f52565b9350611f8383611d91565b8060005b83811015611fb4578151611f9b8882611db0565b9750611fa683611dc8565b925050600181019050611f87565b5085935050505092915050565b611fca81611bef565b82525050565b600060a083016000830151611fe86000860182611ef9565b50602083015184820360208601526120008282611f19565b9150506040830151848203604086015261201a8282611f63565b915050606083015161202f6060860182611ef9565b5060808301516120426080860182611fc1565b508091505092915050565b60006120598383611fd0565b905092915050565b6000602082019050919050565b600061207982611ecd565b6120838185611ed8565b93508360208202850161209585611ee9565b8060005b858110156120d157848403895281516120b2858261204d565b94506120bd83612061565b925060208a01995050600181019050612099565b50829750879550505050505092915050565b600060208201905081810360008301526120fd818461206e565b905092915050565b60006020828403121561211b5761211a611a84565b5b600061212984828501611ca5565b91505092915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261215757612156612132565b5b8235905067ffffffffffffffff81111561217457612173612137565b5b6020830191508360018202830111156121905761218f61213c565b5b9250929050565b6000806000604084860312156121b0576121af611a84565b5b60006121be86828701611aaf565b935050602084013567ffffffffffffffff8111156121df576121de611a89565b5b6121eb86828701612141565b92509250509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061223e57607f821691505b602082108103612251576122506121f7565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061229182611a8e565b915061229c83611a8e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156122d1576122d0612257565b5b828201905092915050565b60006122e782611a8e565b91506122f283611a8e565b92508282101561230557612304612257565b5b828203905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612346602083611b0b565b915061235182612310565b602082019050919050565b6000602082019050818103600083015261237581612339565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006123e582611a8e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361241757612416612257565b5b600182019050919050565b600061242d82611a8e565b9150600082036124405761243f612257565b5b600182039050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006124a7602683611b0b565b91506124b28261244b565b604082019050919050565b600060208201905081810360008301526124d68161249a565b905091905056fea2646970667358221220bf8a9d870319da742ed8115416ecd54b061ee00ca33002eb8206a9b0f46103f864736f6c634300080d0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "initializeQuestion(uint256,string)": {
        "params": {
          "questionId": "The id of the question"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setQuestionApi(address)": {
        "params": {
          "_newApi": "The new address of the question API."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "initializeQuestion(uint256,string)": {
        "notice": "Initializes a question to draft."
      },
      "setQuestionApi(address)": {
        "notice": "Sets the address of the question API."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "src/contracts/Protocol/QuestionStateController.sol:QuestionStateController",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5494,
        "contract": "src/contracts/Protocol/QuestionStateController.sol:QuestionStateController",
        "label": "questionApi",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 4315,
        "contract": "src/contracts/Protocol/QuestionStateController.sol:QuestionStateController",
        "label": "hasVoted",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 4321,
        "contract": "src/contracts/Protocol/QuestionStateController.sol:QuestionStateController",
        "label": "questionIndex",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 4326,
        "contract": "src/contracts/Protocol/QuestionStateController.sol:QuestionStateController",
        "label": "questionByState",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(QuestionStats)4747_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(STATE)5386": {
        "encoding": "inplace",
        "label": "enum IQuestionStateController.STATE",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(QuestionStats)4747_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct QuestionStateController.QuestionStats)",
        "numberOfBytes": "32",
        "value": "t_struct(QuestionStats)4747_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(QuestionStats)4747_storage": {
        "encoding": "inplace",
        "label": "struct QuestionStateController.QuestionStats",
        "members": [
          {
            "astId": 4736,
            "contract": "src/contracts/Protocol/QuestionStateController.sol:QuestionStateController",
            "label": "questionId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4738,
            "contract": "src/contracts/Protocol/QuestionStateController.sol:QuestionStateController",
            "label": "uri",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 4741,
            "contract": "src/contracts/Protocol/QuestionStateController.sol:QuestionStateController",
            "label": "voters",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 4743,
            "contract": "src/contracts/Protocol/QuestionStateController.sol:QuestionStateController",
            "label": "totalVotes",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4746,
            "contract": "src/contracts/Protocol/QuestionStateController.sol:QuestionStateController",
            "label": "questionState",
            "offset": 0,
            "slot": "4",
            "type": "t_enum(STATE)5386"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}