/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace NBadgeAuthInterface {
  export type BadgeStruct = {
    badge: PromiseOrValue<string>;
    id: PromiseOrValue<BigNumberish>;
    min: PromiseOrValue<BigNumberish>;
    max: PromiseOrValue<BigNumberish>;
    points: PromiseOrValue<BigNumberish>;
  };

  export type BadgeStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    badge: string;
    id: BigNumber;
    min: BigNumber;
    max: BigNumber;
    points: BigNumber;
  };

  export type NodeStruct = {
    deployerAllowed: PromiseOrValue<boolean>;
    required: PromiseOrValue<BigNumberish>;
    badges: NBadgeAuthInterface.BadgeStruct[];
  };

  export type NodeStructOutput = [
    boolean,
    BigNumber,
    NBadgeAuthInterface.BadgeStructOutput[]
  ] & {
    deployerAllowed: boolean;
    required: BigNumber;
    badges: NBadgeAuthInterface.BadgeStructOutput[];
  };
}

export interface LaborMarketFactoryInterface extends utils.Interface {
  functions: {
    "createLaborMarket(address,string,address,uint256[],uint256[],uint256[],bytes4[],(bool,uint256,(address,uint256,uint256,uint256,uint256)[])[])": FunctionFragment;
    "implementation()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "createLaborMarket" | "implementation"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createLaborMarket",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>[],
      NBadgeAuthInterface.NodeStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "implementation",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "createLaborMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "implementation",
    data: BytesLike
  ): Result;

  events: {
    "LaborMarketCreated(address,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LaborMarketCreated"): EventFragment;
}

export interface LaborMarketCreatedEventObject {
  marketAddress: string;
  deployer: string;
  implementation: string;
}
export type LaborMarketCreatedEvent = TypedEvent<
  [string, string, string],
  LaborMarketCreatedEventObject
>;

export type LaborMarketCreatedEventFilter =
  TypedEventFilter<LaborMarketCreatedEvent>;

export interface LaborMarketFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LaborMarketFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createLaborMarket(
      _deployer: PromiseOrValue<string>,
      _uri: PromiseOrValue<string>,
      _criteria: PromiseOrValue<string>,
      _auxilaries: PromiseOrValue<BigNumberish>[],
      _alphas: PromiseOrValue<BigNumberish>[],
      _betas: PromiseOrValue<BigNumberish>[],
      _sigs: PromiseOrValue<BytesLike>[],
      _nodes: NBadgeAuthInterface.NodeStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    implementation(overrides?: CallOverrides): Promise<[string]>;
  };

  createLaborMarket(
    _deployer: PromiseOrValue<string>,
    _uri: PromiseOrValue<string>,
    _criteria: PromiseOrValue<string>,
    _auxilaries: PromiseOrValue<BigNumberish>[],
    _alphas: PromiseOrValue<BigNumberish>[],
    _betas: PromiseOrValue<BigNumberish>[],
    _sigs: PromiseOrValue<BytesLike>[],
    _nodes: NBadgeAuthInterface.NodeStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  implementation(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    createLaborMarket(
      _deployer: PromiseOrValue<string>,
      _uri: PromiseOrValue<string>,
      _criteria: PromiseOrValue<string>,
      _auxilaries: PromiseOrValue<BigNumberish>[],
      _alphas: PromiseOrValue<BigNumberish>[],
      _betas: PromiseOrValue<BigNumberish>[],
      _sigs: PromiseOrValue<BytesLike>[],
      _nodes: NBadgeAuthInterface.NodeStruct[],
      overrides?: CallOverrides
    ): Promise<string>;

    implementation(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "LaborMarketCreated(address,address,address)"(
      marketAddress?: PromiseOrValue<string> | null,
      deployer?: PromiseOrValue<string> | null,
      implementation?: PromiseOrValue<string> | null
    ): LaborMarketCreatedEventFilter;
    LaborMarketCreated(
      marketAddress?: PromiseOrValue<string> | null,
      deployer?: PromiseOrValue<string> | null,
      implementation?: PromiseOrValue<string> | null
    ): LaborMarketCreatedEventFilter;
  };

  estimateGas: {
    createLaborMarket(
      _deployer: PromiseOrValue<string>,
      _uri: PromiseOrValue<string>,
      _criteria: PromiseOrValue<string>,
      _auxilaries: PromiseOrValue<BigNumberish>[],
      _alphas: PromiseOrValue<BigNumberish>[],
      _betas: PromiseOrValue<BigNumberish>[],
      _sigs: PromiseOrValue<BytesLike>[],
      _nodes: NBadgeAuthInterface.NodeStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    implementation(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    createLaborMarket(
      _deployer: PromiseOrValue<string>,
      _uri: PromiseOrValue<string>,
      _criteria: PromiseOrValue<string>,
      _auxilaries: PromiseOrValue<BigNumberish>[],
      _alphas: PromiseOrValue<BigNumberish>[],
      _betas: PromiseOrValue<BigNumberish>[],
      _sigs: PromiseOrValue<BytesLike>[],
      _nodes: NBadgeAuthInterface.NodeStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    implementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
