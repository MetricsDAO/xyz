/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface EnforcementCriteriaInterfaceInterface extends utils.Interface {
  functions: {
    "enforce(uint256,uint256,uint256,uint256,address)": FunctionFragment;
    "remainder(uint256)": FunctionFragment;
    "rewards(uint256,uint256)": FunctionFragment;
    "setConfiguration(uint256[],uint256[],uint256[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "enforce"
      | "remainder"
      | "rewards"
      | "setConfiguration"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "enforce",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "remainder",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "rewards",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setConfiguration",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;

  decodeFunctionResult(functionFragment: "enforce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "remainder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setConfiguration",
    data: BytesLike
  ): Result;

  events: {
    "EnforcementConfigured(address,uint256[],uint256[],uint256[])": EventFragment;
    "SubmissionReviewed(address,uint256,uint256,uint256,uint256,uint256,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EnforcementConfigured"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubmissionReviewed"): EventFragment;
}

export interface EnforcementConfiguredEventObject {
  _market: string;
  _auxiliaries: BigNumber[];
  _alphas: BigNumber[];
  _betas: BigNumber[];
}
export type EnforcementConfiguredEvent = TypedEvent<
  [string, BigNumber[], BigNumber[], BigNumber[]],
  EnforcementConfiguredEventObject
>;

export type EnforcementConfiguredEventFilter =
  TypedEventFilter<EnforcementConfiguredEvent>;

export interface SubmissionReviewedEventObject {
  _market: string;
  _requestId: BigNumber;
  _submissionId: BigNumber;
  intentChange: BigNumber;
  earnings: BigNumber;
  remainder: BigNumber;
  newSubmission: boolean;
}
export type SubmissionReviewedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean],
  SubmissionReviewedEventObject
>;

export type SubmissionReviewedEventFilter =
  TypedEventFilter<SubmissionReviewedEvent>;

export interface EnforcementCriteriaInterface extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EnforcementCriteriaInterfaceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    enforce(
      _requestId: PromiseOrValue<BigNumberish>,
      _submissionId: PromiseOrValue<BigNumberish>,
      _score: PromiseOrValue<BigNumberish>,
      _availableShare: PromiseOrValue<BigNumberish>,
      _enforcer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    remainder(
      _requestId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rewards(
      _requestId: PromiseOrValue<BigNumberish>,
      _submissionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setConfiguration(
      _auxiliaries: PromiseOrValue<BigNumberish>[],
      _alphas: PromiseOrValue<BigNumberish>[],
      _betas: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  enforce(
    _requestId: PromiseOrValue<BigNumberish>,
    _submissionId: PromiseOrValue<BigNumberish>,
    _score: PromiseOrValue<BigNumberish>,
    _availableShare: PromiseOrValue<BigNumberish>,
    _enforcer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  remainder(
    _requestId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rewards(
    _requestId: PromiseOrValue<BigNumberish>,
    _submissionId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setConfiguration(
    _auxiliaries: PromiseOrValue<BigNumberish>[],
    _alphas: PromiseOrValue<BigNumberish>[],
    _betas: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    enforce(
      _requestId: PromiseOrValue<BigNumberish>,
      _submissionId: PromiseOrValue<BigNumberish>,
      _score: PromiseOrValue<BigNumberish>,
      _availableShare: PromiseOrValue<BigNumberish>,
      _enforcer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean, number]>;

    remainder(
      _requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewards(
      _requestId: PromiseOrValue<BigNumberish>,
      _submissionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean] & { amount: BigNumber; requiresSubmission: boolean }
    >;

    setConfiguration(
      _auxiliaries: PromiseOrValue<BigNumberish>[],
      _alphas: PromiseOrValue<BigNumberish>[],
      _betas: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "EnforcementConfigured(address,uint256[],uint256[],uint256[])"(
      _market?: PromiseOrValue<string> | null,
      _auxiliaries?: null,
      _alphas?: null,
      _betas?: null
    ): EnforcementConfiguredEventFilter;
    EnforcementConfigured(
      _market?: PromiseOrValue<string> | null,
      _auxiliaries?: null,
      _alphas?: null,
      _betas?: null
    ): EnforcementConfiguredEventFilter;

    "SubmissionReviewed(address,uint256,uint256,uint256,uint256,uint256,bool)"(
      _market?: PromiseOrValue<string> | null,
      _requestId?: PromiseOrValue<BigNumberish> | null,
      _submissionId?: PromiseOrValue<BigNumberish> | null,
      intentChange?: null,
      earnings?: null,
      remainder?: null,
      newSubmission?: null
    ): SubmissionReviewedEventFilter;
    SubmissionReviewed(
      _market?: PromiseOrValue<string> | null,
      _requestId?: PromiseOrValue<BigNumberish> | null,
      _submissionId?: PromiseOrValue<BigNumberish> | null,
      intentChange?: null,
      earnings?: null,
      remainder?: null,
      newSubmission?: null
    ): SubmissionReviewedEventFilter;
  };

  estimateGas: {
    enforce(
      _requestId: PromiseOrValue<BigNumberish>,
      _submissionId: PromiseOrValue<BigNumberish>,
      _score: PromiseOrValue<BigNumberish>,
      _availableShare: PromiseOrValue<BigNumberish>,
      _enforcer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    remainder(
      _requestId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rewards(
      _requestId: PromiseOrValue<BigNumberish>,
      _submissionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setConfiguration(
      _auxiliaries: PromiseOrValue<BigNumberish>[],
      _alphas: PromiseOrValue<BigNumberish>[],
      _betas: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    enforce(
      _requestId: PromiseOrValue<BigNumberish>,
      _submissionId: PromiseOrValue<BigNumberish>,
      _score: PromiseOrValue<BigNumberish>,
      _availableShare: PromiseOrValue<BigNumberish>,
      _enforcer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    remainder(
      _requestId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rewards(
      _requestId: PromiseOrValue<BigNumberish>,
      _submissionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setConfiguration(
      _auxiliaries: PromiseOrValue<BigNumberish>[],
      _alphas: PromiseOrValue<BigNumberish>[],
      _betas: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
