// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id     String   @id @default(cuid())
  wallet Wallet[]
}

model Wallet {
  address     String  @id @unique
  chain       String
  user        User    @relation(fields: [userId], references: [id])
  userId      String
  isConnected Boolean
}

model Transaction {
  hash   String @id @unique
  from   String
  status String
}

// Respresents a project or blockchain that MDAO supports. Appears in labor market creation flow and search
model Project {
  id           String        @id @default(cuid())
  slug         String        @unique
  name         String
  laborMarkets LaborMarket[]
}

// Represents a token that MDAO supports. Appear in labor market creation flows and search.
model Token {
  symbol       String        @id @unique
  name         String
  laborMarkets LaborMarket[]
}

// Indexed models...

// Represents a labor market. Labor markets are created on-chain and populated via the indexer.
model LaborMarket {
  address             String           @id @unique
  title               String
  description         String
  type                String
  launchAccess        String
  launchBadgerAddress String?
  launchBadgerTokenId String?
  rewardCurveAddress  String
  submitRepMin        Int
  submitRepMax        Int
  reviewBadgerAddress String
  reviewBadgerTokenId String
  sponsorAddress      String
  tokens              Token[]
  projects            Project[]
  serviceRequests     ServiceRequest[]
}

model ServiceRequest {
  id                 String       @id @unique
  title              String
  laborMarketAddress String
  laborMarket        LaborMarket  @relation(fields: [laborMarketAddress], references: [address])
  submissions        Submission[]
}

model Review {
  id           String     @id @unique
  submissionId String
  comment      String
  scoreStatus  String
  createdAt    DateTime   @default(now())
  creatorId    String
  submission   Submission @relation(fields: [submissionId], references: [id])
}

// Represents an on-chain submission to a service request.
model Submission {
  id               String         @id @unique
  serviceRequestId String
  createdAt        DateTime       @default(now())
  creatorId        String
  title            String
  description      String
  scoreStatus      String
  serviceRequest   ServiceRequest @relation(fields: [serviceRequestId], references: [id])
  reviews          Review[]
}
