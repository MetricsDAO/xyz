// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  address   String   @default("")
  createdAt DateTime @default(now())
  wallet    Wallet[]
}

model Wallet {
  id          String   @id @default(cuid())
  address     String
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  networkName String
  chain       Network  @relation(fields: [networkName], references: [name])
}

model Transaction {
  hash   String @id @unique
  from   String
  status String
}

// Respresents a project or blockchain that MDAO supports. Appears in labor market creation flow and search
model Project {
  id           String        @id @default(cuid())
  slug         String        @unique
  name         String
  createdAt    DateTime      @default(now())
  laborMarkets LaborMarket[]
}

// Represents a token that MDAO supports. Appear in labor market creation flows and search.
model Token {
  symbol       String        @id @unique
  name         String
  networkName  String
  chain        Network       @relation(fields: [networkName], references: [name])
  laborMarkets LaborMarket[]
}

// Indexed models...

// Represents a labor market. Labor markets are created on-chain and populated via the indexer.
model LaborMarket {
  address             String           @id @unique
  title               String
  description         String
  type                String
  launchAccess        String
  launchBadgerAddress String?
  launchBadgerTokenId String?
  rewardCurveAddress  String
  submitRepMin        Int
  submitRepMax        Int
  reviewBadgerAddress String
  reviewBadgerTokenId String
  sponsorAddress      String
  tokens              Token[]
  projects            Project[]
  serviceRequests     ServiceRequest[]
  createdAt           DateTime         @default(now())
}

model ServiceRequest {
  id                 String       @id @default(cuid())
  contractId         String       @unique @default(cuid())
  title              String
  laborMarketAddress String
  createdAt          DateTime     @default(now())
  laborMarket        LaborMarket  @relation(fields: [laborMarketAddress], references: [address])
  submissions        Submission[]

  @@unique([contractId, laborMarketAddress])
}

model Review {
  id                 String      @id @default(cuid())
  contractId         String      @unique @default(cuid())
  submissionId       String
  comment            String
  createdAt          DateTime    @default(now())
  creatorId          String
  serviceRequestId   String
  laborMarketAddress String
  submission         Submission? @relation(fields: [submissionId, laborMarketAddress], references: [contractId, laborMarketAddress])
  score              Int
}

// Represents an on-chain submission to a service request.
model Submission {
  id                 String         @id @default(cuid())
  contractId         String         @unique @default(cuid())
  serviceRequestId   String
  createdAt          DateTime       @default(now())
  creatorId          String
  title              String
  description        String
  laborMarketAddress String
  score              Int
  reviews            Review[]
  serviceRequest     ServiceRequest @relation(fields: [laborMarketAddress, serviceRequestId], references: [laborMarketAddress, contractId])

  @@unique([contractId, laborMarketAddress])
}

model Network {
  name   String   @id @unique
  token  Token[]
  wallet Wallet[]
}
